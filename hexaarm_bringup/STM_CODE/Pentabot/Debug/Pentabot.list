
Pentabot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bec  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000023c  08005d8c  08005d8c  00006d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fc8  08005fc8  0000706c  2**0
                  CONTENTS
  4 .ARM          00000008  08005fc8  08005fc8  00006fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fd0  08005fd0  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fd0  08005fd0  00006fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005fd4  08005fd4  00006fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08005fd8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000434  2000006c  08006044  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a0  08006044  000074a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d60a  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f41  00000000  00000000  000146a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d18  00000000  00000000  000165e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a3d  00000000  00000000  00017300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001713d  00000000  00000000  00017d3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e3f6  00000000  00000000  0002ee7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f5c5  00000000  00000000  0003d270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cc835  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042e0  00000000  00000000  000cc878  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000d0b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005d74 	.word	0x08005d74

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08005d74 	.word	0x08005d74

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_UARTEx_RxEventCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b08c      	sub	sp, #48	@ 0x30
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	460b      	mov	r3, r1
 800058a:	807b      	strh	r3, [r7, #2]
	// Ensure we're using UART1
	if (huart->Instance == USART1) {
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a3b      	ldr	r2, [pc, #236]	@ (8000680 <HAL_UARTEx_RxEventCallback+0x100>)
 8000592:	4293      	cmp	r3, r2
 8000594:	d16b      	bne.n	800066e <HAL_UARTEx_RxEventCallback+0xee>
		RxData[Size] = '\0';  // Null-terminate received data
 8000596:	887b      	ldrh	r3, [r7, #2]
 8000598:	4a3a      	ldr	r2, [pc, #232]	@ (8000684 <HAL_UARTEx_RxEventCallback+0x104>)
 800059a:	2100      	movs	r1, #0
 800059c:	54d1      	strb	r1, [r2, r3]
		char *token;
		int servo_angles[7] = { 0 };  // Initialize angles array to zero
 800059e:	f107 030c 	add.w	r3, r7, #12
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]
 80005a8:	609a      	str	r2, [r3, #8]
 80005aa:	60da      	str	r2, [r3, #12]
 80005ac:	611a      	str	r2, [r3, #16]
 80005ae:	615a      	str	r2, [r3, #20]
 80005b0:	619a      	str	r2, [r3, #24]
		int index = 0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	62bb      	str	r3, [r7, #40]	@ 0x28

		// Parse RxData for comma-separated values
		token = strtok((char*) RxData, ",");
 80005b6:	4934      	ldr	r1, [pc, #208]	@ (8000688 <HAL_UARTEx_RxEventCallback+0x108>)
 80005b8:	4832      	ldr	r0, [pc, #200]	@ (8000684 <HAL_UARTEx_RxEventCallback+0x104>)
 80005ba:	f004 fb37 	bl	8004c2c <strtok>
 80005be:	62f8      	str	r0, [r7, #44]	@ 0x2c
		while (token != NULL && index < 7) {  // Parse up to 5 angles
 80005c0:	e020      	b.n	8000604 <HAL_UARTEx_RxEventCallback+0x84>
			servo_angles[index] = atoi(token); // Convert angle string to integer
 80005c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80005c4:	f004 f97c 	bl	80048c0 <atoi>
 80005c8:	4602      	mov	r2, r0
 80005ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005cc:	009b      	lsls	r3, r3, #2
 80005ce:	3330      	adds	r3, #48	@ 0x30
 80005d0:	443b      	add	r3, r7
 80005d2:	f843 2c24 	str.w	r2, [r3, #-36]
			if (servo_angles[index] > 180) {
 80005d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005d8:	009b      	lsls	r3, r3, #2
 80005da:	3330      	adds	r3, #48	@ 0x30
 80005dc:	443b      	add	r3, r7
 80005de:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80005e2:	2bb4      	cmp	r3, #180	@ 0xb4
 80005e4:	dd06      	ble.n	80005f4 <HAL_UARTEx_RxEventCallback+0x74>
				servo_angles[index] = 180;     // Cap angle to max 180
 80005e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005e8:	009b      	lsls	r3, r3, #2
 80005ea:	3330      	adds	r3, #48	@ 0x30
 80005ec:	443b      	add	r3, r7
 80005ee:	22b4      	movs	r2, #180	@ 0xb4
 80005f0:	f843 2c24 	str.w	r2, [r3, #-36]
			}
			index++;
 80005f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005f6:	3301      	adds	r3, #1
 80005f8:	62bb      	str	r3, [r7, #40]	@ 0x28
			token = strtok(NULL, ",");         // Move to next token
 80005fa:	4923      	ldr	r1, [pc, #140]	@ (8000688 <HAL_UARTEx_RxEventCallback+0x108>)
 80005fc:	2000      	movs	r0, #0
 80005fe:	f004 fb15 	bl	8004c2c <strtok>
 8000602:	62f8      	str	r0, [r7, #44]	@ 0x2c
		while (token != NULL && index < 7) {  // Parse up to 5 angles
 8000604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000606:	2b00      	cmp	r3, #0
 8000608:	d002      	beq.n	8000610 <HAL_UARTEx_RxEventCallback+0x90>
 800060a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800060c:	2b06      	cmp	r3, #6
 800060e:	ddd8      	ble.n	80005c2 <HAL_UARTEx_RxEventCallback+0x42>
		}

		// Assign angles to respective servos (ensure order is correct)
		if (index > 0)
 8000610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000612:	2b00      	cmp	r3, #0
 8000614:	dd02      	ble.n	800061c <HAL_UARTEx_RxEventCallback+0x9c>
			Base_Shoulder.SetAngle = servo_angles[0];
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	4a1c      	ldr	r2, [pc, #112]	@ (800068c <HAL_UARTEx_RxEventCallback+0x10c>)
 800061a:	6053      	str	r3, [r2, #4]
		if (index > 1)
 800061c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800061e:	2b01      	cmp	r3, #1
 8000620:	dd02      	ble.n	8000628 <HAL_UARTEx_RxEventCallback+0xa8>
			Shoulder_Elbow.SetAngle = servo_angles[1];
 8000622:	693b      	ldr	r3, [r7, #16]
 8000624:	4a1a      	ldr	r2, [pc, #104]	@ (8000690 <HAL_UARTEx_RxEventCallback+0x110>)
 8000626:	6053      	str	r3, [r2, #4]
		if (index > 2)
 8000628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800062a:	2b02      	cmp	r3, #2
 800062c:	dd02      	ble.n	8000634 <HAL_UARTEx_RxEventCallback+0xb4>
			Elbow_Wrist.SetAngle = servo_angles[2];
 800062e:	697b      	ldr	r3, [r7, #20]
 8000630:	4a18      	ldr	r2, [pc, #96]	@ (8000694 <HAL_UARTEx_RxEventCallback+0x114>)
 8000632:	6053      	str	r3, [r2, #4]
		if (index > 3)
 8000634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000636:	2b03      	cmp	r3, #3
 8000638:	dd02      	ble.n	8000640 <HAL_UARTEx_RxEventCallback+0xc0>
			Wrist_Ulna.SetAngle = servo_angles[3];
 800063a:	69bb      	ldr	r3, [r7, #24]
 800063c:	4a16      	ldr	r2, [pc, #88]	@ (8000698 <HAL_UARTEx_RxEventCallback+0x118>)
 800063e:	6053      	str	r3, [r2, #4]
		if (index > 4)
 8000640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000642:	2b04      	cmp	r3, #4
 8000644:	dd02      	ble.n	800064c <HAL_UARTEx_RxEventCallback+0xcc>
			Ulna_Febur.SetAngle = servo_angles[4];
 8000646:	69fb      	ldr	r3, [r7, #28]
 8000648:	4a14      	ldr	r2, [pc, #80]	@ (800069c <HAL_UARTEx_RxEventCallback+0x11c>)
 800064a:	6053      	str	r3, [r2, #4]
		if (index > 5)
 800064c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800064e:	2b05      	cmp	r3, #5
 8000650:	dd02      	ble.n	8000658 <HAL_UARTEx_RxEventCallback+0xd8>
			Febur_Gripper.SetAngle = servo_angles[5];
 8000652:	6a3b      	ldr	r3, [r7, #32]
 8000654:	4a12      	ldr	r2, [pc, #72]	@ (80006a0 <HAL_UARTEx_RxEventCallback+0x120>)
 8000656:	6053      	str	r3, [r2, #4]
		if (index > 6)
 8000658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800065a:	2b06      	cmp	r3, #6
 800065c:	dd02      	ble.n	8000664 <HAL_UARTEx_RxEventCallback+0xe4>
			Right_finger.SetAngle = servo_angles[6];
 800065e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000660:	4a10      	ldr	r2, [pc, #64]	@ (80006a4 <HAL_UARTEx_RxEventCallback+0x124>)
 8000662:	6053      	str	r3, [r2, #4]

		// Clear RxData buffer for the next command
		memset(RxData, 0, RxBufferSize);
 8000664:	2264      	movs	r2, #100	@ 0x64
 8000666:	2100      	movs	r1, #0
 8000668:	4806      	ldr	r0, [pc, #24]	@ (8000684 <HAL_UARTEx_RxEventCallback+0x104>)
 800066a:	f004 fad6 	bl	8004c1a <memset>
	}
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RxData, RxBufferSize);
 800066e:	2264      	movs	r2, #100	@ 0x64
 8000670:	4904      	ldr	r1, [pc, #16]	@ (8000684 <HAL_UARTEx_RxEventCallback+0x104>)
 8000672:	480d      	ldr	r0, [pc, #52]	@ (80006a8 <HAL_UARTEx_RxEventCallback+0x128>)
 8000674:	f003 f844 	bl	8003700 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8000678:	bf00      	nop
 800067a:	3730      	adds	r7, #48	@ 0x30
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40011000 	.word	0x40011000
 8000684:	20000208 	.word	0x20000208
 8000688:	08005d8c 	.word	0x08005d8c
 800068c:	200002dc 	.word	0x200002dc
 8000690:	200002ec 	.word	0x200002ec
 8000694:	200002fc 	.word	0x200002fc
 8000698:	2000030c 	.word	0x2000030c
 800069c:	2000031c 	.word	0x2000031c
 80006a0:	2000032c 	.word	0x2000032c
 80006a4:	2000033c 	.word	0x2000033c
 80006a8:	20000160 	.word	0x20000160

080006ac <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
	ReadyToSend = 1;
 80006b4:	4b04      	ldr	r3, [pc, #16]	@ (80006c8 <HAL_UART_TxCpltCallback+0x1c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]

}
 80006ba:	bf00      	nop
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	20000000 	.word	0x20000000

080006cc <SetServoAngle>:

void SetServoAngle(TIM_HandleTypeDef *htim, uint32_t channel, int angle) {
 80006cc:	b480      	push	{r7}
 80006ce:	b087      	sub	sp, #28
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	607a      	str	r2, [r7, #4]
	int pulseWidth = 500 + (angle * (2500 - 500) / 180); // Map angle to 500-2500μs range
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80006de:	fb02 f303 	mul.w	r3, r2, r3
 80006e2:	4a16      	ldr	r2, [pc, #88]	@ (800073c <SetServoAngle+0x70>)
 80006e4:	fb82 1203 	smull	r1, r2, r2, r3
 80006e8:	441a      	add	r2, r3
 80006ea:	11d2      	asrs	r2, r2, #7
 80006ec:	17db      	asrs	r3, r3, #31
 80006ee:	1ad3      	subs	r3, r2, r3
 80006f0:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80006f4:	617b      	str	r3, [r7, #20]
	__HAL_TIM_SetCompare(htim, channel, pulseWidth);
 80006f6:	68bb      	ldr	r3, [r7, #8]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d104      	bne.n	8000706 <SetServoAngle+0x3a>
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	697a      	ldr	r2, [r7, #20]
 8000702:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000704:	e013      	b.n	800072e <SetServoAngle+0x62>
	__HAL_TIM_SetCompare(htim, channel, pulseWidth);
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	2b04      	cmp	r3, #4
 800070a:	d104      	bne.n	8000716 <SetServoAngle+0x4a>
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000714:	e00b      	b.n	800072e <SetServoAngle+0x62>
	__HAL_TIM_SetCompare(htim, channel, pulseWidth);
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	2b08      	cmp	r3, #8
 800071a:	d104      	bne.n	8000726 <SetServoAngle+0x5a>
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	681a      	ldr	r2, [r3, #0]
 8000720:	697b      	ldr	r3, [r7, #20]
 8000722:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000724:	e003      	b.n	800072e <SetServoAngle+0x62>
	__HAL_TIM_SetCompare(htim, channel, pulseWidth);
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	697b      	ldr	r3, [r7, #20]
 800072c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800072e:	bf00      	nop
 8000730:	371c      	adds	r7, #28
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	b60b60b7 	.word	0xb60b60b7

08000740 <ServoInit>:

/* Initialize Servos */
void ServoInit() {
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
	// Base_Shoulder Servo on TIM4 CH4 (PB9)
	HAL_TIM_PWM_Init(&htim4);
 8000744:	4844      	ldr	r0, [pc, #272]	@ (8000858 <ServoInit+0x118>)
 8000746:	f002 fae7 	bl	8002d18 <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_Init(&htim3);
 800074a:	4844      	ldr	r0, [pc, #272]	@ (800085c <ServoInit+0x11c>)
 800074c:	f002 fae4 	bl	8002d18 <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_Init(&htim2);
 8000750:	4843      	ldr	r0, [pc, #268]	@ (8000860 <ServoInit+0x120>)
 8000752:	f002 fae1 	bl	8002d18 <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); //Base_Shoulder
 8000756:	2100      	movs	r1, #0
 8000758:	483f      	ldr	r0, [pc, #252]	@ (8000858 <ServoInit+0x118>)
 800075a:	f002 fb2d 	bl	8002db8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); //Shoulder_elbow
 800075e:	2104      	movs	r1, #4
 8000760:	483d      	ldr	r0, [pc, #244]	@ (8000858 <ServoInit+0x118>)
 8000762:	f002 fb29 	bl	8002db8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); //Elbow_wrist
 8000766:	2108      	movs	r1, #8
 8000768:	483b      	ldr	r0, [pc, #236]	@ (8000858 <ServoInit+0x118>)
 800076a:	f002 fb25 	bl	8002db8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); //Wrist_ulna
 800076e:	210c      	movs	r1, #12
 8000770:	4839      	ldr	r0, [pc, #228]	@ (8000858 <ServoInit+0x118>)
 8000772:	f002 fb21 	bl	8002db8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //Ulna_febur
 8000776:	2100      	movs	r1, #0
 8000778:	4838      	ldr	r0, [pc, #224]	@ (800085c <ServoInit+0x11c>)
 800077a:	f002 fb1d 	bl	8002db8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); //Febur_gripper
 800077e:	2104      	movs	r1, #4
 8000780:	4836      	ldr	r0, [pc, #216]	@ (800085c <ServoInit+0x11c>)
 8000782:	f002 fb19 	bl	8002db8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); //Right_finger
 8000786:	2104      	movs	r1, #4
 8000788:	4835      	ldr	r0, [pc, #212]	@ (8000860 <ServoInit+0x120>)
 800078a:	f002 fb15 	bl	8002db8 <HAL_TIM_PWM_Start>

	// Repeat initialization for other servos...

	// Set all servos to 90 degrees (Home position)
	SetServoAngle(&htim4, TIM_CHANNEL_4, 90);
 800078e:	225a      	movs	r2, #90	@ 0x5a
 8000790:	210c      	movs	r1, #12
 8000792:	4831      	ldr	r0, [pc, #196]	@ (8000858 <ServoInit+0x118>)
 8000794:	f7ff ff9a 	bl	80006cc <SetServoAngle>
	Base_Shoulder.Angle = 90;
 8000798:	4b32      	ldr	r3, [pc, #200]	@ (8000864 <ServoInit+0x124>)
 800079a:	225a      	movs	r2, #90	@ 0x5a
 800079c:	601a      	str	r2, [r3, #0]
	Base_Shoulder.SetAngle = 90;
 800079e:	4b31      	ldr	r3, [pc, #196]	@ (8000864 <ServoInit+0x124>)
 80007a0:	225a      	movs	r2, #90	@ 0x5a
 80007a2:	605a      	str	r2, [r3, #4]
	Base_Shoulder.MovingAngle = 90.0;
 80007a4:	4b2f      	ldr	r3, [pc, #188]	@ (8000864 <ServoInit+0x124>)
 80007a6:	4a30      	ldr	r2, [pc, #192]	@ (8000868 <ServoInit+0x128>)
 80007a8:	609a      	str	r2, [r3, #8]
	SetServoAngle(&htim4, TIM_CHANNEL_3, 90);
 80007aa:	225a      	movs	r2, #90	@ 0x5a
 80007ac:	2108      	movs	r1, #8
 80007ae:	482a      	ldr	r0, [pc, #168]	@ (8000858 <ServoInit+0x118>)
 80007b0:	f7ff ff8c 	bl	80006cc <SetServoAngle>
	Shoulder_Elbow.Angle = 90;
 80007b4:	4b2d      	ldr	r3, [pc, #180]	@ (800086c <ServoInit+0x12c>)
 80007b6:	225a      	movs	r2, #90	@ 0x5a
 80007b8:	601a      	str	r2, [r3, #0]
	Shoulder_Elbow.SetAngle = 90;
 80007ba:	4b2c      	ldr	r3, [pc, #176]	@ (800086c <ServoInit+0x12c>)
 80007bc:	225a      	movs	r2, #90	@ 0x5a
 80007be:	605a      	str	r2, [r3, #4]
	Shoulder_Elbow.MovingAngle = 90.0;
 80007c0:	4b2a      	ldr	r3, [pc, #168]	@ (800086c <ServoInit+0x12c>)
 80007c2:	4a29      	ldr	r2, [pc, #164]	@ (8000868 <ServoInit+0x128>)
 80007c4:	609a      	str	r2, [r3, #8]
	SetServoAngle(&htim4, TIM_CHANNEL_2, 90);
 80007c6:	225a      	movs	r2, #90	@ 0x5a
 80007c8:	2104      	movs	r1, #4
 80007ca:	4823      	ldr	r0, [pc, #140]	@ (8000858 <ServoInit+0x118>)
 80007cc:	f7ff ff7e 	bl	80006cc <SetServoAngle>
	Elbow_Wrist.Angle = 90;
 80007d0:	4b27      	ldr	r3, [pc, #156]	@ (8000870 <ServoInit+0x130>)
 80007d2:	225a      	movs	r2, #90	@ 0x5a
 80007d4:	601a      	str	r2, [r3, #0]
	Elbow_Wrist.SetAngle = 90;
 80007d6:	4b26      	ldr	r3, [pc, #152]	@ (8000870 <ServoInit+0x130>)
 80007d8:	225a      	movs	r2, #90	@ 0x5a
 80007da:	605a      	str	r2, [r3, #4]
	Elbow_Wrist.MovingAngle = 90.0;
 80007dc:	4b24      	ldr	r3, [pc, #144]	@ (8000870 <ServoInit+0x130>)
 80007de:	4a22      	ldr	r2, [pc, #136]	@ (8000868 <ServoInit+0x128>)
 80007e0:	609a      	str	r2, [r3, #8]
	SetServoAngle(&htim4, TIM_CHANNEL_1, 90);
 80007e2:	225a      	movs	r2, #90	@ 0x5a
 80007e4:	2100      	movs	r1, #0
 80007e6:	481c      	ldr	r0, [pc, #112]	@ (8000858 <ServoInit+0x118>)
 80007e8:	f7ff ff70 	bl	80006cc <SetServoAngle>
	Wrist_Ulna.Angle = 90;
 80007ec:	4b21      	ldr	r3, [pc, #132]	@ (8000874 <ServoInit+0x134>)
 80007ee:	225a      	movs	r2, #90	@ 0x5a
 80007f0:	601a      	str	r2, [r3, #0]
	Wrist_Ulna.SetAngle = 90;
 80007f2:	4b20      	ldr	r3, [pc, #128]	@ (8000874 <ServoInit+0x134>)
 80007f4:	225a      	movs	r2, #90	@ 0x5a
 80007f6:	605a      	str	r2, [r3, #4]
	Wrist_Ulna.MovingAngle = 90.0;
 80007f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000874 <ServoInit+0x134>)
 80007fa:	4a1b      	ldr	r2, [pc, #108]	@ (8000868 <ServoInit+0x128>)
 80007fc:	609a      	str	r2, [r3, #8]
	SetServoAngle(&htim3, TIM_CHANNEL_2, 90);
 80007fe:	225a      	movs	r2, #90	@ 0x5a
 8000800:	2104      	movs	r1, #4
 8000802:	4816      	ldr	r0, [pc, #88]	@ (800085c <ServoInit+0x11c>)
 8000804:	f7ff ff62 	bl	80006cc <SetServoAngle>
	Ulna_Febur.Angle = 90;
 8000808:	4b1b      	ldr	r3, [pc, #108]	@ (8000878 <ServoInit+0x138>)
 800080a:	225a      	movs	r2, #90	@ 0x5a
 800080c:	601a      	str	r2, [r3, #0]
	Ulna_Febur.SetAngle = 90;
 800080e:	4b1a      	ldr	r3, [pc, #104]	@ (8000878 <ServoInit+0x138>)
 8000810:	225a      	movs	r2, #90	@ 0x5a
 8000812:	605a      	str	r2, [r3, #4]
	Ulna_Febur.MovingAngle = 90.0;
 8000814:	4b18      	ldr	r3, [pc, #96]	@ (8000878 <ServoInit+0x138>)
 8000816:	4a14      	ldr	r2, [pc, #80]	@ (8000868 <ServoInit+0x128>)
 8000818:	609a      	str	r2, [r3, #8]
	SetServoAngle(&htim3, TIM_CHANNEL_1, 90);
 800081a:	225a      	movs	r2, #90	@ 0x5a
 800081c:	2100      	movs	r1, #0
 800081e:	480f      	ldr	r0, [pc, #60]	@ (800085c <ServoInit+0x11c>)
 8000820:	f7ff ff54 	bl	80006cc <SetServoAngle>
	Febur_Gripper.Angle = 90;
 8000824:	4b15      	ldr	r3, [pc, #84]	@ (800087c <ServoInit+0x13c>)
 8000826:	225a      	movs	r2, #90	@ 0x5a
 8000828:	601a      	str	r2, [r3, #0]
	Febur_Gripper.SetAngle = 90;
 800082a:	4b14      	ldr	r3, [pc, #80]	@ (800087c <ServoInit+0x13c>)
 800082c:	225a      	movs	r2, #90	@ 0x5a
 800082e:	605a      	str	r2, [r3, #4]
	Febur_Gripper.MovingAngle = 90.0;
 8000830:	4b12      	ldr	r3, [pc, #72]	@ (800087c <ServoInit+0x13c>)
 8000832:	4a0d      	ldr	r2, [pc, #52]	@ (8000868 <ServoInit+0x128>)
 8000834:	609a      	str	r2, [r3, #8]
	SetServoAngle(&htim2, TIM_CHANNEL_2, 90);
 8000836:	225a      	movs	r2, #90	@ 0x5a
 8000838:	2104      	movs	r1, #4
 800083a:	4809      	ldr	r0, [pc, #36]	@ (8000860 <ServoInit+0x120>)
 800083c:	f7ff ff46 	bl	80006cc <SetServoAngle>
	Right_finger.Angle = 90;
 8000840:	4b0f      	ldr	r3, [pc, #60]	@ (8000880 <ServoInit+0x140>)
 8000842:	225a      	movs	r2, #90	@ 0x5a
 8000844:	601a      	str	r2, [r3, #0]
	Right_finger.SetAngle = 90;
 8000846:	4b0e      	ldr	r3, [pc, #56]	@ (8000880 <ServoInit+0x140>)
 8000848:	225a      	movs	r2, #90	@ 0x5a
 800084a:	605a      	str	r2, [r3, #4]
	Right_finger.MovingAngle = 90.0;
 800084c:	4b0c      	ldr	r3, [pc, #48]	@ (8000880 <ServoInit+0x140>)
 800084e:	4a06      	ldr	r2, [pc, #24]	@ (8000868 <ServoInit+0x128>)
 8000850:	609a      	str	r2, [r3, #8]
}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000118 	.word	0x20000118
 800085c:	200000d0 	.word	0x200000d0
 8000860:	20000088 	.word	0x20000088
 8000864:	200002dc 	.word	0x200002dc
 8000868:	42b40000 	.word	0x42b40000
 800086c:	200002ec 	.word	0x200002ec
 8000870:	200002fc 	.word	0x200002fc
 8000874:	2000030c 	.word	0x2000030c
 8000878:	2000031c 	.word	0x2000031c
 800087c:	2000032c 	.word	0x2000032c
 8000880:	2000033c 	.word	0x2000033c

08000884 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000886:	b087      	sub	sp, #28
 8000888:	af06      	add	r7, sp, #24
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800088a:	f000 fea5 	bl	80015d8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800088e:	f000 f999 	bl	8000bc4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000892:	f000 fb83 	bl	8000f9c <MX_GPIO_Init>
	MX_DMA_Init();
 8000896:	f000 fb61 	bl	8000f5c <MX_DMA_Init>
	MX_TIM2_Init();
 800089a:	f000 f9f3 	bl	8000c84 <MX_TIM2_Init>
	MX_TIM3_Init();
 800089e:	f000 fa55 	bl	8000d4c <MX_TIM3_Init>
	MX_TIM4_Init();
 80008a2:	f000 fab7 	bl	8000e14 <MX_TIM4_Init>
	MX_USART1_UART_Init();
 80008a6:	f000 fb2f 	bl	8000f08 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RxData, RxBufferSize);
 80008aa:	2264      	movs	r2, #100	@ 0x64
 80008ac:	497a      	ldr	r1, [pc, #488]	@ (8000a98 <main+0x214>)
 80008ae:	487b      	ldr	r0, [pc, #492]	@ (8000a9c <main+0x218>)
 80008b0:	f002 ff26 	bl	8003700 <HAL_UARTEx_ReceiveToIdle_DMA>

	ServoInit();
 80008b4:	f7ff ff44 	bl	8000740 <ServoInit>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80008b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008bc:	4878      	ldr	r0, [pc, #480]	@ (8000aa0 <main+0x21c>)
 80008be:	f001 fdb9 	bl	8002434 <HAL_GPIO_TogglePin>
	CurrentMillis = 0;
 80008c2:	4b78      	ldr	r3, [pc, #480]	@ (8000aa4 <main+0x220>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
	PreviousMillis = HAL_GetTick();
 80008c8:	f000 feec 	bl	80016a4 <HAL_GetTick>
 80008cc:	4603      	mov	r3, r0
 80008ce:	4a76      	ldr	r2, [pc, #472]	@ (8000aa8 <main+0x224>)
 80008d0:	6013      	str	r3, [r2, #0]
	PreviousMillis_LED = HAL_GetTick();
 80008d2:	f000 fee7 	bl	80016a4 <HAL_GetTick>
 80008d6:	4603      	mov	r3, r0
 80008d8:	4a74      	ldr	r2, [pc, #464]	@ (8000aac <main+0x228>)
 80008da:	6013      	str	r3, [r2, #0]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		CurrentMillis = HAL_GetTick();
 80008dc:	f000 fee2 	bl	80016a4 <HAL_GetTick>
 80008e0:	4603      	mov	r3, r0
 80008e2:	4a70      	ldr	r2, [pc, #448]	@ (8000aa4 <main+0x220>)
 80008e4:	6013      	str	r3, [r2, #0]

		if (Base_Shoulder.Angle != Base_Shoulder.SetAngle) {
 80008e6:	4b72      	ldr	r3, [pc, #456]	@ (8000ab0 <main+0x22c>)
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	4b71      	ldr	r3, [pc, #452]	@ (8000ab0 <main+0x22c>)
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	429a      	cmp	r2, r3
 80008f0:	d01a      	beq.n	8000928 <main+0xa4>
			if (Base_Shoulder.SetAngle > Base_Shoulder.Angle) {
 80008f2:	4b6f      	ldr	r3, [pc, #444]	@ (8000ab0 <main+0x22c>)
 80008f4:	685a      	ldr	r2, [r3, #4]
 80008f6:	4b6e      	ldr	r3, [pc, #440]	@ (8000ab0 <main+0x22c>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	429a      	cmp	r2, r3
 80008fc:	dd05      	ble.n	800090a <main+0x86>
				Base_Shoulder.Angle += 1;
 80008fe:	4b6c      	ldr	r3, [pc, #432]	@ (8000ab0 <main+0x22c>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	3301      	adds	r3, #1
 8000904:	4a6a      	ldr	r2, [pc, #424]	@ (8000ab0 <main+0x22c>)
 8000906:	6013      	str	r3, [r2, #0]
 8000908:	e004      	b.n	8000914 <main+0x90>
			} else {
				Base_Shoulder.Angle -= 1;
 800090a:	4b69      	ldr	r3, [pc, #420]	@ (8000ab0 <main+0x22c>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	3b01      	subs	r3, #1
 8000910:	4a67      	ldr	r2, [pc, #412]	@ (8000ab0 <main+0x22c>)
 8000912:	6013      	str	r3, [r2, #0]
			}
			SetServoAngle(&htim4, TIM_CHANNEL_4, Base_Shoulder.Angle);
 8000914:	4b66      	ldr	r3, [pc, #408]	@ (8000ab0 <main+0x22c>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	461a      	mov	r2, r3
 800091a:	210c      	movs	r1, #12
 800091c:	4865      	ldr	r0, [pc, #404]	@ (8000ab4 <main+0x230>)
 800091e:	f7ff fed5 	bl	80006cc <SetServoAngle>
			HAL_Delay(2);
 8000922:	2002      	movs	r0, #2
 8000924:	f000 feca 	bl	80016bc <HAL_Delay>
		}

		if (Shoulder_Elbow.Angle != Shoulder_Elbow.SetAngle) {
 8000928:	4b63      	ldr	r3, [pc, #396]	@ (8000ab8 <main+0x234>)
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	4b62      	ldr	r3, [pc, #392]	@ (8000ab8 <main+0x234>)
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	429a      	cmp	r2, r3
 8000932:	d01a      	beq.n	800096a <main+0xe6>
			if (Shoulder_Elbow.SetAngle > Shoulder_Elbow.Angle) {
 8000934:	4b60      	ldr	r3, [pc, #384]	@ (8000ab8 <main+0x234>)
 8000936:	685a      	ldr	r2, [r3, #4]
 8000938:	4b5f      	ldr	r3, [pc, #380]	@ (8000ab8 <main+0x234>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	429a      	cmp	r2, r3
 800093e:	dd05      	ble.n	800094c <main+0xc8>
				Shoulder_Elbow.Angle += 1;
 8000940:	4b5d      	ldr	r3, [pc, #372]	@ (8000ab8 <main+0x234>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	3301      	adds	r3, #1
 8000946:	4a5c      	ldr	r2, [pc, #368]	@ (8000ab8 <main+0x234>)
 8000948:	6013      	str	r3, [r2, #0]
 800094a:	e004      	b.n	8000956 <main+0xd2>
			} else {
				Shoulder_Elbow.Angle -= 1;
 800094c:	4b5a      	ldr	r3, [pc, #360]	@ (8000ab8 <main+0x234>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	3b01      	subs	r3, #1
 8000952:	4a59      	ldr	r2, [pc, #356]	@ (8000ab8 <main+0x234>)
 8000954:	6013      	str	r3, [r2, #0]
			}
			SetServoAngle(&htim4, TIM_CHANNEL_3, Shoulder_Elbow.Angle);
 8000956:	4b58      	ldr	r3, [pc, #352]	@ (8000ab8 <main+0x234>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	461a      	mov	r2, r3
 800095c:	2108      	movs	r1, #8
 800095e:	4855      	ldr	r0, [pc, #340]	@ (8000ab4 <main+0x230>)
 8000960:	f7ff feb4 	bl	80006cc <SetServoAngle>
			HAL_Delay(2);
 8000964:	2002      	movs	r0, #2
 8000966:	f000 fea9 	bl	80016bc <HAL_Delay>
		}

		if (Elbow_Wrist.Angle != Elbow_Wrist.SetAngle) {
 800096a:	4b54      	ldr	r3, [pc, #336]	@ (8000abc <main+0x238>)
 800096c:	681a      	ldr	r2, [r3, #0]
 800096e:	4b53      	ldr	r3, [pc, #332]	@ (8000abc <main+0x238>)
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	429a      	cmp	r2, r3
 8000974:	d01a      	beq.n	80009ac <main+0x128>
			if (Elbow_Wrist.SetAngle > Elbow_Wrist.Angle) {
 8000976:	4b51      	ldr	r3, [pc, #324]	@ (8000abc <main+0x238>)
 8000978:	685a      	ldr	r2, [r3, #4]
 800097a:	4b50      	ldr	r3, [pc, #320]	@ (8000abc <main+0x238>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	429a      	cmp	r2, r3
 8000980:	dd05      	ble.n	800098e <main+0x10a>
				Elbow_Wrist.Angle += 1;
 8000982:	4b4e      	ldr	r3, [pc, #312]	@ (8000abc <main+0x238>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	3301      	adds	r3, #1
 8000988:	4a4c      	ldr	r2, [pc, #304]	@ (8000abc <main+0x238>)
 800098a:	6013      	str	r3, [r2, #0]
 800098c:	e004      	b.n	8000998 <main+0x114>
			} else {
				Elbow_Wrist.Angle -= 1;
 800098e:	4b4b      	ldr	r3, [pc, #300]	@ (8000abc <main+0x238>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	3b01      	subs	r3, #1
 8000994:	4a49      	ldr	r2, [pc, #292]	@ (8000abc <main+0x238>)
 8000996:	6013      	str	r3, [r2, #0]
			}
			SetServoAngle(&htim4, TIM_CHANNEL_2, Elbow_Wrist.Angle);
 8000998:	4b48      	ldr	r3, [pc, #288]	@ (8000abc <main+0x238>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	461a      	mov	r2, r3
 800099e:	2104      	movs	r1, #4
 80009a0:	4844      	ldr	r0, [pc, #272]	@ (8000ab4 <main+0x230>)
 80009a2:	f7ff fe93 	bl	80006cc <SetServoAngle>
			HAL_Delay(2);
 80009a6:	2002      	movs	r0, #2
 80009a8:	f000 fe88 	bl	80016bc <HAL_Delay>
		}

		if (Wrist_Ulna.Angle != Wrist_Ulna.SetAngle) {
 80009ac:	4b44      	ldr	r3, [pc, #272]	@ (8000ac0 <main+0x23c>)
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	4b43      	ldr	r3, [pc, #268]	@ (8000ac0 <main+0x23c>)
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d01a      	beq.n	80009ee <main+0x16a>
			if (Wrist_Ulna.SetAngle > Wrist_Ulna.Angle) {
 80009b8:	4b41      	ldr	r3, [pc, #260]	@ (8000ac0 <main+0x23c>)
 80009ba:	685a      	ldr	r2, [r3, #4]
 80009bc:	4b40      	ldr	r3, [pc, #256]	@ (8000ac0 <main+0x23c>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	dd05      	ble.n	80009d0 <main+0x14c>
				Wrist_Ulna.Angle += 1;
 80009c4:	4b3e      	ldr	r3, [pc, #248]	@ (8000ac0 <main+0x23c>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	3301      	adds	r3, #1
 80009ca:	4a3d      	ldr	r2, [pc, #244]	@ (8000ac0 <main+0x23c>)
 80009cc:	6013      	str	r3, [r2, #0]
 80009ce:	e004      	b.n	80009da <main+0x156>
			} else {
				Wrist_Ulna.Angle -= 1;
 80009d0:	4b3b      	ldr	r3, [pc, #236]	@ (8000ac0 <main+0x23c>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	3b01      	subs	r3, #1
 80009d6:	4a3a      	ldr	r2, [pc, #232]	@ (8000ac0 <main+0x23c>)
 80009d8:	6013      	str	r3, [r2, #0]
			}
			SetServoAngle(&htim4, TIM_CHANNEL_1, Wrist_Ulna.Angle);
 80009da:	4b39      	ldr	r3, [pc, #228]	@ (8000ac0 <main+0x23c>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	461a      	mov	r2, r3
 80009e0:	2100      	movs	r1, #0
 80009e2:	4834      	ldr	r0, [pc, #208]	@ (8000ab4 <main+0x230>)
 80009e4:	f7ff fe72 	bl	80006cc <SetServoAngle>
			HAL_Delay(2);
 80009e8:	2002      	movs	r0, #2
 80009ea:	f000 fe67 	bl	80016bc <HAL_Delay>
		}

		if (Ulna_Febur.Angle != Ulna_Febur.SetAngle) {
 80009ee:	4b35      	ldr	r3, [pc, #212]	@ (8000ac4 <main+0x240>)
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	4b34      	ldr	r3, [pc, #208]	@ (8000ac4 <main+0x240>)
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	429a      	cmp	r2, r3
 80009f8:	d01a      	beq.n	8000a30 <main+0x1ac>
			if (Ulna_Febur.SetAngle > Ulna_Febur.Angle) {
 80009fa:	4b32      	ldr	r3, [pc, #200]	@ (8000ac4 <main+0x240>)
 80009fc:	685a      	ldr	r2, [r3, #4]
 80009fe:	4b31      	ldr	r3, [pc, #196]	@ (8000ac4 <main+0x240>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	429a      	cmp	r2, r3
 8000a04:	dd05      	ble.n	8000a12 <main+0x18e>
				Ulna_Febur.Angle += 1;
 8000a06:	4b2f      	ldr	r3, [pc, #188]	@ (8000ac4 <main+0x240>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	4a2d      	ldr	r2, [pc, #180]	@ (8000ac4 <main+0x240>)
 8000a0e:	6013      	str	r3, [r2, #0]
 8000a10:	e004      	b.n	8000a1c <main+0x198>
			} else {
				Ulna_Febur.Angle -= 1;
 8000a12:	4b2c      	ldr	r3, [pc, #176]	@ (8000ac4 <main+0x240>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	3b01      	subs	r3, #1
 8000a18:	4a2a      	ldr	r2, [pc, #168]	@ (8000ac4 <main+0x240>)
 8000a1a:	6013      	str	r3, [r2, #0]
			}
			SetServoAngle(&htim3, TIM_CHANNEL_2, Ulna_Febur.Angle);
 8000a1c:	4b29      	ldr	r3, [pc, #164]	@ (8000ac4 <main+0x240>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	461a      	mov	r2, r3
 8000a22:	2104      	movs	r1, #4
 8000a24:	4828      	ldr	r0, [pc, #160]	@ (8000ac8 <main+0x244>)
 8000a26:	f7ff fe51 	bl	80006cc <SetServoAngle>
			HAL_Delay(2);
 8000a2a:	2002      	movs	r0, #2
 8000a2c:	f000 fe46 	bl	80016bc <HAL_Delay>
		}

		if (Febur_Gripper.Angle != Febur_Gripper.SetAngle) {
 8000a30:	4b26      	ldr	r3, [pc, #152]	@ (8000acc <main+0x248>)
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	4b25      	ldr	r3, [pc, #148]	@ (8000acc <main+0x248>)
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d01a      	beq.n	8000a72 <main+0x1ee>
			if (Febur_Gripper.SetAngle > Febur_Gripper.Angle) {
 8000a3c:	4b23      	ldr	r3, [pc, #140]	@ (8000acc <main+0x248>)
 8000a3e:	685a      	ldr	r2, [r3, #4]
 8000a40:	4b22      	ldr	r3, [pc, #136]	@ (8000acc <main+0x248>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	dd05      	ble.n	8000a54 <main+0x1d0>
				Febur_Gripper.Angle += 1;
 8000a48:	4b20      	ldr	r3, [pc, #128]	@ (8000acc <main+0x248>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	4a1f      	ldr	r2, [pc, #124]	@ (8000acc <main+0x248>)
 8000a50:	6013      	str	r3, [r2, #0]
 8000a52:	e004      	b.n	8000a5e <main+0x1da>
			} else {
				Febur_Gripper.Angle -= 1;
 8000a54:	4b1d      	ldr	r3, [pc, #116]	@ (8000acc <main+0x248>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	3b01      	subs	r3, #1
 8000a5a:	4a1c      	ldr	r2, [pc, #112]	@ (8000acc <main+0x248>)
 8000a5c:	6013      	str	r3, [r2, #0]
			}
			SetServoAngle(&htim3, TIM_CHANNEL_1, Febur_Gripper.Angle);
 8000a5e:	4b1b      	ldr	r3, [pc, #108]	@ (8000acc <main+0x248>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	461a      	mov	r2, r3
 8000a64:	2100      	movs	r1, #0
 8000a66:	4818      	ldr	r0, [pc, #96]	@ (8000ac8 <main+0x244>)
 8000a68:	f7ff fe30 	bl	80006cc <SetServoAngle>
			HAL_Delay(2);
 8000a6c:	2002      	movs	r0, #2
 8000a6e:	f000 fe25 	bl	80016bc <HAL_Delay>
		}

		if (Right_finger.Angle != Right_finger.SetAngle) {
 8000a72:	4b17      	ldr	r3, [pc, #92]	@ (8000ad0 <main+0x24c>)
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	4b16      	ldr	r3, [pc, #88]	@ (8000ad0 <main+0x24c>)
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	d039      	beq.n	8000af2 <main+0x26e>
			if (Right_finger.SetAngle > Right_finger.Angle) {
 8000a7e:	4b14      	ldr	r3, [pc, #80]	@ (8000ad0 <main+0x24c>)
 8000a80:	685a      	ldr	r2, [r3, #4]
 8000a82:	4b13      	ldr	r3, [pc, #76]	@ (8000ad0 <main+0x24c>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	429a      	cmp	r2, r3
 8000a88:	dd24      	ble.n	8000ad4 <main+0x250>
				Right_finger.Angle += 1;
 8000a8a:	4b11      	ldr	r3, [pc, #68]	@ (8000ad0 <main+0x24c>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	4a0f      	ldr	r2, [pc, #60]	@ (8000ad0 <main+0x24c>)
 8000a92:	6013      	str	r3, [r2, #0]
 8000a94:	e023      	b.n	8000ade <main+0x25a>
 8000a96:	bf00      	nop
 8000a98:	20000208 	.word	0x20000208
 8000a9c:	20000160 	.word	0x20000160
 8000aa0:	40020800 	.word	0x40020800
 8000aa4:	200002d0 	.word	0x200002d0
 8000aa8:	200002d4 	.word	0x200002d4
 8000aac:	200002d8 	.word	0x200002d8
 8000ab0:	200002dc 	.word	0x200002dc
 8000ab4:	20000118 	.word	0x20000118
 8000ab8:	200002ec 	.word	0x200002ec
 8000abc:	200002fc 	.word	0x200002fc
 8000ac0:	2000030c 	.word	0x2000030c
 8000ac4:	2000031c 	.word	0x2000031c
 8000ac8:	200000d0 	.word	0x200000d0
 8000acc:	2000032c 	.word	0x2000032c
 8000ad0:	2000033c 	.word	0x2000033c
			} else {
				Right_finger.Angle -= 1;
 8000ad4:	4b2b      	ldr	r3, [pc, #172]	@ (8000b84 <main+0x300>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	3b01      	subs	r3, #1
 8000ada:	4a2a      	ldr	r2, [pc, #168]	@ (8000b84 <main+0x300>)
 8000adc:	6013      	str	r3, [r2, #0]
			}
			SetServoAngle(&htim2, TIM_CHANNEL_2, Right_finger.Angle);
 8000ade:	4b29      	ldr	r3, [pc, #164]	@ (8000b84 <main+0x300>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	2104      	movs	r1, #4
 8000ae6:	4828      	ldr	r0, [pc, #160]	@ (8000b88 <main+0x304>)
 8000ae8:	f7ff fdf0 	bl	80006cc <SetServoAngle>
			HAL_Delay(2);
 8000aec:	2002      	movs	r0, #2
 8000aee:	f000 fde5 	bl	80016bc <HAL_Delay>
		}

		if ((CurrentMillis - PreviousMillis) >= 16 && ReadyToSend == 1) {
 8000af2:	4b26      	ldr	r3, [pc, #152]	@ (8000b8c <main+0x308>)
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	4b26      	ldr	r3, [pc, #152]	@ (8000b90 <main+0x30c>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	1ad3      	subs	r3, r2, r3
 8000afc:	2b0f      	cmp	r3, #15
 8000afe:	d92d      	bls.n	8000b5c <main+0x2d8>
 8000b00:	4b24      	ldr	r3, [pc, #144]	@ (8000b94 <main+0x310>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d129      	bne.n	8000b5c <main+0x2d8>

			sprintf(send, "B_S %d,S_E %d,E_W %d,W_U %d,U_F %d,F_G %d,R_f %d\n",
 8000b08:	4b23      	ldr	r3, [pc, #140]	@ (8000b98 <main+0x314>)
 8000b0a:	681d      	ldr	r5, [r3, #0]
 8000b0c:	4b23      	ldr	r3, [pc, #140]	@ (8000b9c <main+0x318>)
 8000b0e:	681e      	ldr	r6, [r3, #0]
 8000b10:	4b23      	ldr	r3, [pc, #140]	@ (8000ba0 <main+0x31c>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a23      	ldr	r2, [pc, #140]	@ (8000ba4 <main+0x320>)
 8000b16:	6812      	ldr	r2, [r2, #0]
 8000b18:	4923      	ldr	r1, [pc, #140]	@ (8000ba8 <main+0x324>)
 8000b1a:	6809      	ldr	r1, [r1, #0]
 8000b1c:	4823      	ldr	r0, [pc, #140]	@ (8000bac <main+0x328>)
 8000b1e:	6800      	ldr	r0, [r0, #0]
 8000b20:	4c18      	ldr	r4, [pc, #96]	@ (8000b84 <main+0x300>)
 8000b22:	6824      	ldr	r4, [r4, #0]
 8000b24:	9404      	str	r4, [sp, #16]
 8000b26:	9003      	str	r0, [sp, #12]
 8000b28:	9102      	str	r1, [sp, #8]
 8000b2a:	9201      	str	r2, [sp, #4]
 8000b2c:	9300      	str	r3, [sp, #0]
 8000b2e:	4633      	mov	r3, r6
 8000b30:	462a      	mov	r2, r5
 8000b32:	491f      	ldr	r1, [pc, #124]	@ (8000bb0 <main+0x32c>)
 8000b34:	481f      	ldr	r0, [pc, #124]	@ (8000bb4 <main+0x330>)
 8000b36:	f004 f80d 	bl	8004b54 <siprintf>
					Base_Shoulder.Angle, Shoulder_Elbow.Angle,
					Elbow_Wrist.Angle, Wrist_Ulna.Angle, Ulna_Febur.Angle, Febur_Gripper.Angle, Right_finger.Angle);
			HAL_UART_Transmit_IT(&huart1, (uint8_t*) send, strlen(send));
 8000b3a:	481e      	ldr	r0, [pc, #120]	@ (8000bb4 <main+0x330>)
 8000b3c:	f7ff fb50 	bl	80001e0 <strlen>
 8000b40:	4603      	mov	r3, r0
 8000b42:	b29b      	uxth	r3, r3
 8000b44:	461a      	mov	r2, r3
 8000b46:	491b      	ldr	r1, [pc, #108]	@ (8000bb4 <main+0x330>)
 8000b48:	481b      	ldr	r0, [pc, #108]	@ (8000bb8 <main+0x334>)
 8000b4a:	f002 fda3 	bl	8003694 <HAL_UART_Transmit_IT>
			ReadyToSend = 0;
 8000b4e:	4b11      	ldr	r3, [pc, #68]	@ (8000b94 <main+0x310>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
			PreviousMillis = CurrentMillis;
 8000b54:	4b0d      	ldr	r3, [pc, #52]	@ (8000b8c <main+0x308>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a0d      	ldr	r2, [pc, #52]	@ (8000b90 <main+0x30c>)
 8000b5a:	6013      	str	r3, [r2, #0]
		}

		if ((CurrentMillis - PreviousMillis_LED) >= 1000) {
 8000b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b8c <main+0x308>)
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	4b16      	ldr	r3, [pc, #88]	@ (8000bbc <main+0x338>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000b6a:	f4ff aeb7 	bcc.w	80008dc <main+0x58>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000b6e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b72:	4813      	ldr	r0, [pc, #76]	@ (8000bc0 <main+0x33c>)
 8000b74:	f001 fc5e 	bl	8002434 <HAL_GPIO_TogglePin>

			PreviousMillis_LED = CurrentMillis;
 8000b78:	4b04      	ldr	r3, [pc, #16]	@ (8000b8c <main+0x308>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a0f      	ldr	r2, [pc, #60]	@ (8000bbc <main+0x338>)
 8000b7e:	6013      	str	r3, [r2, #0]
		CurrentMillis = HAL_GetTick();
 8000b80:	e6ac      	b.n	80008dc <main+0x58>
 8000b82:	bf00      	nop
 8000b84:	2000033c 	.word	0x2000033c
 8000b88:	20000088 	.word	0x20000088
 8000b8c:	200002d0 	.word	0x200002d0
 8000b90:	200002d4 	.word	0x200002d4
 8000b94:	20000000 	.word	0x20000000
 8000b98:	200002dc 	.word	0x200002dc
 8000b9c:	200002ec 	.word	0x200002ec
 8000ba0:	200002fc 	.word	0x200002fc
 8000ba4:	2000030c 	.word	0x2000030c
 8000ba8:	2000031c 	.word	0x2000031c
 8000bac:	2000032c 	.word	0x2000032c
 8000bb0:	08005d90 	.word	0x08005d90
 8000bb4:	2000026c 	.word	0x2000026c
 8000bb8:	20000160 	.word	0x20000160
 8000bbc:	200002d8 	.word	0x200002d8
 8000bc0:	40020800 	.word	0x40020800

08000bc4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b094      	sub	sp, #80	@ 0x50
 8000bc8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000bca:	f107 0320 	add.w	r3, r7, #32
 8000bce:	2230      	movs	r2, #48	@ 0x30
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f004 f821 	bl	8004c1a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000bd8:	f107 030c 	add.w	r3, r7, #12
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000be8:	2300      	movs	r3, #0
 8000bea:	60bb      	str	r3, [r7, #8]
 8000bec:	4b23      	ldr	r3, [pc, #140]	@ (8000c7c <SystemClock_Config+0xb8>)
 8000bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf0:	4a22      	ldr	r2, [pc, #136]	@ (8000c7c <SystemClock_Config+0xb8>)
 8000bf2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bf6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bf8:	4b20      	ldr	r3, [pc, #128]	@ (8000c7c <SystemClock_Config+0xb8>)
 8000bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c00:	60bb      	str	r3, [r7, #8]
 8000c02:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c04:	2300      	movs	r3, #0
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	4b1d      	ldr	r3, [pc, #116]	@ (8000c80 <SystemClock_Config+0xbc>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c10:	4a1b      	ldr	r2, [pc, #108]	@ (8000c80 <SystemClock_Config+0xbc>)
 8000c12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c16:	6013      	str	r3, [r2, #0]
 8000c18:	4b19      	ldr	r3, [pc, #100]	@ (8000c80 <SystemClock_Config+0xbc>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c20:	607b      	str	r3, [r7, #4]
 8000c22:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c24:	2302      	movs	r3, #2
 8000c26:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c2c:	2310      	movs	r3, #16
 8000c2e:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c30:	2300      	movs	r3, #0
 8000c32:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000c34:	f107 0320 	add.w	r3, r7, #32
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f001 fc15 	bl	8002468 <HAL_RCC_OscConfig>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <SystemClock_Config+0x84>
		Error_Handler();
 8000c44:	f000 f9e0 	bl	8001008 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000c48:	230f      	movs	r3, #15
 8000c4a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000c5c:	f107 030c 	add.w	r3, r7, #12
 8000c60:	2100      	movs	r1, #0
 8000c62:	4618      	mov	r0, r3
 8000c64:	f001 fe78 	bl	8002958 <HAL_RCC_ClockConfig>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <SystemClock_Config+0xae>
		Error_Handler();
 8000c6e:	f000 f9cb 	bl	8001008 <Error_Handler>
	}
}
 8000c72:	bf00      	nop
 8000c74:	3750      	adds	r7, #80	@ 0x50
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40007000 	.word	0x40007000

08000c84 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08a      	sub	sp, #40	@ 0x28
 8000c88:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000c8a:	f107 0320 	add.w	r3, r7, #32
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]
 8000ca0:	611a      	str	r2, [r3, #16]
 8000ca2:	615a      	str	r2, [r3, #20]
 8000ca4:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000ca6:	4b28      	ldr	r3, [pc, #160]	@ (8000d48 <MX_TIM2_Init+0xc4>)
 8000ca8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cac:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 15;
 8000cae:	4b26      	ldr	r3, [pc, #152]	@ (8000d48 <MX_TIM2_Init+0xc4>)
 8000cb0:	220f      	movs	r2, #15
 8000cb2:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb4:	4b24      	ldr	r3, [pc, #144]	@ (8000d48 <MX_TIM2_Init+0xc4>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 19999;
 8000cba:	4b23      	ldr	r3, [pc, #140]	@ (8000d48 <MX_TIM2_Init+0xc4>)
 8000cbc:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000cc0:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cc2:	4b21      	ldr	r3, [pc, #132]	@ (8000d48 <MX_TIM2_Init+0xc4>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cc8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d48 <MX_TIM2_Init+0xc4>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8000cce:	481e      	ldr	r0, [pc, #120]	@ (8000d48 <MX_TIM2_Init+0xc4>)
 8000cd0:	f002 f822 	bl	8002d18 <HAL_TIM_PWM_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_TIM2_Init+0x5a>
		Error_Handler();
 8000cda:	f000 f995 	bl	8001008 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000ce6:	f107 0320 	add.w	r3, r7, #32
 8000cea:	4619      	mov	r1, r3
 8000cec:	4816      	ldr	r0, [pc, #88]	@ (8000d48 <MX_TIM2_Init+0xc4>)
 8000cee:	f002 fc13 	bl	8003518 <HAL_TIMEx_MasterConfigSynchronization>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_TIM2_Init+0x78>
			!= HAL_OK) {
		Error_Handler();
 8000cf8:	f000 f986 	bl	8001008 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cfc:	2360      	movs	r3, #96	@ 0x60
 8000cfe:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000d00:	2300      	movs	r3, #0
 8000d02:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d04:	2300      	movs	r3, #0
 8000d06:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8000d0c:	1d3b      	adds	r3, r7, #4
 8000d0e:	2200      	movs	r2, #0
 8000d10:	4619      	mov	r1, r3
 8000d12:	480d      	ldr	r0, [pc, #52]	@ (8000d48 <MX_TIM2_Init+0xc4>)
 8000d14:	f002 f900 	bl	8002f18 <HAL_TIM_PWM_ConfigChannel>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_TIM2_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 8000d1e:	f000 f973 	bl	8001008 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 8000d22:	1d3b      	adds	r3, r7, #4
 8000d24:	2204      	movs	r2, #4
 8000d26:	4619      	mov	r1, r3
 8000d28:	4807      	ldr	r0, [pc, #28]	@ (8000d48 <MX_TIM2_Init+0xc4>)
 8000d2a:	f002 f8f5 	bl	8002f18 <HAL_TIM_PWM_ConfigChannel>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_TIM2_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 8000d34:	f000 f968 	bl	8001008 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8000d38:	4803      	ldr	r0, [pc, #12]	@ (8000d48 <MX_TIM2_Init+0xc4>)
 8000d3a:	f000 f9df 	bl	80010fc <HAL_TIM_MspPostInit>

}
 8000d3e:	bf00      	nop
 8000d40:	3728      	adds	r7, #40	@ 0x28
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000088 	.word	0x20000088

08000d4c <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08a      	sub	sp, #40	@ 0x28
 8000d50:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000d52:	f107 0320 	add.w	r3, r7, #32
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]
 8000d66:	60da      	str	r2, [r3, #12]
 8000d68:	611a      	str	r2, [r3, #16]
 8000d6a:	615a      	str	r2, [r3, #20]
 8000d6c:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000d6e:	4b27      	ldr	r3, [pc, #156]	@ (8000e0c <MX_TIM3_Init+0xc0>)
 8000d70:	4a27      	ldr	r2, [pc, #156]	@ (8000e10 <MX_TIM3_Init+0xc4>)
 8000d72:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 15;
 8000d74:	4b25      	ldr	r3, [pc, #148]	@ (8000e0c <MX_TIM3_Init+0xc0>)
 8000d76:	220f      	movs	r2, #15
 8000d78:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d7a:	4b24      	ldr	r3, [pc, #144]	@ (8000e0c <MX_TIM3_Init+0xc0>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 19999;
 8000d80:	4b22      	ldr	r3, [pc, #136]	@ (8000e0c <MX_TIM3_Init+0xc0>)
 8000d82:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000d86:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d88:	4b20      	ldr	r3, [pc, #128]	@ (8000e0c <MX_TIM3_Init+0xc0>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d8e:	4b1f      	ldr	r3, [pc, #124]	@ (8000e0c <MX_TIM3_Init+0xc0>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8000d94:	481d      	ldr	r0, [pc, #116]	@ (8000e0c <MX_TIM3_Init+0xc0>)
 8000d96:	f001 ffbf 	bl	8002d18 <HAL_TIM_PWM_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM3_Init+0x58>
		Error_Handler();
 8000da0:	f000 f932 	bl	8001008 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000da4:	2300      	movs	r3, #0
 8000da6:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da8:	2300      	movs	r3, #0
 8000daa:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000dac:	f107 0320 	add.w	r3, r7, #32
 8000db0:	4619      	mov	r1, r3
 8000db2:	4816      	ldr	r0, [pc, #88]	@ (8000e0c <MX_TIM3_Init+0xc0>)
 8000db4:	f002 fbb0 	bl	8003518 <HAL_TIMEx_MasterConfigSynchronization>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_TIM3_Init+0x76>
			!= HAL_OK) {
		Error_Handler();
 8000dbe:	f000 f923 	bl	8001008 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dc2:	2360      	movs	r3, #96	@ 0x60
 8000dc4:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	480c      	ldr	r0, [pc, #48]	@ (8000e0c <MX_TIM3_Init+0xc0>)
 8000dda:	f002 f89d 	bl	8002f18 <HAL_TIM_PWM_ConfigChannel>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_TIM3_Init+0x9c>
			!= HAL_OK) {
		Error_Handler();
 8000de4:	f000 f910 	bl	8001008 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 8000de8:	1d3b      	adds	r3, r7, #4
 8000dea:	2204      	movs	r2, #4
 8000dec:	4619      	mov	r1, r3
 8000dee:	4807      	ldr	r0, [pc, #28]	@ (8000e0c <MX_TIM3_Init+0xc0>)
 8000df0:	f002 f892 	bl	8002f18 <HAL_TIM_PWM_ConfigChannel>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_TIM3_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 8000dfa:	f000 f905 	bl	8001008 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8000dfe:	4803      	ldr	r0, [pc, #12]	@ (8000e0c <MX_TIM3_Init+0xc0>)
 8000e00:	f000 f97c 	bl	80010fc <HAL_TIM_MspPostInit>

}
 8000e04:	bf00      	nop
 8000e06:	3728      	adds	r7, #40	@ 0x28
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	200000d0 	.word	0x200000d0
 8000e10:	40000400 	.word	0x40000400

08000e14 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08a      	sub	sp, #40	@ 0x28
 8000e18:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000e1a:	f107 0320 	add.w	r3, r7, #32
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]
 8000e30:	611a      	str	r2, [r3, #16]
 8000e32:	615a      	str	r2, [r3, #20]
 8000e34:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8000e36:	4b32      	ldr	r3, [pc, #200]	@ (8000f00 <MX_TIM4_Init+0xec>)
 8000e38:	4a32      	ldr	r2, [pc, #200]	@ (8000f04 <MX_TIM4_Init+0xf0>)
 8000e3a:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 15;
 8000e3c:	4b30      	ldr	r3, [pc, #192]	@ (8000f00 <MX_TIM4_Init+0xec>)
 8000e3e:	220f      	movs	r2, #15
 8000e40:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e42:	4b2f      	ldr	r3, [pc, #188]	@ (8000f00 <MX_TIM4_Init+0xec>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 19999;
 8000e48:	4b2d      	ldr	r3, [pc, #180]	@ (8000f00 <MX_TIM4_Init+0xec>)
 8000e4a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000e4e:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e50:	4b2b      	ldr	r3, [pc, #172]	@ (8000f00 <MX_TIM4_Init+0xec>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e56:	4b2a      	ldr	r3, [pc, #168]	@ (8000f00 <MX_TIM4_Init+0xec>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 8000e5c:	4828      	ldr	r0, [pc, #160]	@ (8000f00 <MX_TIM4_Init+0xec>)
 8000e5e:	f001 ff5b 	bl	8002d18 <HAL_TIM_PWM_Init>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_TIM4_Init+0x58>
		Error_Handler();
 8000e68:	f000 f8ce 	bl	8001008 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e70:	2300      	movs	r3, #0
 8000e72:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8000e74:	f107 0320 	add.w	r3, r7, #32
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4821      	ldr	r0, [pc, #132]	@ (8000f00 <MX_TIM4_Init+0xec>)
 8000e7c:	f002 fb4c 	bl	8003518 <HAL_TIMEx_MasterConfigSynchronization>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_TIM4_Init+0x76>
			!= HAL_OK) {
		Error_Handler();
 8000e86:	f000 f8bf 	bl	8001008 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e8a:	2360      	movs	r3, #96	@ 0x60
 8000e8c:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e92:	2300      	movs	r3, #0
 8000e94:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e96:	2300      	movs	r3, #0
 8000e98:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1)
 8000e9a:	1d3b      	adds	r3, r7, #4
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4817      	ldr	r0, [pc, #92]	@ (8000f00 <MX_TIM4_Init+0xec>)
 8000ea2:	f002 f839 	bl	8002f18 <HAL_TIM_PWM_ConfigChannel>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_TIM4_Init+0x9c>
			!= HAL_OK) {
		Error_Handler();
 8000eac:	f000 f8ac 	bl	8001008 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2)
 8000eb0:	1d3b      	adds	r3, r7, #4
 8000eb2:	2204      	movs	r2, #4
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4812      	ldr	r0, [pc, #72]	@ (8000f00 <MX_TIM4_Init+0xec>)
 8000eb8:	f002 f82e 	bl	8002f18 <HAL_TIM_PWM_ConfigChannel>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_TIM4_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 8000ec2:	f000 f8a1 	bl	8001008 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3)
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	2208      	movs	r2, #8
 8000eca:	4619      	mov	r1, r3
 8000ecc:	480c      	ldr	r0, [pc, #48]	@ (8000f00 <MX_TIM4_Init+0xec>)
 8000ece:	f002 f823 	bl	8002f18 <HAL_TIM_PWM_ConfigChannel>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_TIM4_Init+0xc8>
			!= HAL_OK) {
		Error_Handler();
 8000ed8:	f000 f896 	bl	8001008 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4)
 8000edc:	1d3b      	adds	r3, r7, #4
 8000ede:	220c      	movs	r2, #12
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4807      	ldr	r0, [pc, #28]	@ (8000f00 <MX_TIM4_Init+0xec>)
 8000ee4:	f002 f818 	bl	8002f18 <HAL_TIM_PWM_ConfigChannel>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_TIM4_Init+0xde>
			!= HAL_OK) {
		Error_Handler();
 8000eee:	f000 f88b 	bl	8001008 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 8000ef2:	4803      	ldr	r0, [pc, #12]	@ (8000f00 <MX_TIM4_Init+0xec>)
 8000ef4:	f000 f902 	bl	80010fc <HAL_TIM_MspPostInit>

}
 8000ef8:	bf00      	nop
 8000efa:	3728      	adds	r7, #40	@ 0x28
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000118 	.word	0x20000118
 8000f04:	40000800 	.word	0x40000800

08000f08 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000f0c:	4b11      	ldr	r3, [pc, #68]	@ (8000f54 <MX_USART1_UART_Init+0x4c>)
 8000f0e:	4a12      	ldr	r2, [pc, #72]	@ (8000f58 <MX_USART1_UART_Init+0x50>)
 8000f10:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000f12:	4b10      	ldr	r3, [pc, #64]	@ (8000f54 <MX_USART1_UART_Init+0x4c>)
 8000f14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f18:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f54 <MX_USART1_UART_Init+0x4c>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000f20:	4b0c      	ldr	r3, [pc, #48]	@ (8000f54 <MX_USART1_UART_Init+0x4c>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000f26:	4b0b      	ldr	r3, [pc, #44]	@ (8000f54 <MX_USART1_UART_Init+0x4c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000f2c:	4b09      	ldr	r3, [pc, #36]	@ (8000f54 <MX_USART1_UART_Init+0x4c>)
 8000f2e:	220c      	movs	r2, #12
 8000f30:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f32:	4b08      	ldr	r3, [pc, #32]	@ (8000f54 <MX_USART1_UART_Init+0x4c>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f38:	4b06      	ldr	r3, [pc, #24]	@ (8000f54 <MX_USART1_UART_Init+0x4c>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000f3e:	4805      	ldr	r0, [pc, #20]	@ (8000f54 <MX_USART1_UART_Init+0x4c>)
 8000f40:	f002 fb58 	bl	80035f4 <HAL_UART_Init>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000f4a:	f000 f85d 	bl	8001008 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20000160 	.word	0x20000160
 8000f58:	40011000 	.word	0x40011000

08000f5c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	607b      	str	r3, [r7, #4]
 8000f66:	4b0c      	ldr	r3, [pc, #48]	@ (8000f98 <MX_DMA_Init+0x3c>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6a:	4a0b      	ldr	r2, [pc, #44]	@ (8000f98 <MX_DMA_Init+0x3c>)
 8000f6c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f72:	4b09      	ldr	r3, [pc, #36]	@ (8000f98 <MX_DMA_Init+0x3c>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f7a:	607b      	str	r3, [r7, #4]
 8000f7c:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2100      	movs	r1, #0
 8000f82:	2044      	movs	r0, #68	@ 0x44
 8000f84:	f000 fc99 	bl	80018ba <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000f88:	2044      	movs	r0, #68	@ 0x44
 8000f8a:	f000 fcb2 	bl	80018f2 <HAL_NVIC_EnableIRQ>

}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40023800 	.word	0x40023800

08000f9c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	4b17      	ldr	r3, [pc, #92]	@ (8001004 <MX_GPIO_Init+0x68>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000faa:	4a16      	ldr	r2, [pc, #88]	@ (8001004 <MX_GPIO_Init+0x68>)
 8000fac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb2:	4b14      	ldr	r3, [pc, #80]	@ (8001004 <MX_GPIO_Init+0x68>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60bb      	str	r3, [r7, #8]
 8000fc2:	4b10      	ldr	r3, [pc, #64]	@ (8001004 <MX_GPIO_Init+0x68>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc6:	4a0f      	ldr	r2, [pc, #60]	@ (8001004 <MX_GPIO_Init+0x68>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fce:	4b0d      	ldr	r3, [pc, #52]	@ (8001004 <MX_GPIO_Init+0x68>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	607b      	str	r3, [r7, #4]
 8000fde:	4b09      	ldr	r3, [pc, #36]	@ (8001004 <MX_GPIO_Init+0x68>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe2:	4a08      	ldr	r2, [pc, #32]	@ (8001004 <MX_GPIO_Init+0x68>)
 8000fe4:	f043 0302 	orr.w	r3, r3, #2
 8000fe8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fea:	4b06      	ldr	r3, [pc, #24]	@ (8001004 <MX_GPIO_Init+0x68>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000ff6:	bf00      	nop
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	40023800 	.word	0x40023800

08001008 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800100c:	b672      	cpsid	i
}
 800100e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001010:	bf00      	nop
 8001012:	e7fd      	b.n	8001010 <Error_Handler+0x8>

08001014 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	607b      	str	r3, [r7, #4]
 800101e:	4b10      	ldr	r3, [pc, #64]	@ (8001060 <HAL_MspInit+0x4c>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001022:	4a0f      	ldr	r2, [pc, #60]	@ (8001060 <HAL_MspInit+0x4c>)
 8001024:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001028:	6453      	str	r3, [r2, #68]	@ 0x44
 800102a:	4b0d      	ldr	r3, [pc, #52]	@ (8001060 <HAL_MspInit+0x4c>)
 800102c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800102e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	603b      	str	r3, [r7, #0]
 800103a:	4b09      	ldr	r3, [pc, #36]	@ (8001060 <HAL_MspInit+0x4c>)
 800103c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103e:	4a08      	ldr	r2, [pc, #32]	@ (8001060 <HAL_MspInit+0x4c>)
 8001040:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001044:	6413      	str	r3, [r2, #64]	@ 0x40
 8001046:	4b06      	ldr	r3, [pc, #24]	@ (8001060 <HAL_MspInit+0x4c>)
 8001048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800104e:	603b      	str	r3, [r7, #0]
 8001050:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	40023800 	.word	0x40023800

08001064 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001064:	b480      	push	{r7}
 8001066:	b087      	sub	sp, #28
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001074:	d10e      	bne.n	8001094 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	617b      	str	r3, [r7, #20]
 800107a:	4b1d      	ldr	r3, [pc, #116]	@ (80010f0 <HAL_TIM_PWM_MspInit+0x8c>)
 800107c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107e:	4a1c      	ldr	r2, [pc, #112]	@ (80010f0 <HAL_TIM_PWM_MspInit+0x8c>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	6413      	str	r3, [r2, #64]	@ 0x40
 8001086:	4b1a      	ldr	r3, [pc, #104]	@ (80010f0 <HAL_TIM_PWM_MspInit+0x8c>)
 8001088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	617b      	str	r3, [r7, #20]
 8001090:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001092:	e026      	b.n	80010e2 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a16      	ldr	r2, [pc, #88]	@ (80010f4 <HAL_TIM_PWM_MspInit+0x90>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d10e      	bne.n	80010bc <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	613b      	str	r3, [r7, #16]
 80010a2:	4b13      	ldr	r3, [pc, #76]	@ (80010f0 <HAL_TIM_PWM_MspInit+0x8c>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a6:	4a12      	ldr	r2, [pc, #72]	@ (80010f0 <HAL_TIM_PWM_MspInit+0x8c>)
 80010a8:	f043 0302 	orr.w	r3, r3, #2
 80010ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80010ae:	4b10      	ldr	r3, [pc, #64]	@ (80010f0 <HAL_TIM_PWM_MspInit+0x8c>)
 80010b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	693b      	ldr	r3, [r7, #16]
}
 80010ba:	e012      	b.n	80010e2 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM4)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a0d      	ldr	r2, [pc, #52]	@ (80010f8 <HAL_TIM_PWM_MspInit+0x94>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d10d      	bne.n	80010e2 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	4b09      	ldr	r3, [pc, #36]	@ (80010f0 <HAL_TIM_PWM_MspInit+0x8c>)
 80010cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ce:	4a08      	ldr	r2, [pc, #32]	@ (80010f0 <HAL_TIM_PWM_MspInit+0x8c>)
 80010d0:	f043 0304 	orr.w	r3, r3, #4
 80010d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80010d6:	4b06      	ldr	r3, [pc, #24]	@ (80010f0 <HAL_TIM_PWM_MspInit+0x8c>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010da:	f003 0304 	and.w	r3, r3, #4
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
}
 80010e2:	bf00      	nop
 80010e4:	371c      	adds	r7, #28
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40000400 	.word	0x40000400
 80010f8:	40000800 	.word	0x40000800

080010fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08c      	sub	sp, #48	@ 0x30
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	f107 031c 	add.w	r3, r7, #28
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800111c:	d13d      	bne.n	800119a <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	61bb      	str	r3, [r7, #24]
 8001122:	4b44      	ldr	r3, [pc, #272]	@ (8001234 <HAL_TIM_MspPostInit+0x138>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001126:	4a43      	ldr	r2, [pc, #268]	@ (8001234 <HAL_TIM_MspPostInit+0x138>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	6313      	str	r3, [r2, #48]	@ 0x30
 800112e:	4b41      	ldr	r3, [pc, #260]	@ (8001234 <HAL_TIM_MspPostInit+0x138>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	61bb      	str	r3, [r7, #24]
 8001138:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	617b      	str	r3, [r7, #20]
 800113e:	4b3d      	ldr	r3, [pc, #244]	@ (8001234 <HAL_TIM_MspPostInit+0x138>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	4a3c      	ldr	r2, [pc, #240]	@ (8001234 <HAL_TIM_MspPostInit+0x138>)
 8001144:	f043 0302 	orr.w	r3, r3, #2
 8001148:	6313      	str	r3, [r2, #48]	@ 0x30
 800114a:	4b3a      	ldr	r3, [pc, #232]	@ (8001234 <HAL_TIM_MspPostInit+0x138>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114e:	f003 0302 	and.w	r3, r3, #2
 8001152:	617b      	str	r3, [r7, #20]
 8001154:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001156:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800115a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115c:	2302      	movs	r3, #2
 800115e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001164:	2300      	movs	r3, #0
 8001166:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001168:	2301      	movs	r3, #1
 800116a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116c:	f107 031c 	add.w	r3, r7, #28
 8001170:	4619      	mov	r1, r3
 8001172:	4831      	ldr	r0, [pc, #196]	@ (8001238 <HAL_TIM_MspPostInit+0x13c>)
 8001174:	f000 ffda 	bl	800212c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = right_finger_Pin;
 8001178:	2308      	movs	r3, #8
 800117a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117c:	2302      	movs	r3, #2
 800117e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001184:	2300      	movs	r3, #0
 8001186:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001188:	2301      	movs	r3, #1
 800118a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(right_finger_GPIO_Port, &GPIO_InitStruct);
 800118c:	f107 031c 	add.w	r3, r7, #28
 8001190:	4619      	mov	r1, r3
 8001192:	482a      	ldr	r0, [pc, #168]	@ (800123c <HAL_TIM_MspPostInit+0x140>)
 8001194:	f000 ffca 	bl	800212c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001198:	e047      	b.n	800122a <HAL_TIM_MspPostInit+0x12e>
  else if(htim->Instance==TIM3)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a28      	ldr	r2, [pc, #160]	@ (8001240 <HAL_TIM_MspPostInit+0x144>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d11e      	bne.n	80011e2 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a4:	2300      	movs	r3, #0
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	4b22      	ldr	r3, [pc, #136]	@ (8001234 <HAL_TIM_MspPostInit+0x138>)
 80011aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ac:	4a21      	ldr	r2, [pc, #132]	@ (8001234 <HAL_TIM_MspPostInit+0x138>)
 80011ae:	f043 0302 	orr.w	r3, r3, #2
 80011b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80011b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001234 <HAL_TIM_MspPostInit+0x138>)
 80011b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b8:	f003 0302 	and.w	r3, r3, #2
 80011bc:	613b      	str	r3, [r7, #16]
 80011be:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = febur_gripper_Pin|ulna_febur_Pin;
 80011c0:	2330      	movs	r3, #48	@ 0x30
 80011c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c4:	2302      	movs	r3, #2
 80011c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011cc:	2300      	movs	r3, #0
 80011ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80011d0:	2302      	movs	r3, #2
 80011d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d4:	f107 031c 	add.w	r3, r7, #28
 80011d8:	4619      	mov	r1, r3
 80011da:	4818      	ldr	r0, [pc, #96]	@ (800123c <HAL_TIM_MspPostInit+0x140>)
 80011dc:	f000 ffa6 	bl	800212c <HAL_GPIO_Init>
}
 80011e0:	e023      	b.n	800122a <HAL_TIM_MspPostInit+0x12e>
  else if(htim->Instance==TIM4)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a17      	ldr	r2, [pc, #92]	@ (8001244 <HAL_TIM_MspPostInit+0x148>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d11e      	bne.n	800122a <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ec:	2300      	movs	r3, #0
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	4b10      	ldr	r3, [pc, #64]	@ (8001234 <HAL_TIM_MspPostInit+0x138>)
 80011f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f4:	4a0f      	ldr	r2, [pc, #60]	@ (8001234 <HAL_TIM_MspPostInit+0x138>)
 80011f6:	f043 0302 	orr.w	r3, r3, #2
 80011fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001234 <HAL_TIM_MspPostInit+0x138>)
 80011fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001200:	f003 0302 	and.w	r3, r3, #2
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = wrist_ulna_Pin|shoulder_wrist_Pin|Shoulder_elbow_Pin|Base_shoulder_Pin;
 8001208:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800120c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120e:	2302      	movs	r3, #2
 8001210:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001216:	2300      	movs	r3, #0
 8001218:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800121a:	2302      	movs	r3, #2
 800121c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121e:	f107 031c 	add.w	r3, r7, #28
 8001222:	4619      	mov	r1, r3
 8001224:	4805      	ldr	r0, [pc, #20]	@ (800123c <HAL_TIM_MspPostInit+0x140>)
 8001226:	f000 ff81 	bl	800212c <HAL_GPIO_Init>
}
 800122a:	bf00      	nop
 800122c:	3730      	adds	r7, #48	@ 0x30
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40023800 	.word	0x40023800
 8001238:	40020000 	.word	0x40020000
 800123c:	40020400 	.word	0x40020400
 8001240:	40000400 	.word	0x40000400
 8001244:	40000800 	.word	0x40000800

08001248 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08a      	sub	sp, #40	@ 0x28
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a34      	ldr	r2, [pc, #208]	@ (8001338 <HAL_UART_MspInit+0xf0>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d162      	bne.n	8001330 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	613b      	str	r3, [r7, #16]
 800126e:	4b33      	ldr	r3, [pc, #204]	@ (800133c <HAL_UART_MspInit+0xf4>)
 8001270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001272:	4a32      	ldr	r2, [pc, #200]	@ (800133c <HAL_UART_MspInit+0xf4>)
 8001274:	f043 0310 	orr.w	r3, r3, #16
 8001278:	6453      	str	r3, [r2, #68]	@ 0x44
 800127a:	4b30      	ldr	r3, [pc, #192]	@ (800133c <HAL_UART_MspInit+0xf4>)
 800127c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800127e:	f003 0310 	and.w	r3, r3, #16
 8001282:	613b      	str	r3, [r7, #16]
 8001284:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	4b2c      	ldr	r3, [pc, #176]	@ (800133c <HAL_UART_MspInit+0xf4>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128e:	4a2b      	ldr	r2, [pc, #172]	@ (800133c <HAL_UART_MspInit+0xf4>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	6313      	str	r3, [r2, #48]	@ 0x30
 8001296:	4b29      	ldr	r3, [pc, #164]	@ (800133c <HAL_UART_MspInit+0xf4>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80012a2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80012a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a8:	2302      	movs	r3, #2
 80012aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b0:	2303      	movs	r3, #3
 80012b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012b4:	2307      	movs	r3, #7
 80012b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	4619      	mov	r1, r3
 80012be:	4820      	ldr	r0, [pc, #128]	@ (8001340 <HAL_UART_MspInit+0xf8>)
 80012c0:	f000 ff34 	bl	800212c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 80012c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001344 <HAL_UART_MspInit+0xfc>)
 80012c6:	4a20      	ldr	r2, [pc, #128]	@ (8001348 <HAL_UART_MspInit+0x100>)
 80012c8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80012ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001344 <HAL_UART_MspInit+0xfc>)
 80012cc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80012d0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001344 <HAL_UART_MspInit+0xfc>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001344 <HAL_UART_MspInit+0xfc>)
 80012da:	2200      	movs	r2, #0
 80012dc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012de:	4b19      	ldr	r3, [pc, #100]	@ (8001344 <HAL_UART_MspInit+0xfc>)
 80012e0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012e4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012e6:	4b17      	ldr	r3, [pc, #92]	@ (8001344 <HAL_UART_MspInit+0xfc>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012ec:	4b15      	ldr	r3, [pc, #84]	@ (8001344 <HAL_UART_MspInit+0xfc>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80012f2:	4b14      	ldr	r3, [pc, #80]	@ (8001344 <HAL_UART_MspInit+0xfc>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80012f8:	4b12      	ldr	r3, [pc, #72]	@ (8001344 <HAL_UART_MspInit+0xfc>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012fe:	4b11      	ldr	r3, [pc, #68]	@ (8001344 <HAL_UART_MspInit+0xfc>)
 8001300:	2200      	movs	r2, #0
 8001302:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001304:	480f      	ldr	r0, [pc, #60]	@ (8001344 <HAL_UART_MspInit+0xfc>)
 8001306:	f000 fb0f 	bl	8001928 <HAL_DMA_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001310:	f7ff fe7a 	bl	8001008 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4a0b      	ldr	r2, [pc, #44]	@ (8001344 <HAL_UART_MspInit+0xfc>)
 8001318:	63da      	str	r2, [r3, #60]	@ 0x3c
 800131a:	4a0a      	ldr	r2, [pc, #40]	@ (8001344 <HAL_UART_MspInit+0xfc>)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001320:	2200      	movs	r2, #0
 8001322:	2100      	movs	r1, #0
 8001324:	2025      	movs	r0, #37	@ 0x25
 8001326:	f000 fac8 	bl	80018ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800132a:	2025      	movs	r0, #37	@ 0x25
 800132c:	f000 fae1 	bl	80018f2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001330:	bf00      	nop
 8001332:	3728      	adds	r7, #40	@ 0x28
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40011000 	.word	0x40011000
 800133c:	40023800 	.word	0x40023800
 8001340:	40020000 	.word	0x40020000
 8001344:	200001a8 	.word	0x200001a8
 8001348:	40026488 	.word	0x40026488

0800134c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001350:	bf00      	nop
 8001352:	e7fd      	b.n	8001350 <NMI_Handler+0x4>

08001354 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001358:	bf00      	nop
 800135a:	e7fd      	b.n	8001358 <HardFault_Handler+0x4>

0800135c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001360:	bf00      	nop
 8001362:	e7fd      	b.n	8001360 <MemManage_Handler+0x4>

08001364 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001368:	bf00      	nop
 800136a:	e7fd      	b.n	8001368 <BusFault_Handler+0x4>

0800136c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001370:	bf00      	nop
 8001372:	e7fd      	b.n	8001370 <UsageFault_Handler+0x4>

08001374 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr

08001382 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001382:	b480      	push	{r7}
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr

0800139e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013a2:	f000 f96b 	bl	800167c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80013b0:	4802      	ldr	r0, [pc, #8]	@ (80013bc <USART1_IRQHandler+0x10>)
 80013b2:	f002 fa03 	bl	80037bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000160 	.word	0x20000160

080013c0 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80013c4:	4802      	ldr	r0, [pc, #8]	@ (80013d0 <DMA2_Stream5_IRQHandler+0x10>)
 80013c6:	f000 fc47 	bl	8001c58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	200001a8 	.word	0x200001a8

080013d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  return 1;
 80013d8:	2301      	movs	r3, #1
}
 80013da:	4618      	mov	r0, r3
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <_kill>:

int _kill(int pid, int sig)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013ee:	f003 fcbf 	bl	8004d70 <__errno>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2216      	movs	r2, #22
 80013f6:	601a      	str	r2, [r3, #0]
  return -1;
 80013f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <_exit>:

void _exit (int status)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800140c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f7ff ffe7 	bl	80013e4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001416:	bf00      	nop
 8001418:	e7fd      	b.n	8001416 <_exit+0x12>

0800141a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b086      	sub	sp, #24
 800141e:	af00      	add	r7, sp, #0
 8001420:	60f8      	str	r0, [r7, #12]
 8001422:	60b9      	str	r1, [r7, #8]
 8001424:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001426:	2300      	movs	r3, #0
 8001428:	617b      	str	r3, [r7, #20]
 800142a:	e00a      	b.n	8001442 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800142c:	f3af 8000 	nop.w
 8001430:	4601      	mov	r1, r0
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	1c5a      	adds	r2, r3, #1
 8001436:	60ba      	str	r2, [r7, #8]
 8001438:	b2ca      	uxtb	r2, r1
 800143a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	3301      	adds	r3, #1
 8001440:	617b      	str	r3, [r7, #20]
 8001442:	697a      	ldr	r2, [r7, #20]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	429a      	cmp	r2, r3
 8001448:	dbf0      	blt.n	800142c <_read+0x12>
  }

  return len;
 800144a:	687b      	ldr	r3, [r7, #4]
}
 800144c:	4618      	mov	r0, r3
 800144e:	3718      	adds	r7, #24
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]
 8001464:	e009      	b.n	800147a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	1c5a      	adds	r2, r3, #1
 800146a:	60ba      	str	r2, [r7, #8]
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	4618      	mov	r0, r3
 8001470:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	3301      	adds	r3, #1
 8001478:	617b      	str	r3, [r7, #20]
 800147a:	697a      	ldr	r2, [r7, #20]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	429a      	cmp	r2, r3
 8001480:	dbf1      	blt.n	8001466 <_write+0x12>
  }
  return len;
 8001482:	687b      	ldr	r3, [r7, #4]
}
 8001484:	4618      	mov	r0, r3
 8001486:	3718      	adds	r7, #24
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <_close>:

int _close(int file)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001494:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001498:	4618      	mov	r0, r3
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014b4:	605a      	str	r2, [r3, #4]
  return 0;
 80014b6:	2300      	movs	r3, #0
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <_isatty>:

int _isatty(int file)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014cc:	2301      	movs	r3, #1
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014da:	b480      	push	{r7}
 80014dc:	b085      	sub	sp, #20
 80014de:	af00      	add	r7, sp, #0
 80014e0:	60f8      	str	r0, [r7, #12]
 80014e2:	60b9      	str	r1, [r7, #8]
 80014e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014e6:	2300      	movs	r3, #0
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3714      	adds	r7, #20
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014fc:	4a14      	ldr	r2, [pc, #80]	@ (8001550 <_sbrk+0x5c>)
 80014fe:	4b15      	ldr	r3, [pc, #84]	@ (8001554 <_sbrk+0x60>)
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001508:	4b13      	ldr	r3, [pc, #76]	@ (8001558 <_sbrk+0x64>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d102      	bne.n	8001516 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001510:	4b11      	ldr	r3, [pc, #68]	@ (8001558 <_sbrk+0x64>)
 8001512:	4a12      	ldr	r2, [pc, #72]	@ (800155c <_sbrk+0x68>)
 8001514:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001516:	4b10      	ldr	r3, [pc, #64]	@ (8001558 <_sbrk+0x64>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4413      	add	r3, r2
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	429a      	cmp	r2, r3
 8001522:	d207      	bcs.n	8001534 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001524:	f003 fc24 	bl	8004d70 <__errno>
 8001528:	4603      	mov	r3, r0
 800152a:	220c      	movs	r2, #12
 800152c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800152e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001532:	e009      	b.n	8001548 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001534:	4b08      	ldr	r3, [pc, #32]	@ (8001558 <_sbrk+0x64>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800153a:	4b07      	ldr	r3, [pc, #28]	@ (8001558 <_sbrk+0x64>)
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4413      	add	r3, r2
 8001542:	4a05      	ldr	r2, [pc, #20]	@ (8001558 <_sbrk+0x64>)
 8001544:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001546:	68fb      	ldr	r3, [r7, #12]
}
 8001548:	4618      	mov	r0, r3
 800154a:	3718      	adds	r7, #24
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20010000 	.word	0x20010000
 8001554:	00000400 	.word	0x00000400
 8001558:	2000034c 	.word	0x2000034c
 800155c:	200004a0 	.word	0x200004a0

08001560 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001564:	4b06      	ldr	r3, [pc, #24]	@ (8001580 <SystemInit+0x20>)
 8001566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800156a:	4a05      	ldr	r2, [pc, #20]	@ (8001580 <SystemInit+0x20>)
 800156c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001570:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001584:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015bc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001588:	f7ff ffea 	bl	8001560 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800158c:	480c      	ldr	r0, [pc, #48]	@ (80015c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800158e:	490d      	ldr	r1, [pc, #52]	@ (80015c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001590:	4a0d      	ldr	r2, [pc, #52]	@ (80015c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001592:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001594:	e002      	b.n	800159c <LoopCopyDataInit>

08001596 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001596:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001598:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800159a:	3304      	adds	r3, #4

0800159c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800159c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800159e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015a0:	d3f9      	bcc.n	8001596 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015a2:	4a0a      	ldr	r2, [pc, #40]	@ (80015cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015a4:	4c0a      	ldr	r4, [pc, #40]	@ (80015d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a8:	e001      	b.n	80015ae <LoopFillZerobss>

080015aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015ac:	3204      	adds	r2, #4

080015ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015b0:	d3fb      	bcc.n	80015aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015b2:	f003 fbe3 	bl	8004d7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015b6:	f7ff f965 	bl	8000884 <main>
  bx  lr    
 80015ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015bc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80015c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015c4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80015c8:	08005fd8 	.word	0x08005fd8
  ldr r2, =_sbss
 80015cc:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80015d0:	200004a0 	.word	0x200004a0

080015d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015d4:	e7fe      	b.n	80015d4 <ADC_IRQHandler>
	...

080015d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001618 <HAL_Init+0x40>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001618 <HAL_Init+0x40>)
 80015e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001618 <HAL_Init+0x40>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a0a      	ldr	r2, [pc, #40]	@ (8001618 <HAL_Init+0x40>)
 80015ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015f4:	4b08      	ldr	r3, [pc, #32]	@ (8001618 <HAL_Init+0x40>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a07      	ldr	r2, [pc, #28]	@ (8001618 <HAL_Init+0x40>)
 80015fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001600:	2003      	movs	r0, #3
 8001602:	f000 f94f 	bl	80018a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001606:	200f      	movs	r0, #15
 8001608:	f000 f808 	bl	800161c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800160c:	f7ff fd02 	bl	8001014 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40023c00 	.word	0x40023c00

0800161c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001624:	4b12      	ldr	r3, [pc, #72]	@ (8001670 <HAL_InitTick+0x54>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	4b12      	ldr	r3, [pc, #72]	@ (8001674 <HAL_InitTick+0x58>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	4619      	mov	r1, r3
 800162e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001632:	fbb3 f3f1 	udiv	r3, r3, r1
 8001636:	fbb2 f3f3 	udiv	r3, r2, r3
 800163a:	4618      	mov	r0, r3
 800163c:	f000 f967 	bl	800190e <HAL_SYSTICK_Config>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e00e      	b.n	8001668 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2b0f      	cmp	r3, #15
 800164e:	d80a      	bhi.n	8001666 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001650:	2200      	movs	r2, #0
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001658:	f000 f92f 	bl	80018ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800165c:	4a06      	ldr	r2, [pc, #24]	@ (8001678 <HAL_InitTick+0x5c>)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001662:	2300      	movs	r3, #0
 8001664:	e000      	b.n	8001668 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
}
 8001668:	4618      	mov	r0, r3
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20000004 	.word	0x20000004
 8001674:	2000000c 	.word	0x2000000c
 8001678:	20000008 	.word	0x20000008

0800167c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001680:	4b06      	ldr	r3, [pc, #24]	@ (800169c <HAL_IncTick+0x20>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	461a      	mov	r2, r3
 8001686:	4b06      	ldr	r3, [pc, #24]	@ (80016a0 <HAL_IncTick+0x24>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4413      	add	r3, r2
 800168c:	4a04      	ldr	r2, [pc, #16]	@ (80016a0 <HAL_IncTick+0x24>)
 800168e:	6013      	str	r3, [r2, #0]
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	2000000c 	.word	0x2000000c
 80016a0:	20000350 	.word	0x20000350

080016a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  return uwTick;
 80016a8:	4b03      	ldr	r3, [pc, #12]	@ (80016b8 <HAL_GetTick+0x14>)
 80016aa:	681b      	ldr	r3, [r3, #0]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	20000350 	.word	0x20000350

080016bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016c4:	f7ff ffee 	bl	80016a4 <HAL_GetTick>
 80016c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80016d4:	d005      	beq.n	80016e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001700 <HAL_Delay+0x44>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	461a      	mov	r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	4413      	add	r3, r2
 80016e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016e2:	bf00      	nop
 80016e4:	f7ff ffde 	bl	80016a4 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d8f7      	bhi.n	80016e4 <HAL_Delay+0x28>
  {
  }
}
 80016f4:	bf00      	nop
 80016f6:	bf00      	nop
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	2000000c 	.word	0x2000000c

08001704 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001714:	4b0c      	ldr	r3, [pc, #48]	@ (8001748 <__NVIC_SetPriorityGrouping+0x44>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800171a:	68ba      	ldr	r2, [r7, #8]
 800171c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001720:	4013      	ands	r3, r2
 8001722:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800172c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001730:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001734:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001736:	4a04      	ldr	r2, [pc, #16]	@ (8001748 <__NVIC_SetPriorityGrouping+0x44>)
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	60d3      	str	r3, [r2, #12]
}
 800173c:	bf00      	nop
 800173e:	3714      	adds	r7, #20
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001750:	4b04      	ldr	r3, [pc, #16]	@ (8001764 <__NVIC_GetPriorityGrouping+0x18>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	0a1b      	lsrs	r3, r3, #8
 8001756:	f003 0307 	and.w	r3, r3, #7
}
 800175a:	4618      	mov	r0, r3
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001776:	2b00      	cmp	r3, #0
 8001778:	db0b      	blt.n	8001792 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800177a:	79fb      	ldrb	r3, [r7, #7]
 800177c:	f003 021f 	and.w	r2, r3, #31
 8001780:	4907      	ldr	r1, [pc, #28]	@ (80017a0 <__NVIC_EnableIRQ+0x38>)
 8001782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001786:	095b      	lsrs	r3, r3, #5
 8001788:	2001      	movs	r0, #1
 800178a:	fa00 f202 	lsl.w	r2, r0, r2
 800178e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	e000e100 	.word	0xe000e100

080017a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	6039      	str	r1, [r7, #0]
 80017ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	db0a      	blt.n	80017ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	490c      	ldr	r1, [pc, #48]	@ (80017f0 <__NVIC_SetPriority+0x4c>)
 80017be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c2:	0112      	lsls	r2, r2, #4
 80017c4:	b2d2      	uxtb	r2, r2
 80017c6:	440b      	add	r3, r1
 80017c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017cc:	e00a      	b.n	80017e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	b2da      	uxtb	r2, r3
 80017d2:	4908      	ldr	r1, [pc, #32]	@ (80017f4 <__NVIC_SetPriority+0x50>)
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	f003 030f 	and.w	r3, r3, #15
 80017da:	3b04      	subs	r3, #4
 80017dc:	0112      	lsls	r2, r2, #4
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	440b      	add	r3, r1
 80017e2:	761a      	strb	r2, [r3, #24]
}
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	e000e100 	.word	0xe000e100
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b089      	sub	sp, #36	@ 0x24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	f1c3 0307 	rsb	r3, r3, #7
 8001812:	2b04      	cmp	r3, #4
 8001814:	bf28      	it	cs
 8001816:	2304      	movcs	r3, #4
 8001818:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	3304      	adds	r3, #4
 800181e:	2b06      	cmp	r3, #6
 8001820:	d902      	bls.n	8001828 <NVIC_EncodePriority+0x30>
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	3b03      	subs	r3, #3
 8001826:	e000      	b.n	800182a <NVIC_EncodePriority+0x32>
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800182c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	43da      	mvns	r2, r3
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	401a      	ands	r2, r3
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001840:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	fa01 f303 	lsl.w	r3, r1, r3
 800184a:	43d9      	mvns	r1, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001850:	4313      	orrs	r3, r2
         );
}
 8001852:	4618      	mov	r0, r3
 8001854:	3724      	adds	r7, #36	@ 0x24
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
	...

08001860 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3b01      	subs	r3, #1
 800186c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001870:	d301      	bcc.n	8001876 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001872:	2301      	movs	r3, #1
 8001874:	e00f      	b.n	8001896 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001876:	4a0a      	ldr	r2, [pc, #40]	@ (80018a0 <SysTick_Config+0x40>)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	3b01      	subs	r3, #1
 800187c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800187e:	210f      	movs	r1, #15
 8001880:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001884:	f7ff ff8e 	bl	80017a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001888:	4b05      	ldr	r3, [pc, #20]	@ (80018a0 <SysTick_Config+0x40>)
 800188a:	2200      	movs	r2, #0
 800188c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800188e:	4b04      	ldr	r3, [pc, #16]	@ (80018a0 <SysTick_Config+0x40>)
 8001890:	2207      	movs	r2, #7
 8001892:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	e000e010 	.word	0xe000e010

080018a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f7ff ff29 	bl	8001704 <__NVIC_SetPriorityGrouping>
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b086      	sub	sp, #24
 80018be:	af00      	add	r7, sp, #0
 80018c0:	4603      	mov	r3, r0
 80018c2:	60b9      	str	r1, [r7, #8]
 80018c4:	607a      	str	r2, [r7, #4]
 80018c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018cc:	f7ff ff3e 	bl	800174c <__NVIC_GetPriorityGrouping>
 80018d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	68b9      	ldr	r1, [r7, #8]
 80018d6:	6978      	ldr	r0, [r7, #20]
 80018d8:	f7ff ff8e 	bl	80017f8 <NVIC_EncodePriority>
 80018dc:	4602      	mov	r2, r0
 80018de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018e2:	4611      	mov	r1, r2
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff ff5d 	bl	80017a4 <__NVIC_SetPriority>
}
 80018ea:	bf00      	nop
 80018ec:	3718      	adds	r7, #24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b082      	sub	sp, #8
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	4603      	mov	r3, r0
 80018fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff ff31 	bl	8001768 <__NVIC_EnableIRQ>
}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b082      	sub	sp, #8
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7ff ffa2 	bl	8001860 <SysTick_Config>
 800191c:	4603      	mov	r3, r0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
	...

08001928 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001934:	f7ff feb6 	bl	80016a4 <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d101      	bne.n	8001944 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e099      	b.n	8001a78 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2202      	movs	r2, #2
 8001948:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f022 0201 	bic.w	r2, r2, #1
 8001962:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001964:	e00f      	b.n	8001986 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001966:	f7ff fe9d 	bl	80016a4 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b05      	cmp	r3, #5
 8001972:	d908      	bls.n	8001986 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2220      	movs	r2, #32
 8001978:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2203      	movs	r2, #3
 800197e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e078      	b.n	8001a78 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0301 	and.w	r3, r3, #1
 8001990:	2b00      	cmp	r3, #0
 8001992:	d1e8      	bne.n	8001966 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800199c:	697a      	ldr	r2, [r7, #20]
 800199e:	4b38      	ldr	r3, [pc, #224]	@ (8001a80 <HAL_DMA_Init+0x158>)
 80019a0:	4013      	ands	r3, r2
 80019a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685a      	ldr	r2, [r3, #4]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a1b      	ldr	r3, [r3, #32]
 80019d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019d2:	697a      	ldr	r2, [r7, #20]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019dc:	2b04      	cmp	r3, #4
 80019de:	d107      	bne.n	80019f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e8:	4313      	orrs	r3, r2
 80019ea:	697a      	ldr	r2, [r7, #20]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	697a      	ldr	r2, [r7, #20]
 80019f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	f023 0307 	bic.w	r3, r3, #7
 8001a06:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a0c:	697a      	ldr	r2, [r7, #20]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a16:	2b04      	cmp	r3, #4
 8001a18:	d117      	bne.n	8001a4a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a1e:	697a      	ldr	r2, [r7, #20]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d00e      	beq.n	8001a4a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f000 fb01 	bl	8002034 <DMA_CheckFifoParam>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d008      	beq.n	8001a4a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2240      	movs	r2, #64	@ 0x40
 8001a3c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2201      	movs	r2, #1
 8001a42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001a46:	2301      	movs	r3, #1
 8001a48:	e016      	b.n	8001a78 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f000 fab8 	bl	8001fc8 <DMA_CalcBaseAndBitshift>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a60:	223f      	movs	r2, #63	@ 0x3f
 8001a62:	409a      	lsls	r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2201      	movs	r2, #1
 8001a72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	f010803f 	.word	0xf010803f

08001a84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
 8001a90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a92:	2300      	movs	r3, #0
 8001a94:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a9a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d101      	bne.n	8001aaa <HAL_DMA_Start_IT+0x26>
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	e040      	b.n	8001b2c <HAL_DMA_Start_IT+0xa8>
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2201      	movs	r2, #1
 8001aae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d12f      	bne.n	8001b1e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2202      	movs	r2, #2
 8001ac2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	68b9      	ldr	r1, [r7, #8]
 8001ad2:	68f8      	ldr	r0, [r7, #12]
 8001ad4:	f000 fa4a 	bl	8001f6c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001adc:	223f      	movs	r2, #63	@ 0x3f
 8001ade:	409a      	lsls	r2, r3
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f042 0216 	orr.w	r2, r2, #22
 8001af2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d007      	beq.n	8001b0c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f042 0208 	orr.w	r2, r2, #8
 8001b0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f042 0201 	orr.w	r2, r2, #1
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	e005      	b.n	8001b2a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b26:	2302      	movs	r3, #2
 8001b28:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3718      	adds	r7, #24
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b40:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b42:	f7ff fdaf 	bl	80016a4 <HAL_GetTick>
 8001b46:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d008      	beq.n	8001b66 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2280      	movs	r2, #128	@ 0x80
 8001b58:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e052      	b.n	8001c0c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f022 0216 	bic.w	r2, r2, #22
 8001b74:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	695a      	ldr	r2, [r3, #20]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b84:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d103      	bne.n	8001b96 <HAL_DMA_Abort+0x62>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d007      	beq.n	8001ba6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f022 0208 	bic.w	r2, r2, #8
 8001ba4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f022 0201 	bic.w	r2, r2, #1
 8001bb4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bb6:	e013      	b.n	8001be0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bb8:	f7ff fd74 	bl	80016a4 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b05      	cmp	r3, #5
 8001bc4:	d90c      	bls.n	8001be0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2220      	movs	r2, #32
 8001bca:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2203      	movs	r2, #3
 8001bd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e015      	b.n	8001c0c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1e4      	bne.n	8001bb8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bf2:	223f      	movs	r2, #63	@ 0x3f
 8001bf4:	409a      	lsls	r2, r3
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d004      	beq.n	8001c32 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2280      	movs	r2, #128	@ 0x80
 8001c2c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e00c      	b.n	8001c4c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2205      	movs	r2, #5
 8001c36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f022 0201 	bic.w	r2, r2, #1
 8001c48:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001c60:	2300      	movs	r3, #0
 8001c62:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c64:	4b8e      	ldr	r3, [pc, #568]	@ (8001ea0 <HAL_DMA_IRQHandler+0x248>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a8e      	ldr	r2, [pc, #568]	@ (8001ea4 <HAL_DMA_IRQHandler+0x24c>)
 8001c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6e:	0a9b      	lsrs	r3, r3, #10
 8001c70:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c76:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c82:	2208      	movs	r2, #8
 8001c84:	409a      	lsls	r2, r3
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d01a      	beq.n	8001cc4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d013      	beq.n	8001cc4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f022 0204 	bic.w	r2, r2, #4
 8001caa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cb0:	2208      	movs	r2, #8
 8001cb2:	409a      	lsls	r2, r3
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cbc:	f043 0201 	orr.w	r2, r3, #1
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cc8:	2201      	movs	r2, #1
 8001cca:	409a      	lsls	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d012      	beq.n	8001cfa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d00b      	beq.n	8001cfa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	409a      	lsls	r2, r3
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cf2:	f043 0202 	orr.w	r2, r3, #2
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cfe:	2204      	movs	r2, #4
 8001d00:	409a      	lsls	r2, r3
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	4013      	ands	r3, r2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d012      	beq.n	8001d30 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d00b      	beq.n	8001d30 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d1c:	2204      	movs	r2, #4
 8001d1e:	409a      	lsls	r2, r3
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d28:	f043 0204 	orr.w	r2, r3, #4
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d34:	2210      	movs	r2, #16
 8001d36:	409a      	lsls	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d043      	beq.n	8001dc8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0308 	and.w	r3, r3, #8
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d03c      	beq.n	8001dc8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d52:	2210      	movs	r2, #16
 8001d54:	409a      	lsls	r2, r3
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d018      	beq.n	8001d9a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d108      	bne.n	8001d88 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d024      	beq.n	8001dc8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	4798      	blx	r3
 8001d86:	e01f      	b.n	8001dc8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d01b      	beq.n	8001dc8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	4798      	blx	r3
 8001d98:	e016      	b.n	8001dc8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d107      	bne.n	8001db8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f022 0208 	bic.w	r2, r2, #8
 8001db6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d003      	beq.n	8001dc8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dcc:	2220      	movs	r2, #32
 8001dce:	409a      	lsls	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f000 808f 	beq.w	8001ef8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0310 	and.w	r3, r3, #16
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f000 8087 	beq.w	8001ef8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dee:	2220      	movs	r2, #32
 8001df0:	409a      	lsls	r2, r3
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b05      	cmp	r3, #5
 8001e00:	d136      	bne.n	8001e70 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f022 0216 	bic.w	r2, r2, #22
 8001e10:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	695a      	ldr	r2, [r3, #20]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e20:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d103      	bne.n	8001e32 <HAL_DMA_IRQHandler+0x1da>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d007      	beq.n	8001e42 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f022 0208 	bic.w	r2, r2, #8
 8001e40:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e46:	223f      	movs	r2, #63	@ 0x3f
 8001e48:	409a      	lsls	r2, r3
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d07e      	beq.n	8001f64 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	4798      	blx	r3
        }
        return;
 8001e6e:	e079      	b.n	8001f64 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d01d      	beq.n	8001eba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d10d      	bne.n	8001ea8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d031      	beq.n	8001ef8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	4798      	blx	r3
 8001e9c:	e02c      	b.n	8001ef8 <HAL_DMA_IRQHandler+0x2a0>
 8001e9e:	bf00      	nop
 8001ea0:	20000004 	.word	0x20000004
 8001ea4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d023      	beq.n	8001ef8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	4798      	blx	r3
 8001eb8:	e01e      	b.n	8001ef8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d10f      	bne.n	8001ee8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 0210 	bic.w	r2, r2, #16
 8001ed6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d003      	beq.n	8001ef8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d032      	beq.n	8001f66 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d022      	beq.n	8001f52 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2205      	movs	r2, #5
 8001f10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f022 0201 	bic.w	r2, r2, #1
 8001f22:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	3301      	adds	r3, #1
 8001f28:	60bb      	str	r3, [r7, #8]
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d307      	bcc.n	8001f40 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1f2      	bne.n	8001f24 <HAL_DMA_IRQHandler+0x2cc>
 8001f3e:	e000      	b.n	8001f42 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001f40:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2201      	movs	r2, #1
 8001f46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d005      	beq.n	8001f66 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	4798      	blx	r3
 8001f62:	e000      	b.n	8001f66 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001f64:	bf00      	nop
    }
  }
}
 8001f66:	3718      	adds	r7, #24
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
 8001f78:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001f88:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	2b40      	cmp	r3, #64	@ 0x40
 8001f98:	d108      	bne.n	8001fac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68ba      	ldr	r2, [r7, #8]
 8001fa8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001faa:	e007      	b.n	8001fbc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68ba      	ldr	r2, [r7, #8]
 8001fb2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	60da      	str	r2, [r3, #12]
}
 8001fbc:	bf00      	nop
 8001fbe:	3714      	adds	r7, #20
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	3b10      	subs	r3, #16
 8001fd8:	4a14      	ldr	r2, [pc, #80]	@ (800202c <DMA_CalcBaseAndBitshift+0x64>)
 8001fda:	fba2 2303 	umull	r2, r3, r2, r3
 8001fde:	091b      	lsrs	r3, r3, #4
 8001fe0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001fe2:	4a13      	ldr	r2, [pc, #76]	@ (8002030 <DMA_CalcBaseAndBitshift+0x68>)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	461a      	mov	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2b03      	cmp	r3, #3
 8001ff4:	d909      	bls.n	800200a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001ffe:	f023 0303 	bic.w	r3, r3, #3
 8002002:	1d1a      	adds	r2, r3, #4
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	659a      	str	r2, [r3, #88]	@ 0x58
 8002008:	e007      	b.n	800201a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002012:	f023 0303 	bic.w	r3, r3, #3
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800201e:	4618      	mov	r0, r3
 8002020:	3714      	adds	r7, #20
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	aaaaaaab 	.word	0xaaaaaaab
 8002030:	08005ddc 	.word	0x08005ddc

08002034 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800203c:	2300      	movs	r3, #0
 800203e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002044:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d11f      	bne.n	800208e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	2b03      	cmp	r3, #3
 8002052:	d856      	bhi.n	8002102 <DMA_CheckFifoParam+0xce>
 8002054:	a201      	add	r2, pc, #4	@ (adr r2, 800205c <DMA_CheckFifoParam+0x28>)
 8002056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800205a:	bf00      	nop
 800205c:	0800206d 	.word	0x0800206d
 8002060:	0800207f 	.word	0x0800207f
 8002064:	0800206d 	.word	0x0800206d
 8002068:	08002103 	.word	0x08002103
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002070:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d046      	beq.n	8002106 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800207c:	e043      	b.n	8002106 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002082:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002086:	d140      	bne.n	800210a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800208c:	e03d      	b.n	800210a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002096:	d121      	bne.n	80020dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	2b03      	cmp	r3, #3
 800209c:	d837      	bhi.n	800210e <DMA_CheckFifoParam+0xda>
 800209e:	a201      	add	r2, pc, #4	@ (adr r2, 80020a4 <DMA_CheckFifoParam+0x70>)
 80020a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020a4:	080020b5 	.word	0x080020b5
 80020a8:	080020bb 	.word	0x080020bb
 80020ac:	080020b5 	.word	0x080020b5
 80020b0:	080020cd 	.word	0x080020cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	73fb      	strb	r3, [r7, #15]
      break;
 80020b8:	e030      	b.n	800211c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d025      	beq.n	8002112 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020ca:	e022      	b.n	8002112 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80020d4:	d11f      	bne.n	8002116 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80020da:	e01c      	b.n	8002116 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d903      	bls.n	80020ea <DMA_CheckFifoParam+0xb6>
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	2b03      	cmp	r3, #3
 80020e6:	d003      	beq.n	80020f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80020e8:	e018      	b.n	800211c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	73fb      	strb	r3, [r7, #15]
      break;
 80020ee:	e015      	b.n	800211c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d00e      	beq.n	800211a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002100:	e00b      	b.n	800211a <DMA_CheckFifoParam+0xe6>
      break;
 8002102:	bf00      	nop
 8002104:	e00a      	b.n	800211c <DMA_CheckFifoParam+0xe8>
      break;
 8002106:	bf00      	nop
 8002108:	e008      	b.n	800211c <DMA_CheckFifoParam+0xe8>
      break;
 800210a:	bf00      	nop
 800210c:	e006      	b.n	800211c <DMA_CheckFifoParam+0xe8>
      break;
 800210e:	bf00      	nop
 8002110:	e004      	b.n	800211c <DMA_CheckFifoParam+0xe8>
      break;
 8002112:	bf00      	nop
 8002114:	e002      	b.n	800211c <DMA_CheckFifoParam+0xe8>
      break;   
 8002116:	bf00      	nop
 8002118:	e000      	b.n	800211c <DMA_CheckFifoParam+0xe8>
      break;
 800211a:	bf00      	nop
    }
  } 
  
  return status; 
 800211c:	7bfb      	ldrb	r3, [r7, #15]
}
 800211e:	4618      	mov	r0, r3
 8002120:	3714      	adds	r7, #20
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop

0800212c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800212c:	b480      	push	{r7}
 800212e:	b089      	sub	sp, #36	@ 0x24
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002136:	2300      	movs	r3, #0
 8002138:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800213a:	2300      	movs	r3, #0
 800213c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800213e:	2300      	movs	r3, #0
 8002140:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002142:	2300      	movs	r3, #0
 8002144:	61fb      	str	r3, [r7, #28]
 8002146:	e159      	b.n	80023fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002148:	2201      	movs	r2, #1
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	4013      	ands	r3, r2
 800215a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	429a      	cmp	r2, r3
 8002162:	f040 8148 	bne.w	80023f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f003 0303 	and.w	r3, r3, #3
 800216e:	2b01      	cmp	r3, #1
 8002170:	d005      	beq.n	800217e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800217a:	2b02      	cmp	r3, #2
 800217c:	d130      	bne.n	80021e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	2203      	movs	r2, #3
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	43db      	mvns	r3, r3
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	4013      	ands	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	68da      	ldr	r2, [r3, #12]
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021b4:	2201      	movs	r2, #1
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	43db      	mvns	r3, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4013      	ands	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	091b      	lsrs	r3, r3, #4
 80021ca:	f003 0201 	and.w	r2, r3, #1
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 0303 	and.w	r3, r3, #3
 80021e8:	2b03      	cmp	r3, #3
 80021ea:	d017      	beq.n	800221c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	2203      	movs	r2, #3
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	43db      	mvns	r3, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4013      	ands	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	689a      	ldr	r2, [r3, #8]
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	4313      	orrs	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f003 0303 	and.w	r3, r3, #3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d123      	bne.n	8002270 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	08da      	lsrs	r2, r3, #3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3208      	adds	r2, #8
 8002230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002234:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	f003 0307 	and.w	r3, r3, #7
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	220f      	movs	r2, #15
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	43db      	mvns	r3, r3
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4013      	ands	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	691a      	ldr	r2, [r3, #16]
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	08da      	lsrs	r2, r3, #3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3208      	adds	r2, #8
 800226a:	69b9      	ldr	r1, [r7, #24]
 800226c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	2203      	movs	r2, #3
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	43db      	mvns	r3, r3
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	4013      	ands	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f003 0203 	and.w	r2, r3, #3
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4313      	orrs	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f000 80a2 	beq.w	80023f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	4b57      	ldr	r3, [pc, #348]	@ (8002414 <HAL_GPIO_Init+0x2e8>)
 80022b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ba:	4a56      	ldr	r2, [pc, #344]	@ (8002414 <HAL_GPIO_Init+0x2e8>)
 80022bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80022c2:	4b54      	ldr	r3, [pc, #336]	@ (8002414 <HAL_GPIO_Init+0x2e8>)
 80022c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022ce:	4a52      	ldr	r2, [pc, #328]	@ (8002418 <HAL_GPIO_Init+0x2ec>)
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	089b      	lsrs	r3, r3, #2
 80022d4:	3302      	adds	r3, #2
 80022d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	f003 0303 	and.w	r3, r3, #3
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	220f      	movs	r2, #15
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	43db      	mvns	r3, r3
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	4013      	ands	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a49      	ldr	r2, [pc, #292]	@ (800241c <HAL_GPIO_Init+0x2f0>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d019      	beq.n	800232e <HAL_GPIO_Init+0x202>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a48      	ldr	r2, [pc, #288]	@ (8002420 <HAL_GPIO_Init+0x2f4>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d013      	beq.n	800232a <HAL_GPIO_Init+0x1fe>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a47      	ldr	r2, [pc, #284]	@ (8002424 <HAL_GPIO_Init+0x2f8>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d00d      	beq.n	8002326 <HAL_GPIO_Init+0x1fa>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a46      	ldr	r2, [pc, #280]	@ (8002428 <HAL_GPIO_Init+0x2fc>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d007      	beq.n	8002322 <HAL_GPIO_Init+0x1f6>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a45      	ldr	r2, [pc, #276]	@ (800242c <HAL_GPIO_Init+0x300>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d101      	bne.n	800231e <HAL_GPIO_Init+0x1f2>
 800231a:	2304      	movs	r3, #4
 800231c:	e008      	b.n	8002330 <HAL_GPIO_Init+0x204>
 800231e:	2307      	movs	r3, #7
 8002320:	e006      	b.n	8002330 <HAL_GPIO_Init+0x204>
 8002322:	2303      	movs	r3, #3
 8002324:	e004      	b.n	8002330 <HAL_GPIO_Init+0x204>
 8002326:	2302      	movs	r3, #2
 8002328:	e002      	b.n	8002330 <HAL_GPIO_Init+0x204>
 800232a:	2301      	movs	r3, #1
 800232c:	e000      	b.n	8002330 <HAL_GPIO_Init+0x204>
 800232e:	2300      	movs	r3, #0
 8002330:	69fa      	ldr	r2, [r7, #28]
 8002332:	f002 0203 	and.w	r2, r2, #3
 8002336:	0092      	lsls	r2, r2, #2
 8002338:	4093      	lsls	r3, r2
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	4313      	orrs	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002340:	4935      	ldr	r1, [pc, #212]	@ (8002418 <HAL_GPIO_Init+0x2ec>)
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	089b      	lsrs	r3, r3, #2
 8002346:	3302      	adds	r3, #2
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800234e:	4b38      	ldr	r3, [pc, #224]	@ (8002430 <HAL_GPIO_Init+0x304>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	43db      	mvns	r3, r3
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	4013      	ands	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d003      	beq.n	8002372 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	4313      	orrs	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002372:	4a2f      	ldr	r2, [pc, #188]	@ (8002430 <HAL_GPIO_Init+0x304>)
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002378:	4b2d      	ldr	r3, [pc, #180]	@ (8002430 <HAL_GPIO_Init+0x304>)
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	43db      	mvns	r3, r3
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4013      	ands	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d003      	beq.n	800239c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	4313      	orrs	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800239c:	4a24      	ldr	r2, [pc, #144]	@ (8002430 <HAL_GPIO_Init+0x304>)
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023a2:	4b23      	ldr	r3, [pc, #140]	@ (8002430 <HAL_GPIO_Init+0x304>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	43db      	mvns	r3, r3
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4013      	ands	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023c6:	4a1a      	ldr	r2, [pc, #104]	@ (8002430 <HAL_GPIO_Init+0x304>)
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023cc:	4b18      	ldr	r3, [pc, #96]	@ (8002430 <HAL_GPIO_Init+0x304>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	43db      	mvns	r3, r3
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	4013      	ands	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d003      	beq.n	80023f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023f0:	4a0f      	ldr	r2, [pc, #60]	@ (8002430 <HAL_GPIO_Init+0x304>)
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	3301      	adds	r3, #1
 80023fa:	61fb      	str	r3, [r7, #28]
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	2b0f      	cmp	r3, #15
 8002400:	f67f aea2 	bls.w	8002148 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002404:	bf00      	nop
 8002406:	bf00      	nop
 8002408:	3724      	adds	r7, #36	@ 0x24
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	40023800 	.word	0x40023800
 8002418:	40013800 	.word	0x40013800
 800241c:	40020000 	.word	0x40020000
 8002420:	40020400 	.word	0x40020400
 8002424:	40020800 	.word	0x40020800
 8002428:	40020c00 	.word	0x40020c00
 800242c:	40021000 	.word	0x40021000
 8002430:	40013c00 	.word	0x40013c00

08002434 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	460b      	mov	r3, r1
 800243e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	695b      	ldr	r3, [r3, #20]
 8002444:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002446:	887a      	ldrh	r2, [r7, #2]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	4013      	ands	r3, r2
 800244c:	041a      	lsls	r2, r3, #16
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	43d9      	mvns	r1, r3
 8002452:	887b      	ldrh	r3, [r7, #2]
 8002454:	400b      	ands	r3, r1
 8002456:	431a      	orrs	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	619a      	str	r2, [r3, #24]
}
 800245c:	bf00      	nop
 800245e:	3714      	adds	r7, #20
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e267      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	d075      	beq.n	8002572 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002486:	4b88      	ldr	r3, [pc, #544]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f003 030c 	and.w	r3, r3, #12
 800248e:	2b04      	cmp	r3, #4
 8002490:	d00c      	beq.n	80024ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002492:	4b85      	ldr	r3, [pc, #532]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800249a:	2b08      	cmp	r3, #8
 800249c:	d112      	bne.n	80024c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800249e:	4b82      	ldr	r3, [pc, #520]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024aa:	d10b      	bne.n	80024c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ac:	4b7e      	ldr	r3, [pc, #504]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d05b      	beq.n	8002570 <HAL_RCC_OscConfig+0x108>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d157      	bne.n	8002570 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e242      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024cc:	d106      	bne.n	80024dc <HAL_RCC_OscConfig+0x74>
 80024ce:	4b76      	ldr	r3, [pc, #472]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a75      	ldr	r2, [pc, #468]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 80024d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024d8:	6013      	str	r3, [r2, #0]
 80024da:	e01d      	b.n	8002518 <HAL_RCC_OscConfig+0xb0>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024e4:	d10c      	bne.n	8002500 <HAL_RCC_OscConfig+0x98>
 80024e6:	4b70      	ldr	r3, [pc, #448]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a6f      	ldr	r2, [pc, #444]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 80024ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024f0:	6013      	str	r3, [r2, #0]
 80024f2:	4b6d      	ldr	r3, [pc, #436]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a6c      	ldr	r2, [pc, #432]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 80024f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024fc:	6013      	str	r3, [r2, #0]
 80024fe:	e00b      	b.n	8002518 <HAL_RCC_OscConfig+0xb0>
 8002500:	4b69      	ldr	r3, [pc, #420]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a68      	ldr	r2, [pc, #416]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 8002506:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800250a:	6013      	str	r3, [r2, #0]
 800250c:	4b66      	ldr	r3, [pc, #408]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a65      	ldr	r2, [pc, #404]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 8002512:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002516:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d013      	beq.n	8002548 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002520:	f7ff f8c0 	bl	80016a4 <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002528:	f7ff f8bc 	bl	80016a4 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b64      	cmp	r3, #100	@ 0x64
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e207      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800253a:	4b5b      	ldr	r3, [pc, #364]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0f0      	beq.n	8002528 <HAL_RCC_OscConfig+0xc0>
 8002546:	e014      	b.n	8002572 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002548:	f7ff f8ac 	bl	80016a4 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002550:	f7ff f8a8 	bl	80016a4 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b64      	cmp	r3, #100	@ 0x64
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e1f3      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002562:	4b51      	ldr	r3, [pc, #324]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1f0      	bne.n	8002550 <HAL_RCC_OscConfig+0xe8>
 800256e:	e000      	b.n	8002572 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002570:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d063      	beq.n	8002646 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800257e:	4b4a      	ldr	r3, [pc, #296]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f003 030c 	and.w	r3, r3, #12
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00b      	beq.n	80025a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800258a:	4b47      	ldr	r3, [pc, #284]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002592:	2b08      	cmp	r3, #8
 8002594:	d11c      	bne.n	80025d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002596:	4b44      	ldr	r3, [pc, #272]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d116      	bne.n	80025d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025a2:	4b41      	ldr	r3, [pc, #260]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d005      	beq.n	80025ba <HAL_RCC_OscConfig+0x152>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d001      	beq.n	80025ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e1c7      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ba:	4b3b      	ldr	r3, [pc, #236]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	4937      	ldr	r1, [pc, #220]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ce:	e03a      	b.n	8002646 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d020      	beq.n	800261a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025d8:	4b34      	ldr	r3, [pc, #208]	@ (80026ac <HAL_RCC_OscConfig+0x244>)
 80025da:	2201      	movs	r2, #1
 80025dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025de:	f7ff f861 	bl	80016a4 <HAL_GetTick>
 80025e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e4:	e008      	b.n	80025f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025e6:	f7ff f85d 	bl	80016a4 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e1a8      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f8:	4b2b      	ldr	r3, [pc, #172]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d0f0      	beq.n	80025e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002604:	4b28      	ldr	r3, [pc, #160]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	4925      	ldr	r1, [pc, #148]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 8002614:	4313      	orrs	r3, r2
 8002616:	600b      	str	r3, [r1, #0]
 8002618:	e015      	b.n	8002646 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800261a:	4b24      	ldr	r3, [pc, #144]	@ (80026ac <HAL_RCC_OscConfig+0x244>)
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002620:	f7ff f840 	bl	80016a4 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002628:	f7ff f83c 	bl	80016a4 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e187      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800263a:	4b1b      	ldr	r3, [pc, #108]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1f0      	bne.n	8002628 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0308 	and.w	r3, r3, #8
 800264e:	2b00      	cmp	r3, #0
 8002650:	d036      	beq.n	80026c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d016      	beq.n	8002688 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800265a:	4b15      	ldr	r3, [pc, #84]	@ (80026b0 <HAL_RCC_OscConfig+0x248>)
 800265c:	2201      	movs	r2, #1
 800265e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002660:	f7ff f820 	bl	80016a4 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002668:	f7ff f81c 	bl	80016a4 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e167      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800267a:	4b0b      	ldr	r3, [pc, #44]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 800267c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d0f0      	beq.n	8002668 <HAL_RCC_OscConfig+0x200>
 8002686:	e01b      	b.n	80026c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002688:	4b09      	ldr	r3, [pc, #36]	@ (80026b0 <HAL_RCC_OscConfig+0x248>)
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800268e:	f7ff f809 	bl	80016a4 <HAL_GetTick>
 8002692:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002694:	e00e      	b.n	80026b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002696:	f7ff f805 	bl	80016a4 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d907      	bls.n	80026b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e150      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
 80026a8:	40023800 	.word	0x40023800
 80026ac:	42470000 	.word	0x42470000
 80026b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026b4:	4b88      	ldr	r3, [pc, #544]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 80026b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1ea      	bne.n	8002696 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0304 	and.w	r3, r3, #4
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f000 8097 	beq.w	80027fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ce:	2300      	movs	r3, #0
 80026d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026d2:	4b81      	ldr	r3, [pc, #516]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 80026d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10f      	bne.n	80026fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026de:	2300      	movs	r3, #0
 80026e0:	60bb      	str	r3, [r7, #8]
 80026e2:	4b7d      	ldr	r3, [pc, #500]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 80026e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e6:	4a7c      	ldr	r2, [pc, #496]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 80026e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80026ee:	4b7a      	ldr	r3, [pc, #488]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 80026f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026f6:	60bb      	str	r3, [r7, #8]
 80026f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026fa:	2301      	movs	r3, #1
 80026fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026fe:	4b77      	ldr	r3, [pc, #476]	@ (80028dc <HAL_RCC_OscConfig+0x474>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002706:	2b00      	cmp	r3, #0
 8002708:	d118      	bne.n	800273c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800270a:	4b74      	ldr	r3, [pc, #464]	@ (80028dc <HAL_RCC_OscConfig+0x474>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a73      	ldr	r2, [pc, #460]	@ (80028dc <HAL_RCC_OscConfig+0x474>)
 8002710:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002714:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002716:	f7fe ffc5 	bl	80016a4 <HAL_GetTick>
 800271a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800271c:	e008      	b.n	8002730 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800271e:	f7fe ffc1 	bl	80016a4 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e10c      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002730:	4b6a      	ldr	r3, [pc, #424]	@ (80028dc <HAL_RCC_OscConfig+0x474>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002738:	2b00      	cmp	r3, #0
 800273a:	d0f0      	beq.n	800271e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d106      	bne.n	8002752 <HAL_RCC_OscConfig+0x2ea>
 8002744:	4b64      	ldr	r3, [pc, #400]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 8002746:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002748:	4a63      	ldr	r2, [pc, #396]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 800274a:	f043 0301 	orr.w	r3, r3, #1
 800274e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002750:	e01c      	b.n	800278c <HAL_RCC_OscConfig+0x324>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	2b05      	cmp	r3, #5
 8002758:	d10c      	bne.n	8002774 <HAL_RCC_OscConfig+0x30c>
 800275a:	4b5f      	ldr	r3, [pc, #380]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 800275c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800275e:	4a5e      	ldr	r2, [pc, #376]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 8002760:	f043 0304 	orr.w	r3, r3, #4
 8002764:	6713      	str	r3, [r2, #112]	@ 0x70
 8002766:	4b5c      	ldr	r3, [pc, #368]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 8002768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800276a:	4a5b      	ldr	r2, [pc, #364]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 800276c:	f043 0301 	orr.w	r3, r3, #1
 8002770:	6713      	str	r3, [r2, #112]	@ 0x70
 8002772:	e00b      	b.n	800278c <HAL_RCC_OscConfig+0x324>
 8002774:	4b58      	ldr	r3, [pc, #352]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 8002776:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002778:	4a57      	ldr	r2, [pc, #348]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 800277a:	f023 0301 	bic.w	r3, r3, #1
 800277e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002780:	4b55      	ldr	r3, [pc, #340]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 8002782:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002784:	4a54      	ldr	r2, [pc, #336]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 8002786:	f023 0304 	bic.w	r3, r3, #4
 800278a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d015      	beq.n	80027c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002794:	f7fe ff86 	bl	80016a4 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800279a:	e00a      	b.n	80027b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800279c:	f7fe ff82 	bl	80016a4 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e0cb      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b2:	4b49      	ldr	r3, [pc, #292]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 80027b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d0ee      	beq.n	800279c <HAL_RCC_OscConfig+0x334>
 80027be:	e014      	b.n	80027ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027c0:	f7fe ff70 	bl	80016a4 <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027c6:	e00a      	b.n	80027de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027c8:	f7fe ff6c 	bl	80016a4 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e0b5      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027de:	4b3e      	ldr	r3, [pc, #248]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 80027e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1ee      	bne.n	80027c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027ea:	7dfb      	ldrb	r3, [r7, #23]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d105      	bne.n	80027fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027f0:	4b39      	ldr	r3, [pc, #228]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 80027f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f4:	4a38      	ldr	r2, [pc, #224]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 80027f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	2b00      	cmp	r3, #0
 8002802:	f000 80a1 	beq.w	8002948 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002806:	4b34      	ldr	r3, [pc, #208]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f003 030c 	and.w	r3, r3, #12
 800280e:	2b08      	cmp	r3, #8
 8002810:	d05c      	beq.n	80028cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	2b02      	cmp	r3, #2
 8002818:	d141      	bne.n	800289e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800281a:	4b31      	ldr	r3, [pc, #196]	@ (80028e0 <HAL_RCC_OscConfig+0x478>)
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002820:	f7fe ff40 	bl	80016a4 <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002828:	f7fe ff3c 	bl	80016a4 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e087      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800283a:	4b27      	ldr	r3, [pc, #156]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1f0      	bne.n	8002828 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	69da      	ldr	r2, [r3, #28]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	431a      	orrs	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002854:	019b      	lsls	r3, r3, #6
 8002856:	431a      	orrs	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800285c:	085b      	lsrs	r3, r3, #1
 800285e:	3b01      	subs	r3, #1
 8002860:	041b      	lsls	r3, r3, #16
 8002862:	431a      	orrs	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002868:	061b      	lsls	r3, r3, #24
 800286a:	491b      	ldr	r1, [pc, #108]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 800286c:	4313      	orrs	r3, r2
 800286e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002870:	4b1b      	ldr	r3, [pc, #108]	@ (80028e0 <HAL_RCC_OscConfig+0x478>)
 8002872:	2201      	movs	r2, #1
 8002874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002876:	f7fe ff15 	bl	80016a4 <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800287e:	f7fe ff11 	bl	80016a4 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e05c      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002890:	4b11      	ldr	r3, [pc, #68]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d0f0      	beq.n	800287e <HAL_RCC_OscConfig+0x416>
 800289c:	e054      	b.n	8002948 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800289e:	4b10      	ldr	r3, [pc, #64]	@ (80028e0 <HAL_RCC_OscConfig+0x478>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a4:	f7fe fefe 	bl	80016a4 <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ac:	f7fe fefa 	bl	80016a4 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e045      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028be:	4b06      	ldr	r3, [pc, #24]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1f0      	bne.n	80028ac <HAL_RCC_OscConfig+0x444>
 80028ca:	e03d      	b.n	8002948 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d107      	bne.n	80028e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e038      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
 80028d8:	40023800 	.word	0x40023800
 80028dc:	40007000 	.word	0x40007000
 80028e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002954 <HAL_RCC_OscConfig+0x4ec>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d028      	beq.n	8002944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d121      	bne.n	8002944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800290a:	429a      	cmp	r2, r3
 800290c:	d11a      	bne.n	8002944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002914:	4013      	ands	r3, r2
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800291a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800291c:	4293      	cmp	r3, r2
 800291e:	d111      	bne.n	8002944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800292a:	085b      	lsrs	r3, r3, #1
 800292c:	3b01      	subs	r3, #1
 800292e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002930:	429a      	cmp	r2, r3
 8002932:	d107      	bne.n	8002944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800293e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002940:	429a      	cmp	r2, r3
 8002942:	d001      	beq.n	8002948 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e000      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3718      	adds	r7, #24
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	40023800 	.word	0x40023800

08002958 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e0cc      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800296c:	4b68      	ldr	r3, [pc, #416]	@ (8002b10 <HAL_RCC_ClockConfig+0x1b8>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0307 	and.w	r3, r3, #7
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	429a      	cmp	r2, r3
 8002978:	d90c      	bls.n	8002994 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800297a:	4b65      	ldr	r3, [pc, #404]	@ (8002b10 <HAL_RCC_ClockConfig+0x1b8>)
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002982:	4b63      	ldr	r3, [pc, #396]	@ (8002b10 <HAL_RCC_ClockConfig+0x1b8>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	429a      	cmp	r2, r3
 800298e:	d001      	beq.n	8002994 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e0b8      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d020      	beq.n	80029e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0304 	and.w	r3, r3, #4
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d005      	beq.n	80029b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029ac:	4b59      	ldr	r3, [pc, #356]	@ (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	4a58      	ldr	r2, [pc, #352]	@ (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 80029b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80029b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0308 	and.w	r3, r3, #8
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d005      	beq.n	80029d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029c4:	4b53      	ldr	r3, [pc, #332]	@ (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	4a52      	ldr	r2, [pc, #328]	@ (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 80029ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80029ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029d0:	4b50      	ldr	r3, [pc, #320]	@ (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	494d      	ldr	r1, [pc, #308]	@ (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d044      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d107      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029f6:	4b47      	ldr	r3, [pc, #284]	@ (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d119      	bne.n	8002a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e07f      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d003      	beq.n	8002a16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a12:	2b03      	cmp	r3, #3
 8002a14:	d107      	bne.n	8002a26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a16:	4b3f      	ldr	r3, [pc, #252]	@ (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d109      	bne.n	8002a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e06f      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a26:	4b3b      	ldr	r3, [pc, #236]	@ (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e067      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a36:	4b37      	ldr	r3, [pc, #220]	@ (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f023 0203 	bic.w	r2, r3, #3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	4934      	ldr	r1, [pc, #208]	@ (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a48:	f7fe fe2c 	bl	80016a4 <HAL_GetTick>
 8002a4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a4e:	e00a      	b.n	8002a66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a50:	f7fe fe28 	bl	80016a4 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e04f      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a66:	4b2b      	ldr	r3, [pc, #172]	@ (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 020c 	and.w	r2, r3, #12
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d1eb      	bne.n	8002a50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a78:	4b25      	ldr	r3, [pc, #148]	@ (8002b10 <HAL_RCC_ClockConfig+0x1b8>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0307 	and.w	r3, r3, #7
 8002a80:	683a      	ldr	r2, [r7, #0]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d20c      	bcs.n	8002aa0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a86:	4b22      	ldr	r3, [pc, #136]	@ (8002b10 <HAL_RCC_ClockConfig+0x1b8>)
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	b2d2      	uxtb	r2, r2
 8002a8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a8e:	4b20      	ldr	r3, [pc, #128]	@ (8002b10 <HAL_RCC_ClockConfig+0x1b8>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0307 	and.w	r3, r3, #7
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d001      	beq.n	8002aa0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e032      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d008      	beq.n	8002abe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aac:	4b19      	ldr	r3, [pc, #100]	@ (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	4916      	ldr	r1, [pc, #88]	@ (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0308 	and.w	r3, r3, #8
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d009      	beq.n	8002ade <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002aca:	4b12      	ldr	r3, [pc, #72]	@ (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	490e      	ldr	r1, [pc, #56]	@ (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ade:	f000 f821 	bl	8002b24 <HAL_RCC_GetSysClockFreq>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	091b      	lsrs	r3, r3, #4
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	490a      	ldr	r1, [pc, #40]	@ (8002b18 <HAL_RCC_ClockConfig+0x1c0>)
 8002af0:	5ccb      	ldrb	r3, [r1, r3]
 8002af2:	fa22 f303 	lsr.w	r3, r2, r3
 8002af6:	4a09      	ldr	r2, [pc, #36]	@ (8002b1c <HAL_RCC_ClockConfig+0x1c4>)
 8002af8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002afa:	4b09      	ldr	r3, [pc, #36]	@ (8002b20 <HAL_RCC_ClockConfig+0x1c8>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7fe fd8c 	bl	800161c <HAL_InitTick>

  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	40023c00 	.word	0x40023c00
 8002b14:	40023800 	.word	0x40023800
 8002b18:	08005dc4 	.word	0x08005dc4
 8002b1c:	20000004 	.word	0x20000004
 8002b20:	20000008 	.word	0x20000008

08002b24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b28:	b090      	sub	sp, #64	@ 0x40
 8002b2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b30:	2300      	movs	r3, #0
 8002b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b34:	2300      	movs	r3, #0
 8002b36:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b3c:	4b59      	ldr	r3, [pc, #356]	@ (8002ca4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f003 030c 	and.w	r3, r3, #12
 8002b44:	2b08      	cmp	r3, #8
 8002b46:	d00d      	beq.n	8002b64 <HAL_RCC_GetSysClockFreq+0x40>
 8002b48:	2b08      	cmp	r3, #8
 8002b4a:	f200 80a1 	bhi.w	8002c90 <HAL_RCC_GetSysClockFreq+0x16c>
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d002      	beq.n	8002b58 <HAL_RCC_GetSysClockFreq+0x34>
 8002b52:	2b04      	cmp	r3, #4
 8002b54:	d003      	beq.n	8002b5e <HAL_RCC_GetSysClockFreq+0x3a>
 8002b56:	e09b      	b.n	8002c90 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b58:	4b53      	ldr	r3, [pc, #332]	@ (8002ca8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b5a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002b5c:	e09b      	b.n	8002c96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b5e:	4b53      	ldr	r3, [pc, #332]	@ (8002cac <HAL_RCC_GetSysClockFreq+0x188>)
 8002b60:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b62:	e098      	b.n	8002c96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b64:	4b4f      	ldr	r3, [pc, #316]	@ (8002ca4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b6c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b6e:	4b4d      	ldr	r3, [pc, #308]	@ (8002ca4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d028      	beq.n	8002bcc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b7a:	4b4a      	ldr	r3, [pc, #296]	@ (8002ca4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	099b      	lsrs	r3, r3, #6
 8002b80:	2200      	movs	r2, #0
 8002b82:	623b      	str	r3, [r7, #32]
 8002b84:	627a      	str	r2, [r7, #36]	@ 0x24
 8002b86:	6a3b      	ldr	r3, [r7, #32]
 8002b88:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	4b47      	ldr	r3, [pc, #284]	@ (8002cac <HAL_RCC_GetSysClockFreq+0x188>)
 8002b90:	fb03 f201 	mul.w	r2, r3, r1
 8002b94:	2300      	movs	r3, #0
 8002b96:	fb00 f303 	mul.w	r3, r0, r3
 8002b9a:	4413      	add	r3, r2
 8002b9c:	4a43      	ldr	r2, [pc, #268]	@ (8002cac <HAL_RCC_GetSysClockFreq+0x188>)
 8002b9e:	fba0 1202 	umull	r1, r2, r0, r2
 8002ba2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ba4:	460a      	mov	r2, r1
 8002ba6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002ba8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002baa:	4413      	add	r3, r2
 8002bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	61bb      	str	r3, [r7, #24]
 8002bb4:	61fa      	str	r2, [r7, #28]
 8002bb6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002bbe:	f7fd fb67 	bl	8000290 <__aeabi_uldivmod>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bca:	e053      	b.n	8002c74 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bcc:	4b35      	ldr	r3, [pc, #212]	@ (8002ca4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	099b      	lsrs	r3, r3, #6
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	613b      	str	r3, [r7, #16]
 8002bd6:	617a      	str	r2, [r7, #20]
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002bde:	f04f 0b00 	mov.w	fp, #0
 8002be2:	4652      	mov	r2, sl
 8002be4:	465b      	mov	r3, fp
 8002be6:	f04f 0000 	mov.w	r0, #0
 8002bea:	f04f 0100 	mov.w	r1, #0
 8002bee:	0159      	lsls	r1, r3, #5
 8002bf0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bf4:	0150      	lsls	r0, r2, #5
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	ebb2 080a 	subs.w	r8, r2, sl
 8002bfe:	eb63 090b 	sbc.w	r9, r3, fp
 8002c02:	f04f 0200 	mov.w	r2, #0
 8002c06:	f04f 0300 	mov.w	r3, #0
 8002c0a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002c0e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002c12:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002c16:	ebb2 0408 	subs.w	r4, r2, r8
 8002c1a:	eb63 0509 	sbc.w	r5, r3, r9
 8002c1e:	f04f 0200 	mov.w	r2, #0
 8002c22:	f04f 0300 	mov.w	r3, #0
 8002c26:	00eb      	lsls	r3, r5, #3
 8002c28:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c2c:	00e2      	lsls	r2, r4, #3
 8002c2e:	4614      	mov	r4, r2
 8002c30:	461d      	mov	r5, r3
 8002c32:	eb14 030a 	adds.w	r3, r4, sl
 8002c36:	603b      	str	r3, [r7, #0]
 8002c38:	eb45 030b 	adc.w	r3, r5, fp
 8002c3c:	607b      	str	r3, [r7, #4]
 8002c3e:	f04f 0200 	mov.w	r2, #0
 8002c42:	f04f 0300 	mov.w	r3, #0
 8002c46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c4a:	4629      	mov	r1, r5
 8002c4c:	028b      	lsls	r3, r1, #10
 8002c4e:	4621      	mov	r1, r4
 8002c50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c54:	4621      	mov	r1, r4
 8002c56:	028a      	lsls	r2, r1, #10
 8002c58:	4610      	mov	r0, r2
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c5e:	2200      	movs	r2, #0
 8002c60:	60bb      	str	r3, [r7, #8]
 8002c62:	60fa      	str	r2, [r7, #12]
 8002c64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c68:	f7fd fb12 	bl	8000290 <__aeabi_uldivmod>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	460b      	mov	r3, r1
 8002c70:	4613      	mov	r3, r2
 8002c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c74:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	0c1b      	lsrs	r3, r3, #16
 8002c7a:	f003 0303 	and.w	r3, r3, #3
 8002c7e:	3301      	adds	r3, #1
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002c84:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c8c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c8e:	e002      	b.n	8002c96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c90:	4b05      	ldr	r3, [pc, #20]	@ (8002ca8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c92:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3740      	adds	r7, #64	@ 0x40
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	00f42400 	.word	0x00f42400
 8002cac:	017d7840 	.word	0x017d7840

08002cb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cb4:	4b03      	ldr	r3, [pc, #12]	@ (8002cc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	20000004 	.word	0x20000004

08002cc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ccc:	f7ff fff0 	bl	8002cb0 <HAL_RCC_GetHCLKFreq>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	4b05      	ldr	r3, [pc, #20]	@ (8002ce8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	0a9b      	lsrs	r3, r3, #10
 8002cd8:	f003 0307 	and.w	r3, r3, #7
 8002cdc:	4903      	ldr	r1, [pc, #12]	@ (8002cec <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cde:	5ccb      	ldrb	r3, [r1, r3]
 8002ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	40023800 	.word	0x40023800
 8002cec:	08005dd4 	.word	0x08005dd4

08002cf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002cf4:	f7ff ffdc 	bl	8002cb0 <HAL_RCC_GetHCLKFreq>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	4b05      	ldr	r3, [pc, #20]	@ (8002d10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	0b5b      	lsrs	r3, r3, #13
 8002d00:	f003 0307 	and.w	r3, r3, #7
 8002d04:	4903      	ldr	r1, [pc, #12]	@ (8002d14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d06:	5ccb      	ldrb	r3, [r1, r3]
 8002d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	40023800 	.word	0x40023800
 8002d14:	08005dd4 	.word	0x08005dd4

08002d18 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d101      	bne.n	8002d2a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e041      	b.n	8002dae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d106      	bne.n	8002d44 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7fe f990 	bl	8001064 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2202      	movs	r2, #2
 8002d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	3304      	adds	r3, #4
 8002d54:	4619      	mov	r1, r3
 8002d56:	4610      	mov	r0, r2
 8002d58:	f000 f9a0 	bl	800309c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
	...

08002db8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d109      	bne.n	8002ddc <HAL_TIM_PWM_Start+0x24>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	bf14      	ite	ne
 8002dd4:	2301      	movne	r3, #1
 8002dd6:	2300      	moveq	r3, #0
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	e022      	b.n	8002e22 <HAL_TIM_PWM_Start+0x6a>
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	2b04      	cmp	r3, #4
 8002de0:	d109      	bne.n	8002df6 <HAL_TIM_PWM_Start+0x3e>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	bf14      	ite	ne
 8002dee:	2301      	movne	r3, #1
 8002df0:	2300      	moveq	r3, #0
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	e015      	b.n	8002e22 <HAL_TIM_PWM_Start+0x6a>
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d109      	bne.n	8002e10 <HAL_TIM_PWM_Start+0x58>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	bf14      	ite	ne
 8002e08:	2301      	movne	r3, #1
 8002e0a:	2300      	moveq	r3, #0
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	e008      	b.n	8002e22 <HAL_TIM_PWM_Start+0x6a>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	bf14      	ite	ne
 8002e1c:	2301      	movne	r3, #1
 8002e1e:	2300      	moveq	r3, #0
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e068      	b.n	8002efc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d104      	bne.n	8002e3a <HAL_TIM_PWM_Start+0x82>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2202      	movs	r2, #2
 8002e34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e38:	e013      	b.n	8002e62 <HAL_TIM_PWM_Start+0xaa>
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	2b04      	cmp	r3, #4
 8002e3e:	d104      	bne.n	8002e4a <HAL_TIM_PWM_Start+0x92>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2202      	movs	r2, #2
 8002e44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e48:	e00b      	b.n	8002e62 <HAL_TIM_PWM_Start+0xaa>
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	2b08      	cmp	r3, #8
 8002e4e:	d104      	bne.n	8002e5a <HAL_TIM_PWM_Start+0xa2>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2202      	movs	r2, #2
 8002e54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e58:	e003      	b.n	8002e62 <HAL_TIM_PWM_Start+0xaa>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2202      	movs	r2, #2
 8002e5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2201      	movs	r2, #1
 8002e68:	6839      	ldr	r1, [r7, #0]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f000 fb2e 	bl	80034cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a23      	ldr	r2, [pc, #140]	@ (8002f04 <HAL_TIM_PWM_Start+0x14c>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d107      	bne.n	8002e8a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e88:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a1d      	ldr	r2, [pc, #116]	@ (8002f04 <HAL_TIM_PWM_Start+0x14c>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d018      	beq.n	8002ec6 <HAL_TIM_PWM_Start+0x10e>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e9c:	d013      	beq.n	8002ec6 <HAL_TIM_PWM_Start+0x10e>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a19      	ldr	r2, [pc, #100]	@ (8002f08 <HAL_TIM_PWM_Start+0x150>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d00e      	beq.n	8002ec6 <HAL_TIM_PWM_Start+0x10e>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a17      	ldr	r2, [pc, #92]	@ (8002f0c <HAL_TIM_PWM_Start+0x154>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d009      	beq.n	8002ec6 <HAL_TIM_PWM_Start+0x10e>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a16      	ldr	r2, [pc, #88]	@ (8002f10 <HAL_TIM_PWM_Start+0x158>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d004      	beq.n	8002ec6 <HAL_TIM_PWM_Start+0x10e>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a14      	ldr	r2, [pc, #80]	@ (8002f14 <HAL_TIM_PWM_Start+0x15c>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d111      	bne.n	8002eea <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f003 0307 	and.w	r3, r3, #7
 8002ed0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2b06      	cmp	r3, #6
 8002ed6:	d010      	beq.n	8002efa <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 0201 	orr.w	r2, r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ee8:	e007      	b.n	8002efa <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f042 0201 	orr.w	r2, r2, #1
 8002ef8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	40010000 	.word	0x40010000
 8002f08:	40000400 	.word	0x40000400
 8002f0c:	40000800 	.word	0x40000800
 8002f10:	40000c00 	.word	0x40000c00
 8002f14:	40014000 	.word	0x40014000

08002f18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f24:	2300      	movs	r3, #0
 8002f26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d101      	bne.n	8002f36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f32:	2302      	movs	r3, #2
 8002f34:	e0ae      	b.n	8003094 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2b0c      	cmp	r3, #12
 8002f42:	f200 809f 	bhi.w	8003084 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002f46:	a201      	add	r2, pc, #4	@ (adr r2, 8002f4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f4c:	08002f81 	.word	0x08002f81
 8002f50:	08003085 	.word	0x08003085
 8002f54:	08003085 	.word	0x08003085
 8002f58:	08003085 	.word	0x08003085
 8002f5c:	08002fc1 	.word	0x08002fc1
 8002f60:	08003085 	.word	0x08003085
 8002f64:	08003085 	.word	0x08003085
 8002f68:	08003085 	.word	0x08003085
 8002f6c:	08003003 	.word	0x08003003
 8002f70:	08003085 	.word	0x08003085
 8002f74:	08003085 	.word	0x08003085
 8002f78:	08003085 	.word	0x08003085
 8002f7c:	08003043 	.word	0x08003043
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68b9      	ldr	r1, [r7, #8]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f000 f914 	bl	80031b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	699a      	ldr	r2, [r3, #24]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f042 0208 	orr.w	r2, r2, #8
 8002f9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	699a      	ldr	r2, [r3, #24]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 0204 	bic.w	r2, r2, #4
 8002faa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	6999      	ldr	r1, [r3, #24]
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	691a      	ldr	r2, [r3, #16]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	619a      	str	r2, [r3, #24]
      break;
 8002fbe:	e064      	b.n	800308a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68b9      	ldr	r1, [r7, #8]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f000 f95a 	bl	8003280 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	699a      	ldr	r2, [r3, #24]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	699a      	ldr	r2, [r3, #24]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6999      	ldr	r1, [r3, #24]
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	021a      	lsls	r2, r3, #8
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	619a      	str	r2, [r3, #24]
      break;
 8003000:	e043      	b.n	800308a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68b9      	ldr	r1, [r7, #8]
 8003008:	4618      	mov	r0, r3
 800300a:	f000 f9a5 	bl	8003358 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	69da      	ldr	r2, [r3, #28]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f042 0208 	orr.w	r2, r2, #8
 800301c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	69da      	ldr	r2, [r3, #28]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 0204 	bic.w	r2, r2, #4
 800302c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	69d9      	ldr	r1, [r3, #28]
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	691a      	ldr	r2, [r3, #16]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	430a      	orrs	r2, r1
 800303e:	61da      	str	r2, [r3, #28]
      break;
 8003040:	e023      	b.n	800308a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68b9      	ldr	r1, [r7, #8]
 8003048:	4618      	mov	r0, r3
 800304a:	f000 f9ef 	bl	800342c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	69da      	ldr	r2, [r3, #28]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800305c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	69da      	ldr	r2, [r3, #28]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800306c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	69d9      	ldr	r1, [r3, #28]
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	021a      	lsls	r2, r3, #8
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	430a      	orrs	r2, r1
 8003080:	61da      	str	r2, [r3, #28]
      break;
 8003082:	e002      	b.n	800308a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	75fb      	strb	r3, [r7, #23]
      break;
 8003088:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003092:	7dfb      	ldrb	r3, [r7, #23]
}
 8003094:	4618      	mov	r0, r3
 8003096:	3718      	adds	r7, #24
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a3a      	ldr	r2, [pc, #232]	@ (8003198 <TIM_Base_SetConfig+0xfc>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d00f      	beq.n	80030d4 <TIM_Base_SetConfig+0x38>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030ba:	d00b      	beq.n	80030d4 <TIM_Base_SetConfig+0x38>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a37      	ldr	r2, [pc, #220]	@ (800319c <TIM_Base_SetConfig+0x100>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d007      	beq.n	80030d4 <TIM_Base_SetConfig+0x38>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a36      	ldr	r2, [pc, #216]	@ (80031a0 <TIM_Base_SetConfig+0x104>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d003      	beq.n	80030d4 <TIM_Base_SetConfig+0x38>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a35      	ldr	r2, [pc, #212]	@ (80031a4 <TIM_Base_SetConfig+0x108>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d108      	bne.n	80030e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a2b      	ldr	r2, [pc, #172]	@ (8003198 <TIM_Base_SetConfig+0xfc>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d01b      	beq.n	8003126 <TIM_Base_SetConfig+0x8a>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030f4:	d017      	beq.n	8003126 <TIM_Base_SetConfig+0x8a>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a28      	ldr	r2, [pc, #160]	@ (800319c <TIM_Base_SetConfig+0x100>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d013      	beq.n	8003126 <TIM_Base_SetConfig+0x8a>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a27      	ldr	r2, [pc, #156]	@ (80031a0 <TIM_Base_SetConfig+0x104>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d00f      	beq.n	8003126 <TIM_Base_SetConfig+0x8a>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a26      	ldr	r2, [pc, #152]	@ (80031a4 <TIM_Base_SetConfig+0x108>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d00b      	beq.n	8003126 <TIM_Base_SetConfig+0x8a>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a25      	ldr	r2, [pc, #148]	@ (80031a8 <TIM_Base_SetConfig+0x10c>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d007      	beq.n	8003126 <TIM_Base_SetConfig+0x8a>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a24      	ldr	r2, [pc, #144]	@ (80031ac <TIM_Base_SetConfig+0x110>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d003      	beq.n	8003126 <TIM_Base_SetConfig+0x8a>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a23      	ldr	r2, [pc, #140]	@ (80031b0 <TIM_Base_SetConfig+0x114>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d108      	bne.n	8003138 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800312c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	4313      	orrs	r3, r2
 8003136:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	4313      	orrs	r3, r2
 8003144:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a0e      	ldr	r2, [pc, #56]	@ (8003198 <TIM_Base_SetConfig+0xfc>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d103      	bne.n	800316c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	691a      	ldr	r2, [r3, #16]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	2b01      	cmp	r3, #1
 800317c:	d105      	bne.n	800318a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	f023 0201 	bic.w	r2, r3, #1
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	611a      	str	r2, [r3, #16]
  }
}
 800318a:	bf00      	nop
 800318c:	3714      	adds	r7, #20
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	40010000 	.word	0x40010000
 800319c:	40000400 	.word	0x40000400
 80031a0:	40000800 	.word	0x40000800
 80031a4:	40000c00 	.word	0x40000c00
 80031a8:	40014000 	.word	0x40014000
 80031ac:	40014400 	.word	0x40014400
 80031b0:	40014800 	.word	0x40014800

080031b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b087      	sub	sp, #28
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a1b      	ldr	r3, [r3, #32]
 80031c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	f023 0201 	bic.w	r2, r3, #1
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f023 0303 	bic.w	r3, r3, #3
 80031ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	f023 0302 	bic.w	r3, r3, #2
 80031fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	4313      	orrs	r3, r2
 8003206:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a1c      	ldr	r2, [pc, #112]	@ (800327c <TIM_OC1_SetConfig+0xc8>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d10c      	bne.n	800322a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	f023 0308 	bic.w	r3, r3, #8
 8003216:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	697a      	ldr	r2, [r7, #20]
 800321e:	4313      	orrs	r3, r2
 8003220:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	f023 0304 	bic.w	r3, r3, #4
 8003228:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a13      	ldr	r2, [pc, #76]	@ (800327c <TIM_OC1_SetConfig+0xc8>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d111      	bne.n	8003256 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003238:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003240:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	4313      	orrs	r3, r2
 800324a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	4313      	orrs	r3, r2
 8003254:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	621a      	str	r2, [r3, #32]
}
 8003270:	bf00      	nop
 8003272:	371c      	adds	r7, #28
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr
 800327c:	40010000 	.word	0x40010000

08003280 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003280:	b480      	push	{r7}
 8003282:	b087      	sub	sp, #28
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a1b      	ldr	r3, [r3, #32]
 8003294:	f023 0210 	bic.w	r2, r3, #16
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80032ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	021b      	lsls	r3, r3, #8
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	f023 0320 	bic.w	r3, r3, #32
 80032ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	011b      	lsls	r3, r3, #4
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a1e      	ldr	r2, [pc, #120]	@ (8003354 <TIM_OC2_SetConfig+0xd4>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d10d      	bne.n	80032fc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	011b      	lsls	r3, r3, #4
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a15      	ldr	r2, [pc, #84]	@ (8003354 <TIM_OC2_SetConfig+0xd4>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d113      	bne.n	800332c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800330a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003312:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	4313      	orrs	r3, r2
 800331e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	4313      	orrs	r3, r2
 800332a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685a      	ldr	r2, [r3, #4]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	621a      	str	r2, [r3, #32]
}
 8003346:	bf00      	nop
 8003348:	371c      	adds	r7, #28
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	40010000 	.word	0x40010000

08003358 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003358:	b480      	push	{r7}
 800335a:	b087      	sub	sp, #28
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a1b      	ldr	r3, [r3, #32]
 800336c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f023 0303 	bic.w	r3, r3, #3
 800338e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	4313      	orrs	r3, r2
 8003398:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80033a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	021b      	lsls	r3, r3, #8
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a1d      	ldr	r2, [pc, #116]	@ (8003428 <TIM_OC3_SetConfig+0xd0>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d10d      	bne.n	80033d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80033bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	021b      	lsls	r3, r3, #8
 80033c4:	697a      	ldr	r2, [r7, #20]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80033d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a14      	ldr	r2, [pc, #80]	@ (8003428 <TIM_OC3_SetConfig+0xd0>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d113      	bne.n	8003402 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80033e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80033e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	011b      	lsls	r3, r3, #4
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	011b      	lsls	r3, r3, #4
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	4313      	orrs	r3, r2
 8003400:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685a      	ldr	r2, [r3, #4]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	697a      	ldr	r2, [r7, #20]
 800341a:	621a      	str	r2, [r3, #32]
}
 800341c:	bf00      	nop
 800341e:	371c      	adds	r7, #28
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr
 8003428:	40010000 	.word	0x40010000

0800342c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800342c:	b480      	push	{r7}
 800342e:	b087      	sub	sp, #28
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a1b      	ldr	r3, [r3, #32]
 8003440:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800345a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003462:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	021b      	lsls	r3, r3, #8
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	4313      	orrs	r3, r2
 800346e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003476:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	031b      	lsls	r3, r3, #12
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	4313      	orrs	r3, r2
 8003482:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a10      	ldr	r2, [pc, #64]	@ (80034c8 <TIM_OC4_SetConfig+0x9c>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d109      	bne.n	80034a0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003492:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	019b      	lsls	r3, r3, #6
 800349a:	697a      	ldr	r2, [r7, #20]
 800349c:	4313      	orrs	r3, r2
 800349e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	621a      	str	r2, [r3, #32]
}
 80034ba:	bf00      	nop
 80034bc:	371c      	adds	r7, #28
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	40010000 	.word	0x40010000

080034cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b087      	sub	sp, #28
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	f003 031f 	and.w	r3, r3, #31
 80034de:	2201      	movs	r2, #1
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6a1a      	ldr	r2, [r3, #32]
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	43db      	mvns	r3, r3
 80034ee:	401a      	ands	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6a1a      	ldr	r2, [r3, #32]
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	f003 031f 	and.w	r3, r3, #31
 80034fe:	6879      	ldr	r1, [r7, #4]
 8003500:	fa01 f303 	lsl.w	r3, r1, r3
 8003504:	431a      	orrs	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	621a      	str	r2, [r3, #32]
}
 800350a:	bf00      	nop
 800350c:	371c      	adds	r7, #28
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
	...

08003518 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003518:	b480      	push	{r7}
 800351a:	b085      	sub	sp, #20
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003528:	2b01      	cmp	r3, #1
 800352a:	d101      	bne.n	8003530 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800352c:	2302      	movs	r3, #2
 800352e:	e050      	b.n	80035d2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2202      	movs	r2, #2
 800353c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003556:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	4313      	orrs	r3, r2
 8003560:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a1c      	ldr	r2, [pc, #112]	@ (80035e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d018      	beq.n	80035a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800357c:	d013      	beq.n	80035a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a18      	ldr	r2, [pc, #96]	@ (80035e4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d00e      	beq.n	80035a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a16      	ldr	r2, [pc, #88]	@ (80035e8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d009      	beq.n	80035a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a15      	ldr	r2, [pc, #84]	@ (80035ec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d004      	beq.n	80035a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a13      	ldr	r2, [pc, #76]	@ (80035f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d10c      	bne.n	80035c0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	68ba      	ldr	r2, [r7, #8]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68ba      	ldr	r2, [r7, #8]
 80035be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3714      	adds	r7, #20
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	40010000 	.word	0x40010000
 80035e4:	40000400 	.word	0x40000400
 80035e8:	40000800 	.word	0x40000800
 80035ec:	40000c00 	.word	0x40000c00
 80035f0:	40014000 	.word	0x40014000

080035f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e042      	b.n	800368c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d106      	bne.n	8003620 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f7fd fe14 	bl	8001248 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2224      	movs	r2, #36	@ 0x24
 8003624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68da      	ldr	r2, [r3, #12]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003636:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f000 fecd 	bl	80043d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	691a      	ldr	r2, [r3, #16]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800364c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	695a      	ldr	r2, [r3, #20]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800365c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68da      	ldr	r2, [r3, #12]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800366c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2220      	movs	r2, #32
 8003678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2220      	movs	r2, #32
 8003680:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3708      	adds	r7, #8
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	4613      	mov	r3, r2
 80036a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b20      	cmp	r3, #32
 80036ac:	d121      	bne.n	80036f2 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d002      	beq.n	80036ba <HAL_UART_Transmit_IT+0x26>
 80036b4:	88fb      	ldrh	r3, [r7, #6]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d101      	bne.n	80036be <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e01a      	b.n	80036f4 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	68ba      	ldr	r2, [r7, #8]
 80036c2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	88fa      	ldrh	r2, [r7, #6]
 80036c8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	88fa      	ldrh	r2, [r7, #6]
 80036ce:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2221      	movs	r2, #33	@ 0x21
 80036da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68da      	ldr	r2, [r3, #12]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80036ec:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80036ee:	2300      	movs	r3, #0
 80036f0:	e000      	b.n	80036f4 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80036f2:	2302      	movs	r3, #2
  }
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3714      	adds	r7, #20
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b08c      	sub	sp, #48	@ 0x30
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	4613      	mov	r3, r2
 800370c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b20      	cmp	r3, #32
 8003718:	d14a      	bne.n	80037b0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d002      	beq.n	8003726 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8003720:	88fb      	ldrh	r3, [r7, #6]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e043      	b.n	80037b2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2201      	movs	r2, #1
 800372e:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003736:	88fb      	ldrh	r3, [r7, #6]
 8003738:	461a      	mov	r2, r3
 800373a:	68b9      	ldr	r1, [r7, #8]
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f000 fbeb 	bl	8003f18 <UART_Start_Receive_DMA>
 8003742:	4603      	mov	r3, r0
 8003744:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003748:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800374c:	2b00      	cmp	r3, #0
 800374e:	d12c      	bne.n	80037aa <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003754:	2b01      	cmp	r3, #1
 8003756:	d125      	bne.n	80037a4 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003758:	2300      	movs	r3, #0
 800375a:	613b      	str	r3, [r7, #16]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	613b      	str	r3, [r7, #16]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	613b      	str	r3, [r7, #16]
 800376c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	330c      	adds	r3, #12
 8003774:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	e853 3f00 	ldrex	r3, [r3]
 800377c:	617b      	str	r3, [r7, #20]
   return(result);
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	f043 0310 	orr.w	r3, r3, #16
 8003784:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	330c      	adds	r3, #12
 800378c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800378e:	627a      	str	r2, [r7, #36]	@ 0x24
 8003790:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003792:	6a39      	ldr	r1, [r7, #32]
 8003794:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003796:	e841 2300 	strex	r3, r2, [r1]
 800379a:	61fb      	str	r3, [r7, #28]
   return(result);
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1e5      	bne.n	800376e <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 80037a2:	e002      	b.n	80037aa <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80037aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80037ae:	e000      	b.n	80037b2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80037b0:	2302      	movs	r3, #2
  }
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3730      	adds	r7, #48	@ 0x30
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
	...

080037bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b0ba      	sub	sp, #232	@ 0xe8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80037e2:	2300      	movs	r3, #0
 80037e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80037e8:	2300      	movs	r3, #0
 80037ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80037ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037f2:	f003 030f 	and.w	r3, r3, #15
 80037f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80037fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10f      	bne.n	8003822 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003806:	f003 0320 	and.w	r3, r3, #32
 800380a:	2b00      	cmp	r3, #0
 800380c:	d009      	beq.n	8003822 <HAL_UART_IRQHandler+0x66>
 800380e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003812:	f003 0320 	and.w	r3, r3, #32
 8003816:	2b00      	cmp	r3, #0
 8003818:	d003      	beq.n	8003822 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 fd1d 	bl	800425a <UART_Receive_IT>
      return;
 8003820:	e25b      	b.n	8003cda <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003822:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003826:	2b00      	cmp	r3, #0
 8003828:	f000 80de 	beq.w	80039e8 <HAL_UART_IRQHandler+0x22c>
 800382c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	2b00      	cmp	r3, #0
 8003836:	d106      	bne.n	8003846 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800383c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003840:	2b00      	cmp	r3, #0
 8003842:	f000 80d1 	beq.w	80039e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00b      	beq.n	800386a <HAL_UART_IRQHandler+0xae>
 8003852:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003856:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800385a:	2b00      	cmp	r3, #0
 800385c:	d005      	beq.n	800386a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003862:	f043 0201 	orr.w	r2, r3, #1
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800386a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800386e:	f003 0304 	and.w	r3, r3, #4
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00b      	beq.n	800388e <HAL_UART_IRQHandler+0xd2>
 8003876:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b00      	cmp	r3, #0
 8003880:	d005      	beq.n	800388e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003886:	f043 0202 	orr.w	r2, r3, #2
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800388e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00b      	beq.n	80038b2 <HAL_UART_IRQHandler+0xf6>
 800389a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d005      	beq.n	80038b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038aa:	f043 0204 	orr.w	r2, r3, #4
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80038b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038b6:	f003 0308 	and.w	r3, r3, #8
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d011      	beq.n	80038e2 <HAL_UART_IRQHandler+0x126>
 80038be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038c2:	f003 0320 	and.w	r3, r3, #32
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d105      	bne.n	80038d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80038ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d005      	beq.n	80038e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038da:	f043 0208 	orr.w	r2, r3, #8
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f000 81f2 	beq.w	8003cd0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038f0:	f003 0320 	and.w	r3, r3, #32
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d008      	beq.n	800390a <HAL_UART_IRQHandler+0x14e>
 80038f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038fc:	f003 0320 	and.w	r3, r3, #32
 8003900:	2b00      	cmp	r3, #0
 8003902:	d002      	beq.n	800390a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 fca8 	bl	800425a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	695b      	ldr	r3, [r3, #20]
 8003910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003914:	2b40      	cmp	r3, #64	@ 0x40
 8003916:	bf0c      	ite	eq
 8003918:	2301      	moveq	r3, #1
 800391a:	2300      	movne	r3, #0
 800391c:	b2db      	uxtb	r3, r3
 800391e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003926:	f003 0308 	and.w	r3, r3, #8
 800392a:	2b00      	cmp	r3, #0
 800392c:	d103      	bne.n	8003936 <HAL_UART_IRQHandler+0x17a>
 800392e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003932:	2b00      	cmp	r3, #0
 8003934:	d04f      	beq.n	80039d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 fbb0 	bl	800409c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003946:	2b40      	cmp	r3, #64	@ 0x40
 8003948:	d141      	bne.n	80039ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	3314      	adds	r3, #20
 8003950:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003954:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003958:	e853 3f00 	ldrex	r3, [r3]
 800395c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003960:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003964:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003968:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	3314      	adds	r3, #20
 8003972:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003976:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800397a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800397e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003982:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003986:	e841 2300 	strex	r3, r2, [r1]
 800398a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800398e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d1d9      	bne.n	800394a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800399a:	2b00      	cmp	r3, #0
 800399c:	d013      	beq.n	80039c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039a2:	4a7e      	ldr	r2, [pc, #504]	@ (8003b9c <HAL_UART_IRQHandler+0x3e0>)
 80039a4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7fe f932 	bl	8001c14 <HAL_DMA_Abort_IT>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d016      	beq.n	80039e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80039c0:	4610      	mov	r0, r2
 80039c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039c4:	e00e      	b.n	80039e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 f99e 	bl	8003d08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039cc:	e00a      	b.n	80039e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 f99a 	bl	8003d08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039d4:	e006      	b.n	80039e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f996 	bl	8003d08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80039e2:	e175      	b.n	8003cd0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039e4:	bf00      	nop
    return;
 80039e6:	e173      	b.n	8003cd0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	f040 814f 	bne.w	8003c90 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80039f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039f6:	f003 0310 	and.w	r3, r3, #16
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f000 8148 	beq.w	8003c90 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003a00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a04:	f003 0310 	and.w	r3, r3, #16
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f000 8141 	beq.w	8003c90 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a0e:	2300      	movs	r3, #0
 8003a10:	60bb      	str	r3, [r7, #8]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	60bb      	str	r3, [r7, #8]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	60bb      	str	r3, [r7, #8]
 8003a22:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a2e:	2b40      	cmp	r3, #64	@ 0x40
 8003a30:	f040 80b6 	bne.w	8003ba0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f000 8145 	beq.w	8003cd4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003a4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a52:	429a      	cmp	r2, r3
 8003a54:	f080 813e 	bcs.w	8003cd4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a5e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a64:	69db      	ldr	r3, [r3, #28]
 8003a66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a6a:	f000 8088 	beq.w	8003b7e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	330c      	adds	r3, #12
 8003a74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a78:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a7c:	e853 3f00 	ldrex	r3, [r3]
 8003a80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003a84:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	330c      	adds	r3, #12
 8003a96:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003a9a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003a9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003aa6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003aaa:	e841 2300 	strex	r3, r2, [r1]
 8003aae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003ab2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1d9      	bne.n	8003a6e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	3314      	adds	r3, #20
 8003ac0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ac4:	e853 3f00 	ldrex	r3, [r3]
 8003ac8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003aca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003acc:	f023 0301 	bic.w	r3, r3, #1
 8003ad0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	3314      	adds	r3, #20
 8003ada:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003ade:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003ae2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003ae6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003aea:	e841 2300 	strex	r3, r2, [r1]
 8003aee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003af0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1e1      	bne.n	8003aba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	3314      	adds	r3, #20
 8003afc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003afe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b00:	e853 3f00 	ldrex	r3, [r3]
 8003b04:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003b06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	3314      	adds	r3, #20
 8003b16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003b1a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003b1c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b1e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003b20:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003b22:	e841 2300 	strex	r3, r2, [r1]
 8003b26:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003b28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1e3      	bne.n	8003af6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2220      	movs	r2, #32
 8003b32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	330c      	adds	r3, #12
 8003b42:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b46:	e853 3f00 	ldrex	r3, [r3]
 8003b4a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003b4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b4e:	f023 0310 	bic.w	r3, r3, #16
 8003b52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	330c      	adds	r3, #12
 8003b5c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003b60:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003b62:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b64:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b66:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b68:	e841 2300 	strex	r3, r2, [r1]
 8003b6c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003b6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1e3      	bne.n	8003b3c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7fd ffdb 	bl	8001b34 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2202      	movs	r2, #2
 8003b82:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	4619      	mov	r1, r3
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f7fc fcf3 	bl	8000580 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b9a:	e09b      	b.n	8003cd4 <HAL_UART_IRQHandler+0x518>
 8003b9c:	08004163 	.word	0x08004163
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f000 808e 	beq.w	8003cd8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003bbc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f000 8089 	beq.w	8003cd8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	330c      	adds	r3, #12
 8003bcc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bd0:	e853 3f00 	ldrex	r3, [r3]
 8003bd4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003bd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bd8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bdc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	330c      	adds	r3, #12
 8003be6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003bea:	647a      	str	r2, [r7, #68]	@ 0x44
 8003bec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003bf0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003bf2:	e841 2300 	strex	r3, r2, [r1]
 8003bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003bf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1e3      	bne.n	8003bc6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	3314      	adds	r3, #20
 8003c04:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c08:	e853 3f00 	ldrex	r3, [r3]
 8003c0c:	623b      	str	r3, [r7, #32]
   return(result);
 8003c0e:	6a3b      	ldr	r3, [r7, #32]
 8003c10:	f023 0301 	bic.w	r3, r3, #1
 8003c14:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	3314      	adds	r3, #20
 8003c1e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003c22:	633a      	str	r2, [r7, #48]	@ 0x30
 8003c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c2a:	e841 2300 	strex	r3, r2, [r1]
 8003c2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1e3      	bne.n	8003bfe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2220      	movs	r2, #32
 8003c3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	330c      	adds	r3, #12
 8003c4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	e853 3f00 	ldrex	r3, [r3]
 8003c52:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f023 0310 	bic.w	r3, r3, #16
 8003c5a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	330c      	adds	r3, #12
 8003c64:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003c68:	61fa      	str	r2, [r7, #28]
 8003c6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6c:	69b9      	ldr	r1, [r7, #24]
 8003c6e:	69fa      	ldr	r2, [r7, #28]
 8003c70:	e841 2300 	strex	r3, r2, [r1]
 8003c74:	617b      	str	r3, [r7, #20]
   return(result);
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1e3      	bne.n	8003c44 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2202      	movs	r2, #2
 8003c80:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c82:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003c86:	4619      	mov	r1, r3
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f7fc fc79 	bl	8000580 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c8e:	e023      	b.n	8003cd8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d009      	beq.n	8003cb0 <HAL_UART_IRQHandler+0x4f4>
 8003c9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ca0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d003      	beq.n	8003cb0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 fa6e 	bl	800418a <UART_Transmit_IT>
    return;
 8003cae:	e014      	b.n	8003cda <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003cb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00e      	beq.n	8003cda <HAL_UART_IRQHandler+0x51e>
 8003cbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d008      	beq.n	8003cda <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 faae 	bl	800422a <UART_EndTransmit_IT>
    return;
 8003cce:	e004      	b.n	8003cda <HAL_UART_IRQHandler+0x51e>
    return;
 8003cd0:	bf00      	nop
 8003cd2:	e002      	b.n	8003cda <HAL_UART_IRQHandler+0x51e>
      return;
 8003cd4:	bf00      	nop
 8003cd6:	e000      	b.n	8003cda <HAL_UART_IRQHandler+0x51e>
      return;
 8003cd8:	bf00      	nop
  }
}
 8003cda:	37e8      	adds	r7, #232	@ 0xe8
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b09c      	sub	sp, #112	@ 0x70
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d28:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d172      	bne.n	8003e1e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003d38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	330c      	adds	r3, #12
 8003d44:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d48:	e853 3f00 	ldrex	r3, [r3]
 8003d4c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003d4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	330c      	adds	r3, #12
 8003d5c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003d5e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003d60:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d62:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003d64:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003d66:	e841 2300 	strex	r3, r2, [r1]
 8003d6a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003d6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1e5      	bne.n	8003d3e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	3314      	adds	r3, #20
 8003d78:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d7c:	e853 3f00 	ldrex	r3, [r3]
 8003d80:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d84:	f023 0301 	bic.w	r3, r3, #1
 8003d88:	667b      	str	r3, [r7, #100]	@ 0x64
 8003d8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	3314      	adds	r3, #20
 8003d90:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003d92:	647a      	str	r2, [r7, #68]	@ 0x44
 8003d94:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d96:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d9a:	e841 2300 	strex	r3, r2, [r1]
 8003d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003da0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1e5      	bne.n	8003d72 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003da6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	3314      	adds	r3, #20
 8003dac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db0:	e853 3f00 	ldrex	r3, [r3]
 8003db4:	623b      	str	r3, [r7, #32]
   return(result);
 8003db6:	6a3b      	ldr	r3, [r7, #32]
 8003db8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003dbc:	663b      	str	r3, [r7, #96]	@ 0x60
 8003dbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	3314      	adds	r3, #20
 8003dc4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003dc6:	633a      	str	r2, [r7, #48]	@ 0x30
 8003dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003dcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dce:	e841 2300 	strex	r3, r2, [r1]
 8003dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1e5      	bne.n	8003da6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003dda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ddc:	2220      	movs	r2, #32
 8003dde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003de2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d119      	bne.n	8003e1e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	330c      	adds	r3, #12
 8003df0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	e853 3f00 	ldrex	r3, [r3]
 8003df8:	60fb      	str	r3, [r7, #12]
   return(result);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f023 0310 	bic.w	r3, r3, #16
 8003e00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	330c      	adds	r3, #12
 8003e08:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003e0a:	61fa      	str	r2, [r7, #28]
 8003e0c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0e:	69b9      	ldr	r1, [r7, #24]
 8003e10:	69fa      	ldr	r2, [r7, #28]
 8003e12:	e841 2300 	strex	r3, r2, [r1]
 8003e16:	617b      	str	r3, [r7, #20]
   return(result);
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1e5      	bne.n	8003dea <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e20:	2200      	movs	r2, #0
 8003e22:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d106      	bne.n	8003e3a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e2e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e30:	4619      	mov	r1, r3
 8003e32:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003e34:	f7fc fba4 	bl	8000580 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003e38:	e002      	b.n	8003e40 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003e3a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003e3c:	f7ff ff50 	bl	8003ce0 <HAL_UART_RxCpltCallback>
}
 8003e40:	bf00      	nop
 8003e42:	3770      	adds	r7, #112	@ 0x70
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e54:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d108      	bne.n	8003e76 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e68:	085b      	lsrs	r3, r3, #1
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	f7fc fb86 	bl	8000580 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003e74:	e002      	b.n	8003e7c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f7ff ff3c 	bl	8003cf4 <HAL_UART_RxHalfCpltCallback>
}
 8003e7c:	bf00      	nop
 8003e7e:	3710      	adds	r7, #16
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e94:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	695b      	ldr	r3, [r3, #20]
 8003e9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ea0:	2b80      	cmp	r3, #128	@ 0x80
 8003ea2:	bf0c      	ite	eq
 8003ea4:	2301      	moveq	r3, #1
 8003ea6:	2300      	movne	r3, #0
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	2b21      	cmp	r3, #33	@ 0x21
 8003eb6:	d108      	bne.n	8003eca <UART_DMAError+0x46>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d005      	beq.n	8003eca <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003ec4:	68b8      	ldr	r0, [r7, #8]
 8003ec6:	f000 f8c1 	bl	800404c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	695b      	ldr	r3, [r3, #20]
 8003ed0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ed4:	2b40      	cmp	r3, #64	@ 0x40
 8003ed6:	bf0c      	ite	eq
 8003ed8:	2301      	moveq	r3, #1
 8003eda:	2300      	movne	r3, #0
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	2b22      	cmp	r3, #34	@ 0x22
 8003eea:	d108      	bne.n	8003efe <UART_DMAError+0x7a>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d005      	beq.n	8003efe <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8003ef8:	68b8      	ldr	r0, [r7, #8]
 8003efa:	f000 f8cf 	bl	800409c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f02:	f043 0210 	orr.w	r2, r3, #16
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f0a:	68b8      	ldr	r0, [r7, #8]
 8003f0c:	f7ff fefc 	bl	8003d08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f10:	bf00      	nop
 8003f12:	3710      	adds	r7, #16
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b098      	sub	sp, #96	@ 0x60
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	4613      	mov	r3, r2
 8003f24:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003f26:	68ba      	ldr	r2, [r7, #8]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	88fa      	ldrh	r2, [r7, #6]
 8003f30:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2222      	movs	r2, #34	@ 0x22
 8003f3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f44:	4a3e      	ldr	r2, [pc, #248]	@ (8004040 <UART_Start_Receive_DMA+0x128>)
 8003f46:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f4c:	4a3d      	ldr	r2, [pc, #244]	@ (8004044 <UART_Start_Receive_DMA+0x12c>)
 8003f4e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f54:	4a3c      	ldr	r2, [pc, #240]	@ (8004048 <UART_Start_Receive_DMA+0x130>)
 8003f56:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003f60:	f107 0308 	add.w	r3, r7, #8
 8003f64:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	3304      	adds	r3, #4
 8003f70:	4619      	mov	r1, r3
 8003f72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	88fb      	ldrh	r3, [r7, #6]
 8003f78:	f7fd fd84 	bl	8001a84 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	613b      	str	r3, [r7, #16]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	613b      	str	r3, [r7, #16]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	613b      	str	r3, [r7, #16]
 8003f90:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d019      	beq.n	8003fce <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	330c      	adds	r3, #12
 8003fa0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fa4:	e853 3f00 	ldrex	r3, [r3]
 8003fa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003faa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fb0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	330c      	adds	r3, #12
 8003fb8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003fba:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003fbc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fbe:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003fc0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003fc2:	e841 2300 	strex	r3, r2, [r1]
 8003fc6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003fc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1e5      	bne.n	8003f9a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	3314      	adds	r3, #20
 8003fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fd8:	e853 3f00 	ldrex	r3, [r3]
 8003fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fe0:	f043 0301 	orr.w	r3, r3, #1
 8003fe4:	657b      	str	r3, [r7, #84]	@ 0x54
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	3314      	adds	r3, #20
 8003fec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003fee:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003ff0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003ff4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003ff6:	e841 2300 	strex	r3, r2, [r1]
 8003ffa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1e5      	bne.n	8003fce <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	3314      	adds	r3, #20
 8004008:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	e853 3f00 	ldrex	r3, [r3]
 8004010:	617b      	str	r3, [r7, #20]
   return(result);
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004018:	653b      	str	r3, [r7, #80]	@ 0x50
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	3314      	adds	r3, #20
 8004020:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004022:	627a      	str	r2, [r7, #36]	@ 0x24
 8004024:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004026:	6a39      	ldr	r1, [r7, #32]
 8004028:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800402a:	e841 2300 	strex	r3, r2, [r1]
 800402e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1e5      	bne.n	8004002 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3760      	adds	r7, #96	@ 0x60
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	08003d1d 	.word	0x08003d1d
 8004044:	08003e49 	.word	0x08003e49
 8004048:	08003e85 	.word	0x08003e85

0800404c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800404c:	b480      	push	{r7}
 800404e:	b089      	sub	sp, #36	@ 0x24
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	330c      	adds	r3, #12
 800405a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	e853 3f00 	ldrex	r3, [r3]
 8004062:	60bb      	str	r3, [r7, #8]
   return(result);
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800406a:	61fb      	str	r3, [r7, #28]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	330c      	adds	r3, #12
 8004072:	69fa      	ldr	r2, [r7, #28]
 8004074:	61ba      	str	r2, [r7, #24]
 8004076:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004078:	6979      	ldr	r1, [r7, #20]
 800407a:	69ba      	ldr	r2, [r7, #24]
 800407c:	e841 2300 	strex	r3, r2, [r1]
 8004080:	613b      	str	r3, [r7, #16]
   return(result);
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1e5      	bne.n	8004054 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2220      	movs	r2, #32
 800408c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004090:	bf00      	nop
 8004092:	3724      	adds	r7, #36	@ 0x24
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800409c:	b480      	push	{r7}
 800409e:	b095      	sub	sp, #84	@ 0x54
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	330c      	adds	r3, #12
 80040aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040ae:	e853 3f00 	ldrex	r3, [r3]
 80040b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80040b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	330c      	adds	r3, #12
 80040c2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80040c4:	643a      	str	r2, [r7, #64]	@ 0x40
 80040c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80040ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80040cc:	e841 2300 	strex	r3, r2, [r1]
 80040d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80040d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d1e5      	bne.n	80040a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	3314      	adds	r3, #20
 80040de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e0:	6a3b      	ldr	r3, [r7, #32]
 80040e2:	e853 3f00 	ldrex	r3, [r3]
 80040e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	f023 0301 	bic.w	r3, r3, #1
 80040ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	3314      	adds	r3, #20
 80040f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004100:	e841 2300 	strex	r3, r2, [r1]
 8004104:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004108:	2b00      	cmp	r3, #0
 800410a:	d1e5      	bne.n	80040d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004110:	2b01      	cmp	r3, #1
 8004112:	d119      	bne.n	8004148 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	330c      	adds	r3, #12
 800411a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	e853 3f00 	ldrex	r3, [r3]
 8004122:	60bb      	str	r3, [r7, #8]
   return(result);
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	f023 0310 	bic.w	r3, r3, #16
 800412a:	647b      	str	r3, [r7, #68]	@ 0x44
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	330c      	adds	r3, #12
 8004132:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004134:	61ba      	str	r2, [r7, #24]
 8004136:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004138:	6979      	ldr	r1, [r7, #20]
 800413a:	69ba      	ldr	r2, [r7, #24]
 800413c:	e841 2300 	strex	r3, r2, [r1]
 8004140:	613b      	str	r3, [r7, #16]
   return(result);
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1e5      	bne.n	8004114 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2220      	movs	r2, #32
 800414c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004156:	bf00      	nop
 8004158:	3754      	adds	r7, #84	@ 0x54
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr

08004162 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b084      	sub	sp, #16
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800416e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800417c:	68f8      	ldr	r0, [r7, #12]
 800417e:	f7ff fdc3 	bl	8003d08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004182:	bf00      	nop
 8004184:	3710      	adds	r7, #16
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800418a:	b480      	push	{r7}
 800418c:	b085      	sub	sp, #20
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b21      	cmp	r3, #33	@ 0x21
 800419c:	d13e      	bne.n	800421c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041a6:	d114      	bne.n	80041d2 <UART_Transmit_IT+0x48>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d110      	bne.n	80041d2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a1b      	ldr	r3, [r3, #32]
 80041b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	881b      	ldrh	r3, [r3, #0]
 80041ba:	461a      	mov	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	1c9a      	adds	r2, r3, #2
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	621a      	str	r2, [r3, #32]
 80041d0:	e008      	b.n	80041e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	1c59      	adds	r1, r3, #1
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	6211      	str	r1, [r2, #32]
 80041dc:	781a      	ldrb	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	3b01      	subs	r3, #1
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	4619      	mov	r1, r3
 80041f2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d10f      	bne.n	8004218 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68da      	ldr	r2, [r3, #12]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004206:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68da      	ldr	r2, [r3, #12]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004216:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004218:	2300      	movs	r3, #0
 800421a:	e000      	b.n	800421e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800421c:	2302      	movs	r3, #2
  }
}
 800421e:	4618      	mov	r0, r3
 8004220:	3714      	adds	r7, #20
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr

0800422a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800422a:	b580      	push	{r7, lr}
 800422c:	b082      	sub	sp, #8
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68da      	ldr	r2, [r3, #12]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004240:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2220      	movs	r2, #32
 8004246:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f7fc fa2e 	bl	80006ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3708      	adds	r7, #8
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b08c      	sub	sp, #48	@ 0x30
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b22      	cmp	r3, #34	@ 0x22
 800426c:	f040 80ae 	bne.w	80043cc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004278:	d117      	bne.n	80042aa <UART_Receive_IT+0x50>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d113      	bne.n	80042aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004282:	2300      	movs	r3, #0
 8004284:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800428a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	b29b      	uxth	r3, r3
 8004294:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004298:	b29a      	uxth	r2, r3
 800429a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800429c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a2:	1c9a      	adds	r2, r3, #2
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	629a      	str	r2, [r3, #40]	@ 0x28
 80042a8:	e026      	b.n	80042f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80042b0:	2300      	movs	r3, #0
 80042b2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042bc:	d007      	beq.n	80042ce <UART_Receive_IT+0x74>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d10a      	bne.n	80042dc <UART_Receive_IT+0x82>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d106      	bne.n	80042dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	b2da      	uxtb	r2, r3
 80042d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042d8:	701a      	strb	r2, [r3, #0]
 80042da:	e008      	b.n	80042ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042e8:	b2da      	uxtb	r2, r3
 80042ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042f2:	1c5a      	adds	r2, r3, #1
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	3b01      	subs	r3, #1
 8004300:	b29b      	uxth	r3, r3
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	4619      	mov	r1, r3
 8004306:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004308:	2b00      	cmp	r3, #0
 800430a:	d15d      	bne.n	80043c8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68da      	ldr	r2, [r3, #12]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f022 0220 	bic.w	r2, r2, #32
 800431a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68da      	ldr	r2, [r3, #12]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800432a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	695a      	ldr	r2, [r3, #20]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f022 0201 	bic.w	r2, r2, #1
 800433a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2220      	movs	r2, #32
 8004340:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800434e:	2b01      	cmp	r3, #1
 8004350:	d135      	bne.n	80043be <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	330c      	adds	r3, #12
 800435e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	e853 3f00 	ldrex	r3, [r3]
 8004366:	613b      	str	r3, [r7, #16]
   return(result);
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	f023 0310 	bic.w	r3, r3, #16
 800436e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	330c      	adds	r3, #12
 8004376:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004378:	623a      	str	r2, [r7, #32]
 800437a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437c:	69f9      	ldr	r1, [r7, #28]
 800437e:	6a3a      	ldr	r2, [r7, #32]
 8004380:	e841 2300 	strex	r3, r2, [r1]
 8004384:	61bb      	str	r3, [r7, #24]
   return(result);
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1e5      	bne.n	8004358 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0310 	and.w	r3, r3, #16
 8004396:	2b10      	cmp	r3, #16
 8004398:	d10a      	bne.n	80043b0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800439a:	2300      	movs	r3, #0
 800439c:	60fb      	str	r3, [r7, #12]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	60fb      	str	r3, [r7, #12]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	60fb      	str	r3, [r7, #12]
 80043ae:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80043b4:	4619      	mov	r1, r3
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f7fc f8e2 	bl	8000580 <HAL_UARTEx_RxEventCallback>
 80043bc:	e002      	b.n	80043c4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f7ff fc8e 	bl	8003ce0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80043c4:	2300      	movs	r3, #0
 80043c6:	e002      	b.n	80043ce <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80043c8:	2300      	movs	r3, #0
 80043ca:	e000      	b.n	80043ce <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80043cc:	2302      	movs	r3, #2
  }
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3730      	adds	r7, #48	@ 0x30
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
	...

080043d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043dc:	b0c0      	sub	sp, #256	@ 0x100
 80043de:	af00      	add	r7, sp, #0
 80043e0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80043f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043f4:	68d9      	ldr	r1, [r3, #12]
 80043f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	ea40 0301 	orr.w	r3, r0, r1
 8004400:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004406:	689a      	ldr	r2, [r3, #8]
 8004408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	431a      	orrs	r2, r3
 8004410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	431a      	orrs	r2, r3
 8004418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	4313      	orrs	r3, r2
 8004420:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004430:	f021 010c 	bic.w	r1, r1, #12
 8004434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800443e:	430b      	orrs	r3, r1
 8004440:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800444e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004452:	6999      	ldr	r1, [r3, #24]
 8004454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	ea40 0301 	orr.w	r3, r0, r1
 800445e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	4b8f      	ldr	r3, [pc, #572]	@ (80046a4 <UART_SetConfig+0x2cc>)
 8004468:	429a      	cmp	r2, r3
 800446a:	d005      	beq.n	8004478 <UART_SetConfig+0xa0>
 800446c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	4b8d      	ldr	r3, [pc, #564]	@ (80046a8 <UART_SetConfig+0x2d0>)
 8004474:	429a      	cmp	r2, r3
 8004476:	d104      	bne.n	8004482 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004478:	f7fe fc3a 	bl	8002cf0 <HAL_RCC_GetPCLK2Freq>
 800447c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004480:	e003      	b.n	800448a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004482:	f7fe fc21 	bl	8002cc8 <HAL_RCC_GetPCLK1Freq>
 8004486:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800448a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800448e:	69db      	ldr	r3, [r3, #28]
 8004490:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004494:	f040 810c 	bne.w	80046b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004498:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800449c:	2200      	movs	r2, #0
 800449e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80044a2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80044a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80044aa:	4622      	mov	r2, r4
 80044ac:	462b      	mov	r3, r5
 80044ae:	1891      	adds	r1, r2, r2
 80044b0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80044b2:	415b      	adcs	r3, r3
 80044b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80044ba:	4621      	mov	r1, r4
 80044bc:	eb12 0801 	adds.w	r8, r2, r1
 80044c0:	4629      	mov	r1, r5
 80044c2:	eb43 0901 	adc.w	r9, r3, r1
 80044c6:	f04f 0200 	mov.w	r2, #0
 80044ca:	f04f 0300 	mov.w	r3, #0
 80044ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044da:	4690      	mov	r8, r2
 80044dc:	4699      	mov	r9, r3
 80044de:	4623      	mov	r3, r4
 80044e0:	eb18 0303 	adds.w	r3, r8, r3
 80044e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80044e8:	462b      	mov	r3, r5
 80044ea:	eb49 0303 	adc.w	r3, r9, r3
 80044ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80044f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80044fe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004502:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004506:	460b      	mov	r3, r1
 8004508:	18db      	adds	r3, r3, r3
 800450a:	653b      	str	r3, [r7, #80]	@ 0x50
 800450c:	4613      	mov	r3, r2
 800450e:	eb42 0303 	adc.w	r3, r2, r3
 8004512:	657b      	str	r3, [r7, #84]	@ 0x54
 8004514:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004518:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800451c:	f7fb feb8 	bl	8000290 <__aeabi_uldivmod>
 8004520:	4602      	mov	r2, r0
 8004522:	460b      	mov	r3, r1
 8004524:	4b61      	ldr	r3, [pc, #388]	@ (80046ac <UART_SetConfig+0x2d4>)
 8004526:	fba3 2302 	umull	r2, r3, r3, r2
 800452a:	095b      	lsrs	r3, r3, #5
 800452c:	011c      	lsls	r4, r3, #4
 800452e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004532:	2200      	movs	r2, #0
 8004534:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004538:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800453c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004540:	4642      	mov	r2, r8
 8004542:	464b      	mov	r3, r9
 8004544:	1891      	adds	r1, r2, r2
 8004546:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004548:	415b      	adcs	r3, r3
 800454a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800454c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004550:	4641      	mov	r1, r8
 8004552:	eb12 0a01 	adds.w	sl, r2, r1
 8004556:	4649      	mov	r1, r9
 8004558:	eb43 0b01 	adc.w	fp, r3, r1
 800455c:	f04f 0200 	mov.w	r2, #0
 8004560:	f04f 0300 	mov.w	r3, #0
 8004564:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004568:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800456c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004570:	4692      	mov	sl, r2
 8004572:	469b      	mov	fp, r3
 8004574:	4643      	mov	r3, r8
 8004576:	eb1a 0303 	adds.w	r3, sl, r3
 800457a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800457e:	464b      	mov	r3, r9
 8004580:	eb4b 0303 	adc.w	r3, fp, r3
 8004584:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004594:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004598:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800459c:	460b      	mov	r3, r1
 800459e:	18db      	adds	r3, r3, r3
 80045a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80045a2:	4613      	mov	r3, r2
 80045a4:	eb42 0303 	adc.w	r3, r2, r3
 80045a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80045aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80045ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80045b2:	f7fb fe6d 	bl	8000290 <__aeabi_uldivmod>
 80045b6:	4602      	mov	r2, r0
 80045b8:	460b      	mov	r3, r1
 80045ba:	4611      	mov	r1, r2
 80045bc:	4b3b      	ldr	r3, [pc, #236]	@ (80046ac <UART_SetConfig+0x2d4>)
 80045be:	fba3 2301 	umull	r2, r3, r3, r1
 80045c2:	095b      	lsrs	r3, r3, #5
 80045c4:	2264      	movs	r2, #100	@ 0x64
 80045c6:	fb02 f303 	mul.w	r3, r2, r3
 80045ca:	1acb      	subs	r3, r1, r3
 80045cc:	00db      	lsls	r3, r3, #3
 80045ce:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80045d2:	4b36      	ldr	r3, [pc, #216]	@ (80046ac <UART_SetConfig+0x2d4>)
 80045d4:	fba3 2302 	umull	r2, r3, r3, r2
 80045d8:	095b      	lsrs	r3, r3, #5
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80045e0:	441c      	add	r4, r3
 80045e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045e6:	2200      	movs	r2, #0
 80045e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80045ec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80045f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80045f4:	4642      	mov	r2, r8
 80045f6:	464b      	mov	r3, r9
 80045f8:	1891      	adds	r1, r2, r2
 80045fa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80045fc:	415b      	adcs	r3, r3
 80045fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004600:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004604:	4641      	mov	r1, r8
 8004606:	1851      	adds	r1, r2, r1
 8004608:	6339      	str	r1, [r7, #48]	@ 0x30
 800460a:	4649      	mov	r1, r9
 800460c:	414b      	adcs	r3, r1
 800460e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004610:	f04f 0200 	mov.w	r2, #0
 8004614:	f04f 0300 	mov.w	r3, #0
 8004618:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800461c:	4659      	mov	r1, fp
 800461e:	00cb      	lsls	r3, r1, #3
 8004620:	4651      	mov	r1, sl
 8004622:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004626:	4651      	mov	r1, sl
 8004628:	00ca      	lsls	r2, r1, #3
 800462a:	4610      	mov	r0, r2
 800462c:	4619      	mov	r1, r3
 800462e:	4603      	mov	r3, r0
 8004630:	4642      	mov	r2, r8
 8004632:	189b      	adds	r3, r3, r2
 8004634:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004638:	464b      	mov	r3, r9
 800463a:	460a      	mov	r2, r1
 800463c:	eb42 0303 	adc.w	r3, r2, r3
 8004640:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004650:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004654:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004658:	460b      	mov	r3, r1
 800465a:	18db      	adds	r3, r3, r3
 800465c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800465e:	4613      	mov	r3, r2
 8004660:	eb42 0303 	adc.w	r3, r2, r3
 8004664:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004666:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800466a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800466e:	f7fb fe0f 	bl	8000290 <__aeabi_uldivmod>
 8004672:	4602      	mov	r2, r0
 8004674:	460b      	mov	r3, r1
 8004676:	4b0d      	ldr	r3, [pc, #52]	@ (80046ac <UART_SetConfig+0x2d4>)
 8004678:	fba3 1302 	umull	r1, r3, r3, r2
 800467c:	095b      	lsrs	r3, r3, #5
 800467e:	2164      	movs	r1, #100	@ 0x64
 8004680:	fb01 f303 	mul.w	r3, r1, r3
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	00db      	lsls	r3, r3, #3
 8004688:	3332      	adds	r3, #50	@ 0x32
 800468a:	4a08      	ldr	r2, [pc, #32]	@ (80046ac <UART_SetConfig+0x2d4>)
 800468c:	fba2 2303 	umull	r2, r3, r2, r3
 8004690:	095b      	lsrs	r3, r3, #5
 8004692:	f003 0207 	and.w	r2, r3, #7
 8004696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4422      	add	r2, r4
 800469e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80046a0:	e106      	b.n	80048b0 <UART_SetConfig+0x4d8>
 80046a2:	bf00      	nop
 80046a4:	40011000 	.word	0x40011000
 80046a8:	40011400 	.word	0x40011400
 80046ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046b4:	2200      	movs	r2, #0
 80046b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80046ba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80046be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80046c2:	4642      	mov	r2, r8
 80046c4:	464b      	mov	r3, r9
 80046c6:	1891      	adds	r1, r2, r2
 80046c8:	6239      	str	r1, [r7, #32]
 80046ca:	415b      	adcs	r3, r3
 80046cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80046ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046d2:	4641      	mov	r1, r8
 80046d4:	1854      	adds	r4, r2, r1
 80046d6:	4649      	mov	r1, r9
 80046d8:	eb43 0501 	adc.w	r5, r3, r1
 80046dc:	f04f 0200 	mov.w	r2, #0
 80046e0:	f04f 0300 	mov.w	r3, #0
 80046e4:	00eb      	lsls	r3, r5, #3
 80046e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046ea:	00e2      	lsls	r2, r4, #3
 80046ec:	4614      	mov	r4, r2
 80046ee:	461d      	mov	r5, r3
 80046f0:	4643      	mov	r3, r8
 80046f2:	18e3      	adds	r3, r4, r3
 80046f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80046f8:	464b      	mov	r3, r9
 80046fa:	eb45 0303 	adc.w	r3, r5, r3
 80046fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800470e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004712:	f04f 0200 	mov.w	r2, #0
 8004716:	f04f 0300 	mov.w	r3, #0
 800471a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800471e:	4629      	mov	r1, r5
 8004720:	008b      	lsls	r3, r1, #2
 8004722:	4621      	mov	r1, r4
 8004724:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004728:	4621      	mov	r1, r4
 800472a:	008a      	lsls	r2, r1, #2
 800472c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004730:	f7fb fdae 	bl	8000290 <__aeabi_uldivmod>
 8004734:	4602      	mov	r2, r0
 8004736:	460b      	mov	r3, r1
 8004738:	4b60      	ldr	r3, [pc, #384]	@ (80048bc <UART_SetConfig+0x4e4>)
 800473a:	fba3 2302 	umull	r2, r3, r3, r2
 800473e:	095b      	lsrs	r3, r3, #5
 8004740:	011c      	lsls	r4, r3, #4
 8004742:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004746:	2200      	movs	r2, #0
 8004748:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800474c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004750:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004754:	4642      	mov	r2, r8
 8004756:	464b      	mov	r3, r9
 8004758:	1891      	adds	r1, r2, r2
 800475a:	61b9      	str	r1, [r7, #24]
 800475c:	415b      	adcs	r3, r3
 800475e:	61fb      	str	r3, [r7, #28]
 8004760:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004764:	4641      	mov	r1, r8
 8004766:	1851      	adds	r1, r2, r1
 8004768:	6139      	str	r1, [r7, #16]
 800476a:	4649      	mov	r1, r9
 800476c:	414b      	adcs	r3, r1
 800476e:	617b      	str	r3, [r7, #20]
 8004770:	f04f 0200 	mov.w	r2, #0
 8004774:	f04f 0300 	mov.w	r3, #0
 8004778:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800477c:	4659      	mov	r1, fp
 800477e:	00cb      	lsls	r3, r1, #3
 8004780:	4651      	mov	r1, sl
 8004782:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004786:	4651      	mov	r1, sl
 8004788:	00ca      	lsls	r2, r1, #3
 800478a:	4610      	mov	r0, r2
 800478c:	4619      	mov	r1, r3
 800478e:	4603      	mov	r3, r0
 8004790:	4642      	mov	r2, r8
 8004792:	189b      	adds	r3, r3, r2
 8004794:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004798:	464b      	mov	r3, r9
 800479a:	460a      	mov	r2, r1
 800479c:	eb42 0303 	adc.w	r3, r2, r3
 80047a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80047a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 80047ae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80047b0:	f04f 0200 	mov.w	r2, #0
 80047b4:	f04f 0300 	mov.w	r3, #0
 80047b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80047bc:	4649      	mov	r1, r9
 80047be:	008b      	lsls	r3, r1, #2
 80047c0:	4641      	mov	r1, r8
 80047c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047c6:	4641      	mov	r1, r8
 80047c8:	008a      	lsls	r2, r1, #2
 80047ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80047ce:	f7fb fd5f 	bl	8000290 <__aeabi_uldivmod>
 80047d2:	4602      	mov	r2, r0
 80047d4:	460b      	mov	r3, r1
 80047d6:	4611      	mov	r1, r2
 80047d8:	4b38      	ldr	r3, [pc, #224]	@ (80048bc <UART_SetConfig+0x4e4>)
 80047da:	fba3 2301 	umull	r2, r3, r3, r1
 80047de:	095b      	lsrs	r3, r3, #5
 80047e0:	2264      	movs	r2, #100	@ 0x64
 80047e2:	fb02 f303 	mul.w	r3, r2, r3
 80047e6:	1acb      	subs	r3, r1, r3
 80047e8:	011b      	lsls	r3, r3, #4
 80047ea:	3332      	adds	r3, #50	@ 0x32
 80047ec:	4a33      	ldr	r2, [pc, #204]	@ (80048bc <UART_SetConfig+0x4e4>)
 80047ee:	fba2 2303 	umull	r2, r3, r2, r3
 80047f2:	095b      	lsrs	r3, r3, #5
 80047f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047f8:	441c      	add	r4, r3
 80047fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047fe:	2200      	movs	r2, #0
 8004800:	673b      	str	r3, [r7, #112]	@ 0x70
 8004802:	677a      	str	r2, [r7, #116]	@ 0x74
 8004804:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004808:	4642      	mov	r2, r8
 800480a:	464b      	mov	r3, r9
 800480c:	1891      	adds	r1, r2, r2
 800480e:	60b9      	str	r1, [r7, #8]
 8004810:	415b      	adcs	r3, r3
 8004812:	60fb      	str	r3, [r7, #12]
 8004814:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004818:	4641      	mov	r1, r8
 800481a:	1851      	adds	r1, r2, r1
 800481c:	6039      	str	r1, [r7, #0]
 800481e:	4649      	mov	r1, r9
 8004820:	414b      	adcs	r3, r1
 8004822:	607b      	str	r3, [r7, #4]
 8004824:	f04f 0200 	mov.w	r2, #0
 8004828:	f04f 0300 	mov.w	r3, #0
 800482c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004830:	4659      	mov	r1, fp
 8004832:	00cb      	lsls	r3, r1, #3
 8004834:	4651      	mov	r1, sl
 8004836:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800483a:	4651      	mov	r1, sl
 800483c:	00ca      	lsls	r2, r1, #3
 800483e:	4610      	mov	r0, r2
 8004840:	4619      	mov	r1, r3
 8004842:	4603      	mov	r3, r0
 8004844:	4642      	mov	r2, r8
 8004846:	189b      	adds	r3, r3, r2
 8004848:	66bb      	str	r3, [r7, #104]	@ 0x68
 800484a:	464b      	mov	r3, r9
 800484c:	460a      	mov	r2, r1
 800484e:	eb42 0303 	adc.w	r3, r2, r3
 8004852:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	663b      	str	r3, [r7, #96]	@ 0x60
 800485e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004860:	f04f 0200 	mov.w	r2, #0
 8004864:	f04f 0300 	mov.w	r3, #0
 8004868:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800486c:	4649      	mov	r1, r9
 800486e:	008b      	lsls	r3, r1, #2
 8004870:	4641      	mov	r1, r8
 8004872:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004876:	4641      	mov	r1, r8
 8004878:	008a      	lsls	r2, r1, #2
 800487a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800487e:	f7fb fd07 	bl	8000290 <__aeabi_uldivmod>
 8004882:	4602      	mov	r2, r0
 8004884:	460b      	mov	r3, r1
 8004886:	4b0d      	ldr	r3, [pc, #52]	@ (80048bc <UART_SetConfig+0x4e4>)
 8004888:	fba3 1302 	umull	r1, r3, r3, r2
 800488c:	095b      	lsrs	r3, r3, #5
 800488e:	2164      	movs	r1, #100	@ 0x64
 8004890:	fb01 f303 	mul.w	r3, r1, r3
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	011b      	lsls	r3, r3, #4
 8004898:	3332      	adds	r3, #50	@ 0x32
 800489a:	4a08      	ldr	r2, [pc, #32]	@ (80048bc <UART_SetConfig+0x4e4>)
 800489c:	fba2 2303 	umull	r2, r3, r2, r3
 80048a0:	095b      	lsrs	r3, r3, #5
 80048a2:	f003 020f 	and.w	r2, r3, #15
 80048a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4422      	add	r2, r4
 80048ae:	609a      	str	r2, [r3, #8]
}
 80048b0:	bf00      	nop
 80048b2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80048b6:	46bd      	mov	sp, r7
 80048b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048bc:	51eb851f 	.word	0x51eb851f

080048c0 <atoi>:
 80048c0:	220a      	movs	r2, #10
 80048c2:	2100      	movs	r1, #0
 80048c4:	f000 b87a 	b.w	80049bc <strtol>

080048c8 <_strtol_l.constprop.0>:
 80048c8:	2b24      	cmp	r3, #36	@ 0x24
 80048ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048ce:	4686      	mov	lr, r0
 80048d0:	4690      	mov	r8, r2
 80048d2:	d801      	bhi.n	80048d8 <_strtol_l.constprop.0+0x10>
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d106      	bne.n	80048e6 <_strtol_l.constprop.0+0x1e>
 80048d8:	f000 fa4a 	bl	8004d70 <__errno>
 80048dc:	2316      	movs	r3, #22
 80048de:	6003      	str	r3, [r0, #0]
 80048e0:	2000      	movs	r0, #0
 80048e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048e6:	4834      	ldr	r0, [pc, #208]	@ (80049b8 <_strtol_l.constprop.0+0xf0>)
 80048e8:	460d      	mov	r5, r1
 80048ea:	462a      	mov	r2, r5
 80048ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80048f0:	5d06      	ldrb	r6, [r0, r4]
 80048f2:	f016 0608 	ands.w	r6, r6, #8
 80048f6:	d1f8      	bne.n	80048ea <_strtol_l.constprop.0+0x22>
 80048f8:	2c2d      	cmp	r4, #45	@ 0x2d
 80048fa:	d12d      	bne.n	8004958 <_strtol_l.constprop.0+0x90>
 80048fc:	782c      	ldrb	r4, [r5, #0]
 80048fe:	2601      	movs	r6, #1
 8004900:	1c95      	adds	r5, r2, #2
 8004902:	f033 0210 	bics.w	r2, r3, #16
 8004906:	d109      	bne.n	800491c <_strtol_l.constprop.0+0x54>
 8004908:	2c30      	cmp	r4, #48	@ 0x30
 800490a:	d12a      	bne.n	8004962 <_strtol_l.constprop.0+0x9a>
 800490c:	782a      	ldrb	r2, [r5, #0]
 800490e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004912:	2a58      	cmp	r2, #88	@ 0x58
 8004914:	d125      	bne.n	8004962 <_strtol_l.constprop.0+0x9a>
 8004916:	786c      	ldrb	r4, [r5, #1]
 8004918:	2310      	movs	r3, #16
 800491a:	3502      	adds	r5, #2
 800491c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8004920:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8004924:	2200      	movs	r2, #0
 8004926:	fbbc f9f3 	udiv	r9, ip, r3
 800492a:	4610      	mov	r0, r2
 800492c:	fb03 ca19 	mls	sl, r3, r9, ip
 8004930:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004934:	2f09      	cmp	r7, #9
 8004936:	d81b      	bhi.n	8004970 <_strtol_l.constprop.0+0xa8>
 8004938:	463c      	mov	r4, r7
 800493a:	42a3      	cmp	r3, r4
 800493c:	dd27      	ble.n	800498e <_strtol_l.constprop.0+0xc6>
 800493e:	1c57      	adds	r7, r2, #1
 8004940:	d007      	beq.n	8004952 <_strtol_l.constprop.0+0x8a>
 8004942:	4581      	cmp	r9, r0
 8004944:	d320      	bcc.n	8004988 <_strtol_l.constprop.0+0xc0>
 8004946:	d101      	bne.n	800494c <_strtol_l.constprop.0+0x84>
 8004948:	45a2      	cmp	sl, r4
 800494a:	db1d      	blt.n	8004988 <_strtol_l.constprop.0+0xc0>
 800494c:	fb00 4003 	mla	r0, r0, r3, r4
 8004950:	2201      	movs	r2, #1
 8004952:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004956:	e7eb      	b.n	8004930 <_strtol_l.constprop.0+0x68>
 8004958:	2c2b      	cmp	r4, #43	@ 0x2b
 800495a:	bf04      	itt	eq
 800495c:	782c      	ldrbeq	r4, [r5, #0]
 800495e:	1c95      	addeq	r5, r2, #2
 8004960:	e7cf      	b.n	8004902 <_strtol_l.constprop.0+0x3a>
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1da      	bne.n	800491c <_strtol_l.constprop.0+0x54>
 8004966:	2c30      	cmp	r4, #48	@ 0x30
 8004968:	bf0c      	ite	eq
 800496a:	2308      	moveq	r3, #8
 800496c:	230a      	movne	r3, #10
 800496e:	e7d5      	b.n	800491c <_strtol_l.constprop.0+0x54>
 8004970:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004974:	2f19      	cmp	r7, #25
 8004976:	d801      	bhi.n	800497c <_strtol_l.constprop.0+0xb4>
 8004978:	3c37      	subs	r4, #55	@ 0x37
 800497a:	e7de      	b.n	800493a <_strtol_l.constprop.0+0x72>
 800497c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8004980:	2f19      	cmp	r7, #25
 8004982:	d804      	bhi.n	800498e <_strtol_l.constprop.0+0xc6>
 8004984:	3c57      	subs	r4, #87	@ 0x57
 8004986:	e7d8      	b.n	800493a <_strtol_l.constprop.0+0x72>
 8004988:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800498c:	e7e1      	b.n	8004952 <_strtol_l.constprop.0+0x8a>
 800498e:	1c53      	adds	r3, r2, #1
 8004990:	d108      	bne.n	80049a4 <_strtol_l.constprop.0+0xdc>
 8004992:	2322      	movs	r3, #34	@ 0x22
 8004994:	f8ce 3000 	str.w	r3, [lr]
 8004998:	4660      	mov	r0, ip
 800499a:	f1b8 0f00 	cmp.w	r8, #0
 800499e:	d0a0      	beq.n	80048e2 <_strtol_l.constprop.0+0x1a>
 80049a0:	1e69      	subs	r1, r5, #1
 80049a2:	e006      	b.n	80049b2 <_strtol_l.constprop.0+0xea>
 80049a4:	b106      	cbz	r6, 80049a8 <_strtol_l.constprop.0+0xe0>
 80049a6:	4240      	negs	r0, r0
 80049a8:	f1b8 0f00 	cmp.w	r8, #0
 80049ac:	d099      	beq.n	80048e2 <_strtol_l.constprop.0+0x1a>
 80049ae:	2a00      	cmp	r2, #0
 80049b0:	d1f6      	bne.n	80049a0 <_strtol_l.constprop.0+0xd8>
 80049b2:	f8c8 1000 	str.w	r1, [r8]
 80049b6:	e794      	b.n	80048e2 <_strtol_l.constprop.0+0x1a>
 80049b8:	08005de5 	.word	0x08005de5

080049bc <strtol>:
 80049bc:	4613      	mov	r3, r2
 80049be:	460a      	mov	r2, r1
 80049c0:	4601      	mov	r1, r0
 80049c2:	4802      	ldr	r0, [pc, #8]	@ (80049cc <strtol+0x10>)
 80049c4:	6800      	ldr	r0, [r0, #0]
 80049c6:	f7ff bf7f 	b.w	80048c8 <_strtol_l.constprop.0>
 80049ca:	bf00      	nop
 80049cc:	2000001c 	.word	0x2000001c

080049d0 <std>:
 80049d0:	2300      	movs	r3, #0
 80049d2:	b510      	push	{r4, lr}
 80049d4:	4604      	mov	r4, r0
 80049d6:	e9c0 3300 	strd	r3, r3, [r0]
 80049da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80049de:	6083      	str	r3, [r0, #8]
 80049e0:	8181      	strh	r1, [r0, #12]
 80049e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80049e4:	81c2      	strh	r2, [r0, #14]
 80049e6:	6183      	str	r3, [r0, #24]
 80049e8:	4619      	mov	r1, r3
 80049ea:	2208      	movs	r2, #8
 80049ec:	305c      	adds	r0, #92	@ 0x5c
 80049ee:	f000 f914 	bl	8004c1a <memset>
 80049f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004a28 <std+0x58>)
 80049f4:	6263      	str	r3, [r4, #36]	@ 0x24
 80049f6:	4b0d      	ldr	r3, [pc, #52]	@ (8004a2c <std+0x5c>)
 80049f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80049fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004a30 <std+0x60>)
 80049fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80049fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004a34 <std+0x64>)
 8004a00:	6323      	str	r3, [r4, #48]	@ 0x30
 8004a02:	4b0d      	ldr	r3, [pc, #52]	@ (8004a38 <std+0x68>)
 8004a04:	6224      	str	r4, [r4, #32]
 8004a06:	429c      	cmp	r4, r3
 8004a08:	d006      	beq.n	8004a18 <std+0x48>
 8004a0a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004a0e:	4294      	cmp	r4, r2
 8004a10:	d002      	beq.n	8004a18 <std+0x48>
 8004a12:	33d0      	adds	r3, #208	@ 0xd0
 8004a14:	429c      	cmp	r4, r3
 8004a16:	d105      	bne.n	8004a24 <std+0x54>
 8004a18:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004a1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a20:	f000 b9d0 	b.w	8004dc4 <__retarget_lock_init_recursive>
 8004a24:	bd10      	pop	{r4, pc}
 8004a26:	bf00      	nop
 8004a28:	08004b95 	.word	0x08004b95
 8004a2c:	08004bb7 	.word	0x08004bb7
 8004a30:	08004bef 	.word	0x08004bef
 8004a34:	08004c13 	.word	0x08004c13
 8004a38:	20000354 	.word	0x20000354

08004a3c <stdio_exit_handler>:
 8004a3c:	4a02      	ldr	r2, [pc, #8]	@ (8004a48 <stdio_exit_handler+0xc>)
 8004a3e:	4903      	ldr	r1, [pc, #12]	@ (8004a4c <stdio_exit_handler+0x10>)
 8004a40:	4803      	ldr	r0, [pc, #12]	@ (8004a50 <stdio_exit_handler+0x14>)
 8004a42:	f000 b869 	b.w	8004b18 <_fwalk_sglue>
 8004a46:	bf00      	nop
 8004a48:	20000010 	.word	0x20000010
 8004a4c:	080056dd 	.word	0x080056dd
 8004a50:	20000020 	.word	0x20000020

08004a54 <cleanup_stdio>:
 8004a54:	6841      	ldr	r1, [r0, #4]
 8004a56:	4b0c      	ldr	r3, [pc, #48]	@ (8004a88 <cleanup_stdio+0x34>)
 8004a58:	4299      	cmp	r1, r3
 8004a5a:	b510      	push	{r4, lr}
 8004a5c:	4604      	mov	r4, r0
 8004a5e:	d001      	beq.n	8004a64 <cleanup_stdio+0x10>
 8004a60:	f000 fe3c 	bl	80056dc <_fflush_r>
 8004a64:	68a1      	ldr	r1, [r4, #8]
 8004a66:	4b09      	ldr	r3, [pc, #36]	@ (8004a8c <cleanup_stdio+0x38>)
 8004a68:	4299      	cmp	r1, r3
 8004a6a:	d002      	beq.n	8004a72 <cleanup_stdio+0x1e>
 8004a6c:	4620      	mov	r0, r4
 8004a6e:	f000 fe35 	bl	80056dc <_fflush_r>
 8004a72:	68e1      	ldr	r1, [r4, #12]
 8004a74:	4b06      	ldr	r3, [pc, #24]	@ (8004a90 <cleanup_stdio+0x3c>)
 8004a76:	4299      	cmp	r1, r3
 8004a78:	d004      	beq.n	8004a84 <cleanup_stdio+0x30>
 8004a7a:	4620      	mov	r0, r4
 8004a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a80:	f000 be2c 	b.w	80056dc <_fflush_r>
 8004a84:	bd10      	pop	{r4, pc}
 8004a86:	bf00      	nop
 8004a88:	20000354 	.word	0x20000354
 8004a8c:	200003bc 	.word	0x200003bc
 8004a90:	20000424 	.word	0x20000424

08004a94 <global_stdio_init.part.0>:
 8004a94:	b510      	push	{r4, lr}
 8004a96:	4b0b      	ldr	r3, [pc, #44]	@ (8004ac4 <global_stdio_init.part.0+0x30>)
 8004a98:	4c0b      	ldr	r4, [pc, #44]	@ (8004ac8 <global_stdio_init.part.0+0x34>)
 8004a9a:	4a0c      	ldr	r2, [pc, #48]	@ (8004acc <global_stdio_init.part.0+0x38>)
 8004a9c:	601a      	str	r2, [r3, #0]
 8004a9e:	4620      	mov	r0, r4
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	2104      	movs	r1, #4
 8004aa4:	f7ff ff94 	bl	80049d0 <std>
 8004aa8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004aac:	2201      	movs	r2, #1
 8004aae:	2109      	movs	r1, #9
 8004ab0:	f7ff ff8e 	bl	80049d0 <std>
 8004ab4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004ab8:	2202      	movs	r2, #2
 8004aba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004abe:	2112      	movs	r1, #18
 8004ac0:	f7ff bf86 	b.w	80049d0 <std>
 8004ac4:	2000048c 	.word	0x2000048c
 8004ac8:	20000354 	.word	0x20000354
 8004acc:	08004a3d 	.word	0x08004a3d

08004ad0 <__sfp_lock_acquire>:
 8004ad0:	4801      	ldr	r0, [pc, #4]	@ (8004ad8 <__sfp_lock_acquire+0x8>)
 8004ad2:	f000 b978 	b.w	8004dc6 <__retarget_lock_acquire_recursive>
 8004ad6:	bf00      	nop
 8004ad8:	20000495 	.word	0x20000495

08004adc <__sfp_lock_release>:
 8004adc:	4801      	ldr	r0, [pc, #4]	@ (8004ae4 <__sfp_lock_release+0x8>)
 8004ade:	f000 b973 	b.w	8004dc8 <__retarget_lock_release_recursive>
 8004ae2:	bf00      	nop
 8004ae4:	20000495 	.word	0x20000495

08004ae8 <__sinit>:
 8004ae8:	b510      	push	{r4, lr}
 8004aea:	4604      	mov	r4, r0
 8004aec:	f7ff fff0 	bl	8004ad0 <__sfp_lock_acquire>
 8004af0:	6a23      	ldr	r3, [r4, #32]
 8004af2:	b11b      	cbz	r3, 8004afc <__sinit+0x14>
 8004af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004af8:	f7ff bff0 	b.w	8004adc <__sfp_lock_release>
 8004afc:	4b04      	ldr	r3, [pc, #16]	@ (8004b10 <__sinit+0x28>)
 8004afe:	6223      	str	r3, [r4, #32]
 8004b00:	4b04      	ldr	r3, [pc, #16]	@ (8004b14 <__sinit+0x2c>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d1f5      	bne.n	8004af4 <__sinit+0xc>
 8004b08:	f7ff ffc4 	bl	8004a94 <global_stdio_init.part.0>
 8004b0c:	e7f2      	b.n	8004af4 <__sinit+0xc>
 8004b0e:	bf00      	nop
 8004b10:	08004a55 	.word	0x08004a55
 8004b14:	2000048c 	.word	0x2000048c

08004b18 <_fwalk_sglue>:
 8004b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b1c:	4607      	mov	r7, r0
 8004b1e:	4688      	mov	r8, r1
 8004b20:	4614      	mov	r4, r2
 8004b22:	2600      	movs	r6, #0
 8004b24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004b28:	f1b9 0901 	subs.w	r9, r9, #1
 8004b2c:	d505      	bpl.n	8004b3a <_fwalk_sglue+0x22>
 8004b2e:	6824      	ldr	r4, [r4, #0]
 8004b30:	2c00      	cmp	r4, #0
 8004b32:	d1f7      	bne.n	8004b24 <_fwalk_sglue+0xc>
 8004b34:	4630      	mov	r0, r6
 8004b36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b3a:	89ab      	ldrh	r3, [r5, #12]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d907      	bls.n	8004b50 <_fwalk_sglue+0x38>
 8004b40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b44:	3301      	adds	r3, #1
 8004b46:	d003      	beq.n	8004b50 <_fwalk_sglue+0x38>
 8004b48:	4629      	mov	r1, r5
 8004b4a:	4638      	mov	r0, r7
 8004b4c:	47c0      	blx	r8
 8004b4e:	4306      	orrs	r6, r0
 8004b50:	3568      	adds	r5, #104	@ 0x68
 8004b52:	e7e9      	b.n	8004b28 <_fwalk_sglue+0x10>

08004b54 <siprintf>:
 8004b54:	b40e      	push	{r1, r2, r3}
 8004b56:	b500      	push	{lr}
 8004b58:	b09c      	sub	sp, #112	@ 0x70
 8004b5a:	ab1d      	add	r3, sp, #116	@ 0x74
 8004b5c:	9002      	str	r0, [sp, #8]
 8004b5e:	9006      	str	r0, [sp, #24]
 8004b60:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004b64:	4809      	ldr	r0, [pc, #36]	@ (8004b8c <siprintf+0x38>)
 8004b66:	9107      	str	r1, [sp, #28]
 8004b68:	9104      	str	r1, [sp, #16]
 8004b6a:	4909      	ldr	r1, [pc, #36]	@ (8004b90 <siprintf+0x3c>)
 8004b6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b70:	9105      	str	r1, [sp, #20]
 8004b72:	6800      	ldr	r0, [r0, #0]
 8004b74:	9301      	str	r3, [sp, #4]
 8004b76:	a902      	add	r1, sp, #8
 8004b78:	f000 faa2 	bl	80050c0 <_svfiprintf_r>
 8004b7c:	9b02      	ldr	r3, [sp, #8]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	701a      	strb	r2, [r3, #0]
 8004b82:	b01c      	add	sp, #112	@ 0x70
 8004b84:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b88:	b003      	add	sp, #12
 8004b8a:	4770      	bx	lr
 8004b8c:	2000001c 	.word	0x2000001c
 8004b90:	ffff0208 	.word	0xffff0208

08004b94 <__sread>:
 8004b94:	b510      	push	{r4, lr}
 8004b96:	460c      	mov	r4, r1
 8004b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b9c:	f000 f8c4 	bl	8004d28 <_read_r>
 8004ba0:	2800      	cmp	r0, #0
 8004ba2:	bfab      	itete	ge
 8004ba4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004ba6:	89a3      	ldrhlt	r3, [r4, #12]
 8004ba8:	181b      	addge	r3, r3, r0
 8004baa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004bae:	bfac      	ite	ge
 8004bb0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004bb2:	81a3      	strhlt	r3, [r4, #12]
 8004bb4:	bd10      	pop	{r4, pc}

08004bb6 <__swrite>:
 8004bb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bba:	461f      	mov	r7, r3
 8004bbc:	898b      	ldrh	r3, [r1, #12]
 8004bbe:	05db      	lsls	r3, r3, #23
 8004bc0:	4605      	mov	r5, r0
 8004bc2:	460c      	mov	r4, r1
 8004bc4:	4616      	mov	r6, r2
 8004bc6:	d505      	bpl.n	8004bd4 <__swrite+0x1e>
 8004bc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bcc:	2302      	movs	r3, #2
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f000 f898 	bl	8004d04 <_lseek_r>
 8004bd4:	89a3      	ldrh	r3, [r4, #12]
 8004bd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bda:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004bde:	81a3      	strh	r3, [r4, #12]
 8004be0:	4632      	mov	r2, r6
 8004be2:	463b      	mov	r3, r7
 8004be4:	4628      	mov	r0, r5
 8004be6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004bea:	f000 b8af 	b.w	8004d4c <_write_r>

08004bee <__sseek>:
 8004bee:	b510      	push	{r4, lr}
 8004bf0:	460c      	mov	r4, r1
 8004bf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bf6:	f000 f885 	bl	8004d04 <_lseek_r>
 8004bfa:	1c43      	adds	r3, r0, #1
 8004bfc:	89a3      	ldrh	r3, [r4, #12]
 8004bfe:	bf15      	itete	ne
 8004c00:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004c02:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004c06:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004c0a:	81a3      	strheq	r3, [r4, #12]
 8004c0c:	bf18      	it	ne
 8004c0e:	81a3      	strhne	r3, [r4, #12]
 8004c10:	bd10      	pop	{r4, pc}

08004c12 <__sclose>:
 8004c12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c16:	f000 b865 	b.w	8004ce4 <_close_r>

08004c1a <memset>:
 8004c1a:	4402      	add	r2, r0
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d100      	bne.n	8004c24 <memset+0xa>
 8004c22:	4770      	bx	lr
 8004c24:	f803 1b01 	strb.w	r1, [r3], #1
 8004c28:	e7f9      	b.n	8004c1e <memset+0x4>
	...

08004c2c <strtok>:
 8004c2c:	4b16      	ldr	r3, [pc, #88]	@ (8004c88 <strtok+0x5c>)
 8004c2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c32:	681f      	ldr	r7, [r3, #0]
 8004c34:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8004c36:	4605      	mov	r5, r0
 8004c38:	460e      	mov	r6, r1
 8004c3a:	b9ec      	cbnz	r4, 8004c78 <strtok+0x4c>
 8004c3c:	2050      	movs	r0, #80	@ 0x50
 8004c3e:	f000 f92d 	bl	8004e9c <malloc>
 8004c42:	4602      	mov	r2, r0
 8004c44:	6478      	str	r0, [r7, #68]	@ 0x44
 8004c46:	b920      	cbnz	r0, 8004c52 <strtok+0x26>
 8004c48:	4b10      	ldr	r3, [pc, #64]	@ (8004c8c <strtok+0x60>)
 8004c4a:	4811      	ldr	r0, [pc, #68]	@ (8004c90 <strtok+0x64>)
 8004c4c:	215b      	movs	r1, #91	@ 0x5b
 8004c4e:	f000 f8bd 	bl	8004dcc <__assert_func>
 8004c52:	e9c0 4400 	strd	r4, r4, [r0]
 8004c56:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004c5a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004c5e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8004c62:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8004c66:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8004c6a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8004c6e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8004c72:	6184      	str	r4, [r0, #24]
 8004c74:	7704      	strb	r4, [r0, #28]
 8004c76:	6244      	str	r4, [r0, #36]	@ 0x24
 8004c78:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c7a:	4631      	mov	r1, r6
 8004c7c:	4628      	mov	r0, r5
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c84:	f000 b806 	b.w	8004c94 <__strtok_r>
 8004c88:	2000001c 	.word	0x2000001c
 8004c8c:	08005ee5 	.word	0x08005ee5
 8004c90:	08005efc 	.word	0x08005efc

08004c94 <__strtok_r>:
 8004c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c96:	4604      	mov	r4, r0
 8004c98:	b908      	cbnz	r0, 8004c9e <__strtok_r+0xa>
 8004c9a:	6814      	ldr	r4, [r2, #0]
 8004c9c:	b144      	cbz	r4, 8004cb0 <__strtok_r+0x1c>
 8004c9e:	4620      	mov	r0, r4
 8004ca0:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004ca4:	460f      	mov	r7, r1
 8004ca6:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004caa:	b91e      	cbnz	r6, 8004cb4 <__strtok_r+0x20>
 8004cac:	b965      	cbnz	r5, 8004cc8 <__strtok_r+0x34>
 8004cae:	6015      	str	r5, [r2, #0]
 8004cb0:	2000      	movs	r0, #0
 8004cb2:	e005      	b.n	8004cc0 <__strtok_r+0x2c>
 8004cb4:	42b5      	cmp	r5, r6
 8004cb6:	d1f6      	bne.n	8004ca6 <__strtok_r+0x12>
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1f0      	bne.n	8004c9e <__strtok_r+0xa>
 8004cbc:	6014      	str	r4, [r2, #0]
 8004cbe:	7003      	strb	r3, [r0, #0]
 8004cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cc2:	461c      	mov	r4, r3
 8004cc4:	e00c      	b.n	8004ce0 <__strtok_r+0x4c>
 8004cc6:	b915      	cbnz	r5, 8004cce <__strtok_r+0x3a>
 8004cc8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004ccc:	460e      	mov	r6, r1
 8004cce:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004cd2:	42ab      	cmp	r3, r5
 8004cd4:	d1f7      	bne.n	8004cc6 <__strtok_r+0x32>
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d0f3      	beq.n	8004cc2 <__strtok_r+0x2e>
 8004cda:	2300      	movs	r3, #0
 8004cdc:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004ce0:	6014      	str	r4, [r2, #0]
 8004ce2:	e7ed      	b.n	8004cc0 <__strtok_r+0x2c>

08004ce4 <_close_r>:
 8004ce4:	b538      	push	{r3, r4, r5, lr}
 8004ce6:	4d06      	ldr	r5, [pc, #24]	@ (8004d00 <_close_r+0x1c>)
 8004ce8:	2300      	movs	r3, #0
 8004cea:	4604      	mov	r4, r0
 8004cec:	4608      	mov	r0, r1
 8004cee:	602b      	str	r3, [r5, #0]
 8004cf0:	f7fc fbcc 	bl	800148c <_close>
 8004cf4:	1c43      	adds	r3, r0, #1
 8004cf6:	d102      	bne.n	8004cfe <_close_r+0x1a>
 8004cf8:	682b      	ldr	r3, [r5, #0]
 8004cfa:	b103      	cbz	r3, 8004cfe <_close_r+0x1a>
 8004cfc:	6023      	str	r3, [r4, #0]
 8004cfe:	bd38      	pop	{r3, r4, r5, pc}
 8004d00:	20000490 	.word	0x20000490

08004d04 <_lseek_r>:
 8004d04:	b538      	push	{r3, r4, r5, lr}
 8004d06:	4d07      	ldr	r5, [pc, #28]	@ (8004d24 <_lseek_r+0x20>)
 8004d08:	4604      	mov	r4, r0
 8004d0a:	4608      	mov	r0, r1
 8004d0c:	4611      	mov	r1, r2
 8004d0e:	2200      	movs	r2, #0
 8004d10:	602a      	str	r2, [r5, #0]
 8004d12:	461a      	mov	r2, r3
 8004d14:	f7fc fbe1 	bl	80014da <_lseek>
 8004d18:	1c43      	adds	r3, r0, #1
 8004d1a:	d102      	bne.n	8004d22 <_lseek_r+0x1e>
 8004d1c:	682b      	ldr	r3, [r5, #0]
 8004d1e:	b103      	cbz	r3, 8004d22 <_lseek_r+0x1e>
 8004d20:	6023      	str	r3, [r4, #0]
 8004d22:	bd38      	pop	{r3, r4, r5, pc}
 8004d24:	20000490 	.word	0x20000490

08004d28 <_read_r>:
 8004d28:	b538      	push	{r3, r4, r5, lr}
 8004d2a:	4d07      	ldr	r5, [pc, #28]	@ (8004d48 <_read_r+0x20>)
 8004d2c:	4604      	mov	r4, r0
 8004d2e:	4608      	mov	r0, r1
 8004d30:	4611      	mov	r1, r2
 8004d32:	2200      	movs	r2, #0
 8004d34:	602a      	str	r2, [r5, #0]
 8004d36:	461a      	mov	r2, r3
 8004d38:	f7fc fb6f 	bl	800141a <_read>
 8004d3c:	1c43      	adds	r3, r0, #1
 8004d3e:	d102      	bne.n	8004d46 <_read_r+0x1e>
 8004d40:	682b      	ldr	r3, [r5, #0]
 8004d42:	b103      	cbz	r3, 8004d46 <_read_r+0x1e>
 8004d44:	6023      	str	r3, [r4, #0]
 8004d46:	bd38      	pop	{r3, r4, r5, pc}
 8004d48:	20000490 	.word	0x20000490

08004d4c <_write_r>:
 8004d4c:	b538      	push	{r3, r4, r5, lr}
 8004d4e:	4d07      	ldr	r5, [pc, #28]	@ (8004d6c <_write_r+0x20>)
 8004d50:	4604      	mov	r4, r0
 8004d52:	4608      	mov	r0, r1
 8004d54:	4611      	mov	r1, r2
 8004d56:	2200      	movs	r2, #0
 8004d58:	602a      	str	r2, [r5, #0]
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	f7fc fb7a 	bl	8001454 <_write>
 8004d60:	1c43      	adds	r3, r0, #1
 8004d62:	d102      	bne.n	8004d6a <_write_r+0x1e>
 8004d64:	682b      	ldr	r3, [r5, #0]
 8004d66:	b103      	cbz	r3, 8004d6a <_write_r+0x1e>
 8004d68:	6023      	str	r3, [r4, #0]
 8004d6a:	bd38      	pop	{r3, r4, r5, pc}
 8004d6c:	20000490 	.word	0x20000490

08004d70 <__errno>:
 8004d70:	4b01      	ldr	r3, [pc, #4]	@ (8004d78 <__errno+0x8>)
 8004d72:	6818      	ldr	r0, [r3, #0]
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	2000001c 	.word	0x2000001c

08004d7c <__libc_init_array>:
 8004d7c:	b570      	push	{r4, r5, r6, lr}
 8004d7e:	4d0d      	ldr	r5, [pc, #52]	@ (8004db4 <__libc_init_array+0x38>)
 8004d80:	4c0d      	ldr	r4, [pc, #52]	@ (8004db8 <__libc_init_array+0x3c>)
 8004d82:	1b64      	subs	r4, r4, r5
 8004d84:	10a4      	asrs	r4, r4, #2
 8004d86:	2600      	movs	r6, #0
 8004d88:	42a6      	cmp	r6, r4
 8004d8a:	d109      	bne.n	8004da0 <__libc_init_array+0x24>
 8004d8c:	4d0b      	ldr	r5, [pc, #44]	@ (8004dbc <__libc_init_array+0x40>)
 8004d8e:	4c0c      	ldr	r4, [pc, #48]	@ (8004dc0 <__libc_init_array+0x44>)
 8004d90:	f000 fff0 	bl	8005d74 <_init>
 8004d94:	1b64      	subs	r4, r4, r5
 8004d96:	10a4      	asrs	r4, r4, #2
 8004d98:	2600      	movs	r6, #0
 8004d9a:	42a6      	cmp	r6, r4
 8004d9c:	d105      	bne.n	8004daa <__libc_init_array+0x2e>
 8004d9e:	bd70      	pop	{r4, r5, r6, pc}
 8004da0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004da4:	4798      	blx	r3
 8004da6:	3601      	adds	r6, #1
 8004da8:	e7ee      	b.n	8004d88 <__libc_init_array+0xc>
 8004daa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dae:	4798      	blx	r3
 8004db0:	3601      	adds	r6, #1
 8004db2:	e7f2      	b.n	8004d9a <__libc_init_array+0x1e>
 8004db4:	08005fd0 	.word	0x08005fd0
 8004db8:	08005fd0 	.word	0x08005fd0
 8004dbc:	08005fd0 	.word	0x08005fd0
 8004dc0:	08005fd4 	.word	0x08005fd4

08004dc4 <__retarget_lock_init_recursive>:
 8004dc4:	4770      	bx	lr

08004dc6 <__retarget_lock_acquire_recursive>:
 8004dc6:	4770      	bx	lr

08004dc8 <__retarget_lock_release_recursive>:
 8004dc8:	4770      	bx	lr
	...

08004dcc <__assert_func>:
 8004dcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004dce:	4614      	mov	r4, r2
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	4b09      	ldr	r3, [pc, #36]	@ (8004df8 <__assert_func+0x2c>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4605      	mov	r5, r0
 8004dd8:	68d8      	ldr	r0, [r3, #12]
 8004dda:	b954      	cbnz	r4, 8004df2 <__assert_func+0x26>
 8004ddc:	4b07      	ldr	r3, [pc, #28]	@ (8004dfc <__assert_func+0x30>)
 8004dde:	461c      	mov	r4, r3
 8004de0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004de4:	9100      	str	r1, [sp, #0]
 8004de6:	462b      	mov	r3, r5
 8004de8:	4905      	ldr	r1, [pc, #20]	@ (8004e00 <__assert_func+0x34>)
 8004dea:	f000 fc9f 	bl	800572c <fiprintf>
 8004dee:	f000 fce7 	bl	80057c0 <abort>
 8004df2:	4b04      	ldr	r3, [pc, #16]	@ (8004e04 <__assert_func+0x38>)
 8004df4:	e7f4      	b.n	8004de0 <__assert_func+0x14>
 8004df6:	bf00      	nop
 8004df8:	2000001c 	.word	0x2000001c
 8004dfc:	08005f91 	.word	0x08005f91
 8004e00:	08005f63 	.word	0x08005f63
 8004e04:	08005f56 	.word	0x08005f56

08004e08 <_free_r>:
 8004e08:	b538      	push	{r3, r4, r5, lr}
 8004e0a:	4605      	mov	r5, r0
 8004e0c:	2900      	cmp	r1, #0
 8004e0e:	d041      	beq.n	8004e94 <_free_r+0x8c>
 8004e10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e14:	1f0c      	subs	r4, r1, #4
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	bfb8      	it	lt
 8004e1a:	18e4      	addlt	r4, r4, r3
 8004e1c:	f000 f8e8 	bl	8004ff0 <__malloc_lock>
 8004e20:	4a1d      	ldr	r2, [pc, #116]	@ (8004e98 <_free_r+0x90>)
 8004e22:	6813      	ldr	r3, [r2, #0]
 8004e24:	b933      	cbnz	r3, 8004e34 <_free_r+0x2c>
 8004e26:	6063      	str	r3, [r4, #4]
 8004e28:	6014      	str	r4, [r2, #0]
 8004e2a:	4628      	mov	r0, r5
 8004e2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e30:	f000 b8e4 	b.w	8004ffc <__malloc_unlock>
 8004e34:	42a3      	cmp	r3, r4
 8004e36:	d908      	bls.n	8004e4a <_free_r+0x42>
 8004e38:	6820      	ldr	r0, [r4, #0]
 8004e3a:	1821      	adds	r1, r4, r0
 8004e3c:	428b      	cmp	r3, r1
 8004e3e:	bf01      	itttt	eq
 8004e40:	6819      	ldreq	r1, [r3, #0]
 8004e42:	685b      	ldreq	r3, [r3, #4]
 8004e44:	1809      	addeq	r1, r1, r0
 8004e46:	6021      	streq	r1, [r4, #0]
 8004e48:	e7ed      	b.n	8004e26 <_free_r+0x1e>
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	b10b      	cbz	r3, 8004e54 <_free_r+0x4c>
 8004e50:	42a3      	cmp	r3, r4
 8004e52:	d9fa      	bls.n	8004e4a <_free_r+0x42>
 8004e54:	6811      	ldr	r1, [r2, #0]
 8004e56:	1850      	adds	r0, r2, r1
 8004e58:	42a0      	cmp	r0, r4
 8004e5a:	d10b      	bne.n	8004e74 <_free_r+0x6c>
 8004e5c:	6820      	ldr	r0, [r4, #0]
 8004e5e:	4401      	add	r1, r0
 8004e60:	1850      	adds	r0, r2, r1
 8004e62:	4283      	cmp	r3, r0
 8004e64:	6011      	str	r1, [r2, #0]
 8004e66:	d1e0      	bne.n	8004e2a <_free_r+0x22>
 8004e68:	6818      	ldr	r0, [r3, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	6053      	str	r3, [r2, #4]
 8004e6e:	4408      	add	r0, r1
 8004e70:	6010      	str	r0, [r2, #0]
 8004e72:	e7da      	b.n	8004e2a <_free_r+0x22>
 8004e74:	d902      	bls.n	8004e7c <_free_r+0x74>
 8004e76:	230c      	movs	r3, #12
 8004e78:	602b      	str	r3, [r5, #0]
 8004e7a:	e7d6      	b.n	8004e2a <_free_r+0x22>
 8004e7c:	6820      	ldr	r0, [r4, #0]
 8004e7e:	1821      	adds	r1, r4, r0
 8004e80:	428b      	cmp	r3, r1
 8004e82:	bf04      	itt	eq
 8004e84:	6819      	ldreq	r1, [r3, #0]
 8004e86:	685b      	ldreq	r3, [r3, #4]
 8004e88:	6063      	str	r3, [r4, #4]
 8004e8a:	bf04      	itt	eq
 8004e8c:	1809      	addeq	r1, r1, r0
 8004e8e:	6021      	streq	r1, [r4, #0]
 8004e90:	6054      	str	r4, [r2, #4]
 8004e92:	e7ca      	b.n	8004e2a <_free_r+0x22>
 8004e94:	bd38      	pop	{r3, r4, r5, pc}
 8004e96:	bf00      	nop
 8004e98:	2000049c 	.word	0x2000049c

08004e9c <malloc>:
 8004e9c:	4b02      	ldr	r3, [pc, #8]	@ (8004ea8 <malloc+0xc>)
 8004e9e:	4601      	mov	r1, r0
 8004ea0:	6818      	ldr	r0, [r3, #0]
 8004ea2:	f000 b825 	b.w	8004ef0 <_malloc_r>
 8004ea6:	bf00      	nop
 8004ea8:	2000001c 	.word	0x2000001c

08004eac <sbrk_aligned>:
 8004eac:	b570      	push	{r4, r5, r6, lr}
 8004eae:	4e0f      	ldr	r6, [pc, #60]	@ (8004eec <sbrk_aligned+0x40>)
 8004eb0:	460c      	mov	r4, r1
 8004eb2:	6831      	ldr	r1, [r6, #0]
 8004eb4:	4605      	mov	r5, r0
 8004eb6:	b911      	cbnz	r1, 8004ebe <sbrk_aligned+0x12>
 8004eb8:	f000 fc64 	bl	8005784 <_sbrk_r>
 8004ebc:	6030      	str	r0, [r6, #0]
 8004ebe:	4621      	mov	r1, r4
 8004ec0:	4628      	mov	r0, r5
 8004ec2:	f000 fc5f 	bl	8005784 <_sbrk_r>
 8004ec6:	1c43      	adds	r3, r0, #1
 8004ec8:	d103      	bne.n	8004ed2 <sbrk_aligned+0x26>
 8004eca:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004ece:	4620      	mov	r0, r4
 8004ed0:	bd70      	pop	{r4, r5, r6, pc}
 8004ed2:	1cc4      	adds	r4, r0, #3
 8004ed4:	f024 0403 	bic.w	r4, r4, #3
 8004ed8:	42a0      	cmp	r0, r4
 8004eda:	d0f8      	beq.n	8004ece <sbrk_aligned+0x22>
 8004edc:	1a21      	subs	r1, r4, r0
 8004ede:	4628      	mov	r0, r5
 8004ee0:	f000 fc50 	bl	8005784 <_sbrk_r>
 8004ee4:	3001      	adds	r0, #1
 8004ee6:	d1f2      	bne.n	8004ece <sbrk_aligned+0x22>
 8004ee8:	e7ef      	b.n	8004eca <sbrk_aligned+0x1e>
 8004eea:	bf00      	nop
 8004eec:	20000498 	.word	0x20000498

08004ef0 <_malloc_r>:
 8004ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ef4:	1ccd      	adds	r5, r1, #3
 8004ef6:	f025 0503 	bic.w	r5, r5, #3
 8004efa:	3508      	adds	r5, #8
 8004efc:	2d0c      	cmp	r5, #12
 8004efe:	bf38      	it	cc
 8004f00:	250c      	movcc	r5, #12
 8004f02:	2d00      	cmp	r5, #0
 8004f04:	4606      	mov	r6, r0
 8004f06:	db01      	blt.n	8004f0c <_malloc_r+0x1c>
 8004f08:	42a9      	cmp	r1, r5
 8004f0a:	d904      	bls.n	8004f16 <_malloc_r+0x26>
 8004f0c:	230c      	movs	r3, #12
 8004f0e:	6033      	str	r3, [r6, #0]
 8004f10:	2000      	movs	r0, #0
 8004f12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004fec <_malloc_r+0xfc>
 8004f1a:	f000 f869 	bl	8004ff0 <__malloc_lock>
 8004f1e:	f8d8 3000 	ldr.w	r3, [r8]
 8004f22:	461c      	mov	r4, r3
 8004f24:	bb44      	cbnz	r4, 8004f78 <_malloc_r+0x88>
 8004f26:	4629      	mov	r1, r5
 8004f28:	4630      	mov	r0, r6
 8004f2a:	f7ff ffbf 	bl	8004eac <sbrk_aligned>
 8004f2e:	1c43      	adds	r3, r0, #1
 8004f30:	4604      	mov	r4, r0
 8004f32:	d158      	bne.n	8004fe6 <_malloc_r+0xf6>
 8004f34:	f8d8 4000 	ldr.w	r4, [r8]
 8004f38:	4627      	mov	r7, r4
 8004f3a:	2f00      	cmp	r7, #0
 8004f3c:	d143      	bne.n	8004fc6 <_malloc_r+0xd6>
 8004f3e:	2c00      	cmp	r4, #0
 8004f40:	d04b      	beq.n	8004fda <_malloc_r+0xea>
 8004f42:	6823      	ldr	r3, [r4, #0]
 8004f44:	4639      	mov	r1, r7
 8004f46:	4630      	mov	r0, r6
 8004f48:	eb04 0903 	add.w	r9, r4, r3
 8004f4c:	f000 fc1a 	bl	8005784 <_sbrk_r>
 8004f50:	4581      	cmp	r9, r0
 8004f52:	d142      	bne.n	8004fda <_malloc_r+0xea>
 8004f54:	6821      	ldr	r1, [r4, #0]
 8004f56:	1a6d      	subs	r5, r5, r1
 8004f58:	4629      	mov	r1, r5
 8004f5a:	4630      	mov	r0, r6
 8004f5c:	f7ff ffa6 	bl	8004eac <sbrk_aligned>
 8004f60:	3001      	adds	r0, #1
 8004f62:	d03a      	beq.n	8004fda <_malloc_r+0xea>
 8004f64:	6823      	ldr	r3, [r4, #0]
 8004f66:	442b      	add	r3, r5
 8004f68:	6023      	str	r3, [r4, #0]
 8004f6a:	f8d8 3000 	ldr.w	r3, [r8]
 8004f6e:	685a      	ldr	r2, [r3, #4]
 8004f70:	bb62      	cbnz	r2, 8004fcc <_malloc_r+0xdc>
 8004f72:	f8c8 7000 	str.w	r7, [r8]
 8004f76:	e00f      	b.n	8004f98 <_malloc_r+0xa8>
 8004f78:	6822      	ldr	r2, [r4, #0]
 8004f7a:	1b52      	subs	r2, r2, r5
 8004f7c:	d420      	bmi.n	8004fc0 <_malloc_r+0xd0>
 8004f7e:	2a0b      	cmp	r2, #11
 8004f80:	d917      	bls.n	8004fb2 <_malloc_r+0xc2>
 8004f82:	1961      	adds	r1, r4, r5
 8004f84:	42a3      	cmp	r3, r4
 8004f86:	6025      	str	r5, [r4, #0]
 8004f88:	bf18      	it	ne
 8004f8a:	6059      	strne	r1, [r3, #4]
 8004f8c:	6863      	ldr	r3, [r4, #4]
 8004f8e:	bf08      	it	eq
 8004f90:	f8c8 1000 	streq.w	r1, [r8]
 8004f94:	5162      	str	r2, [r4, r5]
 8004f96:	604b      	str	r3, [r1, #4]
 8004f98:	4630      	mov	r0, r6
 8004f9a:	f000 f82f 	bl	8004ffc <__malloc_unlock>
 8004f9e:	f104 000b 	add.w	r0, r4, #11
 8004fa2:	1d23      	adds	r3, r4, #4
 8004fa4:	f020 0007 	bic.w	r0, r0, #7
 8004fa8:	1ac2      	subs	r2, r0, r3
 8004faa:	bf1c      	itt	ne
 8004fac:	1a1b      	subne	r3, r3, r0
 8004fae:	50a3      	strne	r3, [r4, r2]
 8004fb0:	e7af      	b.n	8004f12 <_malloc_r+0x22>
 8004fb2:	6862      	ldr	r2, [r4, #4]
 8004fb4:	42a3      	cmp	r3, r4
 8004fb6:	bf0c      	ite	eq
 8004fb8:	f8c8 2000 	streq.w	r2, [r8]
 8004fbc:	605a      	strne	r2, [r3, #4]
 8004fbe:	e7eb      	b.n	8004f98 <_malloc_r+0xa8>
 8004fc0:	4623      	mov	r3, r4
 8004fc2:	6864      	ldr	r4, [r4, #4]
 8004fc4:	e7ae      	b.n	8004f24 <_malloc_r+0x34>
 8004fc6:	463c      	mov	r4, r7
 8004fc8:	687f      	ldr	r7, [r7, #4]
 8004fca:	e7b6      	b.n	8004f3a <_malloc_r+0x4a>
 8004fcc:	461a      	mov	r2, r3
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	42a3      	cmp	r3, r4
 8004fd2:	d1fb      	bne.n	8004fcc <_malloc_r+0xdc>
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	6053      	str	r3, [r2, #4]
 8004fd8:	e7de      	b.n	8004f98 <_malloc_r+0xa8>
 8004fda:	230c      	movs	r3, #12
 8004fdc:	6033      	str	r3, [r6, #0]
 8004fde:	4630      	mov	r0, r6
 8004fe0:	f000 f80c 	bl	8004ffc <__malloc_unlock>
 8004fe4:	e794      	b.n	8004f10 <_malloc_r+0x20>
 8004fe6:	6005      	str	r5, [r0, #0]
 8004fe8:	e7d6      	b.n	8004f98 <_malloc_r+0xa8>
 8004fea:	bf00      	nop
 8004fec:	2000049c 	.word	0x2000049c

08004ff0 <__malloc_lock>:
 8004ff0:	4801      	ldr	r0, [pc, #4]	@ (8004ff8 <__malloc_lock+0x8>)
 8004ff2:	f7ff bee8 	b.w	8004dc6 <__retarget_lock_acquire_recursive>
 8004ff6:	bf00      	nop
 8004ff8:	20000494 	.word	0x20000494

08004ffc <__malloc_unlock>:
 8004ffc:	4801      	ldr	r0, [pc, #4]	@ (8005004 <__malloc_unlock+0x8>)
 8004ffe:	f7ff bee3 	b.w	8004dc8 <__retarget_lock_release_recursive>
 8005002:	bf00      	nop
 8005004:	20000494 	.word	0x20000494

08005008 <__ssputs_r>:
 8005008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800500c:	688e      	ldr	r6, [r1, #8]
 800500e:	461f      	mov	r7, r3
 8005010:	42be      	cmp	r6, r7
 8005012:	680b      	ldr	r3, [r1, #0]
 8005014:	4682      	mov	sl, r0
 8005016:	460c      	mov	r4, r1
 8005018:	4690      	mov	r8, r2
 800501a:	d82d      	bhi.n	8005078 <__ssputs_r+0x70>
 800501c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005020:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005024:	d026      	beq.n	8005074 <__ssputs_r+0x6c>
 8005026:	6965      	ldr	r5, [r4, #20]
 8005028:	6909      	ldr	r1, [r1, #16]
 800502a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800502e:	eba3 0901 	sub.w	r9, r3, r1
 8005032:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005036:	1c7b      	adds	r3, r7, #1
 8005038:	444b      	add	r3, r9
 800503a:	106d      	asrs	r5, r5, #1
 800503c:	429d      	cmp	r5, r3
 800503e:	bf38      	it	cc
 8005040:	461d      	movcc	r5, r3
 8005042:	0553      	lsls	r3, r2, #21
 8005044:	d527      	bpl.n	8005096 <__ssputs_r+0x8e>
 8005046:	4629      	mov	r1, r5
 8005048:	f7ff ff52 	bl	8004ef0 <_malloc_r>
 800504c:	4606      	mov	r6, r0
 800504e:	b360      	cbz	r0, 80050aa <__ssputs_r+0xa2>
 8005050:	6921      	ldr	r1, [r4, #16]
 8005052:	464a      	mov	r2, r9
 8005054:	f000 fba6 	bl	80057a4 <memcpy>
 8005058:	89a3      	ldrh	r3, [r4, #12]
 800505a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800505e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005062:	81a3      	strh	r3, [r4, #12]
 8005064:	6126      	str	r6, [r4, #16]
 8005066:	6165      	str	r5, [r4, #20]
 8005068:	444e      	add	r6, r9
 800506a:	eba5 0509 	sub.w	r5, r5, r9
 800506e:	6026      	str	r6, [r4, #0]
 8005070:	60a5      	str	r5, [r4, #8]
 8005072:	463e      	mov	r6, r7
 8005074:	42be      	cmp	r6, r7
 8005076:	d900      	bls.n	800507a <__ssputs_r+0x72>
 8005078:	463e      	mov	r6, r7
 800507a:	6820      	ldr	r0, [r4, #0]
 800507c:	4632      	mov	r2, r6
 800507e:	4641      	mov	r1, r8
 8005080:	f000 fb66 	bl	8005750 <memmove>
 8005084:	68a3      	ldr	r3, [r4, #8]
 8005086:	1b9b      	subs	r3, r3, r6
 8005088:	60a3      	str	r3, [r4, #8]
 800508a:	6823      	ldr	r3, [r4, #0]
 800508c:	4433      	add	r3, r6
 800508e:	6023      	str	r3, [r4, #0]
 8005090:	2000      	movs	r0, #0
 8005092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005096:	462a      	mov	r2, r5
 8005098:	f000 fb99 	bl	80057ce <_realloc_r>
 800509c:	4606      	mov	r6, r0
 800509e:	2800      	cmp	r0, #0
 80050a0:	d1e0      	bne.n	8005064 <__ssputs_r+0x5c>
 80050a2:	6921      	ldr	r1, [r4, #16]
 80050a4:	4650      	mov	r0, sl
 80050a6:	f7ff feaf 	bl	8004e08 <_free_r>
 80050aa:	230c      	movs	r3, #12
 80050ac:	f8ca 3000 	str.w	r3, [sl]
 80050b0:	89a3      	ldrh	r3, [r4, #12]
 80050b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80050b6:	81a3      	strh	r3, [r4, #12]
 80050b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80050bc:	e7e9      	b.n	8005092 <__ssputs_r+0x8a>
	...

080050c0 <_svfiprintf_r>:
 80050c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050c4:	4698      	mov	r8, r3
 80050c6:	898b      	ldrh	r3, [r1, #12]
 80050c8:	061b      	lsls	r3, r3, #24
 80050ca:	b09d      	sub	sp, #116	@ 0x74
 80050cc:	4607      	mov	r7, r0
 80050ce:	460d      	mov	r5, r1
 80050d0:	4614      	mov	r4, r2
 80050d2:	d510      	bpl.n	80050f6 <_svfiprintf_r+0x36>
 80050d4:	690b      	ldr	r3, [r1, #16]
 80050d6:	b973      	cbnz	r3, 80050f6 <_svfiprintf_r+0x36>
 80050d8:	2140      	movs	r1, #64	@ 0x40
 80050da:	f7ff ff09 	bl	8004ef0 <_malloc_r>
 80050de:	6028      	str	r0, [r5, #0]
 80050e0:	6128      	str	r0, [r5, #16]
 80050e2:	b930      	cbnz	r0, 80050f2 <_svfiprintf_r+0x32>
 80050e4:	230c      	movs	r3, #12
 80050e6:	603b      	str	r3, [r7, #0]
 80050e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80050ec:	b01d      	add	sp, #116	@ 0x74
 80050ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050f2:	2340      	movs	r3, #64	@ 0x40
 80050f4:	616b      	str	r3, [r5, #20]
 80050f6:	2300      	movs	r3, #0
 80050f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80050fa:	2320      	movs	r3, #32
 80050fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005100:	f8cd 800c 	str.w	r8, [sp, #12]
 8005104:	2330      	movs	r3, #48	@ 0x30
 8005106:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80052a4 <_svfiprintf_r+0x1e4>
 800510a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800510e:	f04f 0901 	mov.w	r9, #1
 8005112:	4623      	mov	r3, r4
 8005114:	469a      	mov	sl, r3
 8005116:	f813 2b01 	ldrb.w	r2, [r3], #1
 800511a:	b10a      	cbz	r2, 8005120 <_svfiprintf_r+0x60>
 800511c:	2a25      	cmp	r2, #37	@ 0x25
 800511e:	d1f9      	bne.n	8005114 <_svfiprintf_r+0x54>
 8005120:	ebba 0b04 	subs.w	fp, sl, r4
 8005124:	d00b      	beq.n	800513e <_svfiprintf_r+0x7e>
 8005126:	465b      	mov	r3, fp
 8005128:	4622      	mov	r2, r4
 800512a:	4629      	mov	r1, r5
 800512c:	4638      	mov	r0, r7
 800512e:	f7ff ff6b 	bl	8005008 <__ssputs_r>
 8005132:	3001      	adds	r0, #1
 8005134:	f000 80a7 	beq.w	8005286 <_svfiprintf_r+0x1c6>
 8005138:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800513a:	445a      	add	r2, fp
 800513c:	9209      	str	r2, [sp, #36]	@ 0x24
 800513e:	f89a 3000 	ldrb.w	r3, [sl]
 8005142:	2b00      	cmp	r3, #0
 8005144:	f000 809f 	beq.w	8005286 <_svfiprintf_r+0x1c6>
 8005148:	2300      	movs	r3, #0
 800514a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800514e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005152:	f10a 0a01 	add.w	sl, sl, #1
 8005156:	9304      	str	r3, [sp, #16]
 8005158:	9307      	str	r3, [sp, #28]
 800515a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800515e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005160:	4654      	mov	r4, sl
 8005162:	2205      	movs	r2, #5
 8005164:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005168:	484e      	ldr	r0, [pc, #312]	@ (80052a4 <_svfiprintf_r+0x1e4>)
 800516a:	f7fb f841 	bl	80001f0 <memchr>
 800516e:	9a04      	ldr	r2, [sp, #16]
 8005170:	b9d8      	cbnz	r0, 80051aa <_svfiprintf_r+0xea>
 8005172:	06d0      	lsls	r0, r2, #27
 8005174:	bf44      	itt	mi
 8005176:	2320      	movmi	r3, #32
 8005178:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800517c:	0711      	lsls	r1, r2, #28
 800517e:	bf44      	itt	mi
 8005180:	232b      	movmi	r3, #43	@ 0x2b
 8005182:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005186:	f89a 3000 	ldrb.w	r3, [sl]
 800518a:	2b2a      	cmp	r3, #42	@ 0x2a
 800518c:	d015      	beq.n	80051ba <_svfiprintf_r+0xfa>
 800518e:	9a07      	ldr	r2, [sp, #28]
 8005190:	4654      	mov	r4, sl
 8005192:	2000      	movs	r0, #0
 8005194:	f04f 0c0a 	mov.w	ip, #10
 8005198:	4621      	mov	r1, r4
 800519a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800519e:	3b30      	subs	r3, #48	@ 0x30
 80051a0:	2b09      	cmp	r3, #9
 80051a2:	d94b      	bls.n	800523c <_svfiprintf_r+0x17c>
 80051a4:	b1b0      	cbz	r0, 80051d4 <_svfiprintf_r+0x114>
 80051a6:	9207      	str	r2, [sp, #28]
 80051a8:	e014      	b.n	80051d4 <_svfiprintf_r+0x114>
 80051aa:	eba0 0308 	sub.w	r3, r0, r8
 80051ae:	fa09 f303 	lsl.w	r3, r9, r3
 80051b2:	4313      	orrs	r3, r2
 80051b4:	9304      	str	r3, [sp, #16]
 80051b6:	46a2      	mov	sl, r4
 80051b8:	e7d2      	b.n	8005160 <_svfiprintf_r+0xa0>
 80051ba:	9b03      	ldr	r3, [sp, #12]
 80051bc:	1d19      	adds	r1, r3, #4
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	9103      	str	r1, [sp, #12]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	bfbb      	ittet	lt
 80051c6:	425b      	neglt	r3, r3
 80051c8:	f042 0202 	orrlt.w	r2, r2, #2
 80051cc:	9307      	strge	r3, [sp, #28]
 80051ce:	9307      	strlt	r3, [sp, #28]
 80051d0:	bfb8      	it	lt
 80051d2:	9204      	strlt	r2, [sp, #16]
 80051d4:	7823      	ldrb	r3, [r4, #0]
 80051d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80051d8:	d10a      	bne.n	80051f0 <_svfiprintf_r+0x130>
 80051da:	7863      	ldrb	r3, [r4, #1]
 80051dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80051de:	d132      	bne.n	8005246 <_svfiprintf_r+0x186>
 80051e0:	9b03      	ldr	r3, [sp, #12]
 80051e2:	1d1a      	adds	r2, r3, #4
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	9203      	str	r2, [sp, #12]
 80051e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80051ec:	3402      	adds	r4, #2
 80051ee:	9305      	str	r3, [sp, #20]
 80051f0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80052b4 <_svfiprintf_r+0x1f4>
 80051f4:	7821      	ldrb	r1, [r4, #0]
 80051f6:	2203      	movs	r2, #3
 80051f8:	4650      	mov	r0, sl
 80051fa:	f7fa fff9 	bl	80001f0 <memchr>
 80051fe:	b138      	cbz	r0, 8005210 <_svfiprintf_r+0x150>
 8005200:	9b04      	ldr	r3, [sp, #16]
 8005202:	eba0 000a 	sub.w	r0, r0, sl
 8005206:	2240      	movs	r2, #64	@ 0x40
 8005208:	4082      	lsls	r2, r0
 800520a:	4313      	orrs	r3, r2
 800520c:	3401      	adds	r4, #1
 800520e:	9304      	str	r3, [sp, #16]
 8005210:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005214:	4824      	ldr	r0, [pc, #144]	@ (80052a8 <_svfiprintf_r+0x1e8>)
 8005216:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800521a:	2206      	movs	r2, #6
 800521c:	f7fa ffe8 	bl	80001f0 <memchr>
 8005220:	2800      	cmp	r0, #0
 8005222:	d036      	beq.n	8005292 <_svfiprintf_r+0x1d2>
 8005224:	4b21      	ldr	r3, [pc, #132]	@ (80052ac <_svfiprintf_r+0x1ec>)
 8005226:	bb1b      	cbnz	r3, 8005270 <_svfiprintf_r+0x1b0>
 8005228:	9b03      	ldr	r3, [sp, #12]
 800522a:	3307      	adds	r3, #7
 800522c:	f023 0307 	bic.w	r3, r3, #7
 8005230:	3308      	adds	r3, #8
 8005232:	9303      	str	r3, [sp, #12]
 8005234:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005236:	4433      	add	r3, r6
 8005238:	9309      	str	r3, [sp, #36]	@ 0x24
 800523a:	e76a      	b.n	8005112 <_svfiprintf_r+0x52>
 800523c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005240:	460c      	mov	r4, r1
 8005242:	2001      	movs	r0, #1
 8005244:	e7a8      	b.n	8005198 <_svfiprintf_r+0xd8>
 8005246:	2300      	movs	r3, #0
 8005248:	3401      	adds	r4, #1
 800524a:	9305      	str	r3, [sp, #20]
 800524c:	4619      	mov	r1, r3
 800524e:	f04f 0c0a 	mov.w	ip, #10
 8005252:	4620      	mov	r0, r4
 8005254:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005258:	3a30      	subs	r2, #48	@ 0x30
 800525a:	2a09      	cmp	r2, #9
 800525c:	d903      	bls.n	8005266 <_svfiprintf_r+0x1a6>
 800525e:	2b00      	cmp	r3, #0
 8005260:	d0c6      	beq.n	80051f0 <_svfiprintf_r+0x130>
 8005262:	9105      	str	r1, [sp, #20]
 8005264:	e7c4      	b.n	80051f0 <_svfiprintf_r+0x130>
 8005266:	fb0c 2101 	mla	r1, ip, r1, r2
 800526a:	4604      	mov	r4, r0
 800526c:	2301      	movs	r3, #1
 800526e:	e7f0      	b.n	8005252 <_svfiprintf_r+0x192>
 8005270:	ab03      	add	r3, sp, #12
 8005272:	9300      	str	r3, [sp, #0]
 8005274:	462a      	mov	r2, r5
 8005276:	4b0e      	ldr	r3, [pc, #56]	@ (80052b0 <_svfiprintf_r+0x1f0>)
 8005278:	a904      	add	r1, sp, #16
 800527a:	4638      	mov	r0, r7
 800527c:	f3af 8000 	nop.w
 8005280:	1c42      	adds	r2, r0, #1
 8005282:	4606      	mov	r6, r0
 8005284:	d1d6      	bne.n	8005234 <_svfiprintf_r+0x174>
 8005286:	89ab      	ldrh	r3, [r5, #12]
 8005288:	065b      	lsls	r3, r3, #25
 800528a:	f53f af2d 	bmi.w	80050e8 <_svfiprintf_r+0x28>
 800528e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005290:	e72c      	b.n	80050ec <_svfiprintf_r+0x2c>
 8005292:	ab03      	add	r3, sp, #12
 8005294:	9300      	str	r3, [sp, #0]
 8005296:	462a      	mov	r2, r5
 8005298:	4b05      	ldr	r3, [pc, #20]	@ (80052b0 <_svfiprintf_r+0x1f0>)
 800529a:	a904      	add	r1, sp, #16
 800529c:	4638      	mov	r0, r7
 800529e:	f000 f879 	bl	8005394 <_printf_i>
 80052a2:	e7ed      	b.n	8005280 <_svfiprintf_r+0x1c0>
 80052a4:	08005f92 	.word	0x08005f92
 80052a8:	08005f9c 	.word	0x08005f9c
 80052ac:	00000000 	.word	0x00000000
 80052b0:	08005009 	.word	0x08005009
 80052b4:	08005f98 	.word	0x08005f98

080052b8 <_printf_common>:
 80052b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052bc:	4616      	mov	r6, r2
 80052be:	4698      	mov	r8, r3
 80052c0:	688a      	ldr	r2, [r1, #8]
 80052c2:	690b      	ldr	r3, [r1, #16]
 80052c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80052c8:	4293      	cmp	r3, r2
 80052ca:	bfb8      	it	lt
 80052cc:	4613      	movlt	r3, r2
 80052ce:	6033      	str	r3, [r6, #0]
 80052d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80052d4:	4607      	mov	r7, r0
 80052d6:	460c      	mov	r4, r1
 80052d8:	b10a      	cbz	r2, 80052de <_printf_common+0x26>
 80052da:	3301      	adds	r3, #1
 80052dc:	6033      	str	r3, [r6, #0]
 80052de:	6823      	ldr	r3, [r4, #0]
 80052e0:	0699      	lsls	r1, r3, #26
 80052e2:	bf42      	ittt	mi
 80052e4:	6833      	ldrmi	r3, [r6, #0]
 80052e6:	3302      	addmi	r3, #2
 80052e8:	6033      	strmi	r3, [r6, #0]
 80052ea:	6825      	ldr	r5, [r4, #0]
 80052ec:	f015 0506 	ands.w	r5, r5, #6
 80052f0:	d106      	bne.n	8005300 <_printf_common+0x48>
 80052f2:	f104 0a19 	add.w	sl, r4, #25
 80052f6:	68e3      	ldr	r3, [r4, #12]
 80052f8:	6832      	ldr	r2, [r6, #0]
 80052fa:	1a9b      	subs	r3, r3, r2
 80052fc:	42ab      	cmp	r3, r5
 80052fe:	dc26      	bgt.n	800534e <_printf_common+0x96>
 8005300:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005304:	6822      	ldr	r2, [r4, #0]
 8005306:	3b00      	subs	r3, #0
 8005308:	bf18      	it	ne
 800530a:	2301      	movne	r3, #1
 800530c:	0692      	lsls	r2, r2, #26
 800530e:	d42b      	bmi.n	8005368 <_printf_common+0xb0>
 8005310:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005314:	4641      	mov	r1, r8
 8005316:	4638      	mov	r0, r7
 8005318:	47c8      	blx	r9
 800531a:	3001      	adds	r0, #1
 800531c:	d01e      	beq.n	800535c <_printf_common+0xa4>
 800531e:	6823      	ldr	r3, [r4, #0]
 8005320:	6922      	ldr	r2, [r4, #16]
 8005322:	f003 0306 	and.w	r3, r3, #6
 8005326:	2b04      	cmp	r3, #4
 8005328:	bf02      	ittt	eq
 800532a:	68e5      	ldreq	r5, [r4, #12]
 800532c:	6833      	ldreq	r3, [r6, #0]
 800532e:	1aed      	subeq	r5, r5, r3
 8005330:	68a3      	ldr	r3, [r4, #8]
 8005332:	bf0c      	ite	eq
 8005334:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005338:	2500      	movne	r5, #0
 800533a:	4293      	cmp	r3, r2
 800533c:	bfc4      	itt	gt
 800533e:	1a9b      	subgt	r3, r3, r2
 8005340:	18ed      	addgt	r5, r5, r3
 8005342:	2600      	movs	r6, #0
 8005344:	341a      	adds	r4, #26
 8005346:	42b5      	cmp	r5, r6
 8005348:	d11a      	bne.n	8005380 <_printf_common+0xc8>
 800534a:	2000      	movs	r0, #0
 800534c:	e008      	b.n	8005360 <_printf_common+0xa8>
 800534e:	2301      	movs	r3, #1
 8005350:	4652      	mov	r2, sl
 8005352:	4641      	mov	r1, r8
 8005354:	4638      	mov	r0, r7
 8005356:	47c8      	blx	r9
 8005358:	3001      	adds	r0, #1
 800535a:	d103      	bne.n	8005364 <_printf_common+0xac>
 800535c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005364:	3501      	adds	r5, #1
 8005366:	e7c6      	b.n	80052f6 <_printf_common+0x3e>
 8005368:	18e1      	adds	r1, r4, r3
 800536a:	1c5a      	adds	r2, r3, #1
 800536c:	2030      	movs	r0, #48	@ 0x30
 800536e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005372:	4422      	add	r2, r4
 8005374:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005378:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800537c:	3302      	adds	r3, #2
 800537e:	e7c7      	b.n	8005310 <_printf_common+0x58>
 8005380:	2301      	movs	r3, #1
 8005382:	4622      	mov	r2, r4
 8005384:	4641      	mov	r1, r8
 8005386:	4638      	mov	r0, r7
 8005388:	47c8      	blx	r9
 800538a:	3001      	adds	r0, #1
 800538c:	d0e6      	beq.n	800535c <_printf_common+0xa4>
 800538e:	3601      	adds	r6, #1
 8005390:	e7d9      	b.n	8005346 <_printf_common+0x8e>
	...

08005394 <_printf_i>:
 8005394:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005398:	7e0f      	ldrb	r7, [r1, #24]
 800539a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800539c:	2f78      	cmp	r7, #120	@ 0x78
 800539e:	4691      	mov	r9, r2
 80053a0:	4680      	mov	r8, r0
 80053a2:	460c      	mov	r4, r1
 80053a4:	469a      	mov	sl, r3
 80053a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80053aa:	d807      	bhi.n	80053bc <_printf_i+0x28>
 80053ac:	2f62      	cmp	r7, #98	@ 0x62
 80053ae:	d80a      	bhi.n	80053c6 <_printf_i+0x32>
 80053b0:	2f00      	cmp	r7, #0
 80053b2:	f000 80d2 	beq.w	800555a <_printf_i+0x1c6>
 80053b6:	2f58      	cmp	r7, #88	@ 0x58
 80053b8:	f000 80b9 	beq.w	800552e <_printf_i+0x19a>
 80053bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80053c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80053c4:	e03a      	b.n	800543c <_printf_i+0xa8>
 80053c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80053ca:	2b15      	cmp	r3, #21
 80053cc:	d8f6      	bhi.n	80053bc <_printf_i+0x28>
 80053ce:	a101      	add	r1, pc, #4	@ (adr r1, 80053d4 <_printf_i+0x40>)
 80053d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80053d4:	0800542d 	.word	0x0800542d
 80053d8:	08005441 	.word	0x08005441
 80053dc:	080053bd 	.word	0x080053bd
 80053e0:	080053bd 	.word	0x080053bd
 80053e4:	080053bd 	.word	0x080053bd
 80053e8:	080053bd 	.word	0x080053bd
 80053ec:	08005441 	.word	0x08005441
 80053f0:	080053bd 	.word	0x080053bd
 80053f4:	080053bd 	.word	0x080053bd
 80053f8:	080053bd 	.word	0x080053bd
 80053fc:	080053bd 	.word	0x080053bd
 8005400:	08005541 	.word	0x08005541
 8005404:	0800546b 	.word	0x0800546b
 8005408:	080054fb 	.word	0x080054fb
 800540c:	080053bd 	.word	0x080053bd
 8005410:	080053bd 	.word	0x080053bd
 8005414:	08005563 	.word	0x08005563
 8005418:	080053bd 	.word	0x080053bd
 800541c:	0800546b 	.word	0x0800546b
 8005420:	080053bd 	.word	0x080053bd
 8005424:	080053bd 	.word	0x080053bd
 8005428:	08005503 	.word	0x08005503
 800542c:	6833      	ldr	r3, [r6, #0]
 800542e:	1d1a      	adds	r2, r3, #4
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	6032      	str	r2, [r6, #0]
 8005434:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005438:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800543c:	2301      	movs	r3, #1
 800543e:	e09d      	b.n	800557c <_printf_i+0x1e8>
 8005440:	6833      	ldr	r3, [r6, #0]
 8005442:	6820      	ldr	r0, [r4, #0]
 8005444:	1d19      	adds	r1, r3, #4
 8005446:	6031      	str	r1, [r6, #0]
 8005448:	0606      	lsls	r6, r0, #24
 800544a:	d501      	bpl.n	8005450 <_printf_i+0xbc>
 800544c:	681d      	ldr	r5, [r3, #0]
 800544e:	e003      	b.n	8005458 <_printf_i+0xc4>
 8005450:	0645      	lsls	r5, r0, #25
 8005452:	d5fb      	bpl.n	800544c <_printf_i+0xb8>
 8005454:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005458:	2d00      	cmp	r5, #0
 800545a:	da03      	bge.n	8005464 <_printf_i+0xd0>
 800545c:	232d      	movs	r3, #45	@ 0x2d
 800545e:	426d      	negs	r5, r5
 8005460:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005464:	4859      	ldr	r0, [pc, #356]	@ (80055cc <_printf_i+0x238>)
 8005466:	230a      	movs	r3, #10
 8005468:	e011      	b.n	800548e <_printf_i+0xfa>
 800546a:	6821      	ldr	r1, [r4, #0]
 800546c:	6833      	ldr	r3, [r6, #0]
 800546e:	0608      	lsls	r0, r1, #24
 8005470:	f853 5b04 	ldr.w	r5, [r3], #4
 8005474:	d402      	bmi.n	800547c <_printf_i+0xe8>
 8005476:	0649      	lsls	r1, r1, #25
 8005478:	bf48      	it	mi
 800547a:	b2ad      	uxthmi	r5, r5
 800547c:	2f6f      	cmp	r7, #111	@ 0x6f
 800547e:	4853      	ldr	r0, [pc, #332]	@ (80055cc <_printf_i+0x238>)
 8005480:	6033      	str	r3, [r6, #0]
 8005482:	bf14      	ite	ne
 8005484:	230a      	movne	r3, #10
 8005486:	2308      	moveq	r3, #8
 8005488:	2100      	movs	r1, #0
 800548a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800548e:	6866      	ldr	r6, [r4, #4]
 8005490:	60a6      	str	r6, [r4, #8]
 8005492:	2e00      	cmp	r6, #0
 8005494:	bfa2      	ittt	ge
 8005496:	6821      	ldrge	r1, [r4, #0]
 8005498:	f021 0104 	bicge.w	r1, r1, #4
 800549c:	6021      	strge	r1, [r4, #0]
 800549e:	b90d      	cbnz	r5, 80054a4 <_printf_i+0x110>
 80054a0:	2e00      	cmp	r6, #0
 80054a2:	d04b      	beq.n	800553c <_printf_i+0x1a8>
 80054a4:	4616      	mov	r6, r2
 80054a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80054aa:	fb03 5711 	mls	r7, r3, r1, r5
 80054ae:	5dc7      	ldrb	r7, [r0, r7]
 80054b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80054b4:	462f      	mov	r7, r5
 80054b6:	42bb      	cmp	r3, r7
 80054b8:	460d      	mov	r5, r1
 80054ba:	d9f4      	bls.n	80054a6 <_printf_i+0x112>
 80054bc:	2b08      	cmp	r3, #8
 80054be:	d10b      	bne.n	80054d8 <_printf_i+0x144>
 80054c0:	6823      	ldr	r3, [r4, #0]
 80054c2:	07df      	lsls	r7, r3, #31
 80054c4:	d508      	bpl.n	80054d8 <_printf_i+0x144>
 80054c6:	6923      	ldr	r3, [r4, #16]
 80054c8:	6861      	ldr	r1, [r4, #4]
 80054ca:	4299      	cmp	r1, r3
 80054cc:	bfde      	ittt	le
 80054ce:	2330      	movle	r3, #48	@ 0x30
 80054d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80054d4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80054d8:	1b92      	subs	r2, r2, r6
 80054da:	6122      	str	r2, [r4, #16]
 80054dc:	f8cd a000 	str.w	sl, [sp]
 80054e0:	464b      	mov	r3, r9
 80054e2:	aa03      	add	r2, sp, #12
 80054e4:	4621      	mov	r1, r4
 80054e6:	4640      	mov	r0, r8
 80054e8:	f7ff fee6 	bl	80052b8 <_printf_common>
 80054ec:	3001      	adds	r0, #1
 80054ee:	d14a      	bne.n	8005586 <_printf_i+0x1f2>
 80054f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80054f4:	b004      	add	sp, #16
 80054f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054fa:	6823      	ldr	r3, [r4, #0]
 80054fc:	f043 0320 	orr.w	r3, r3, #32
 8005500:	6023      	str	r3, [r4, #0]
 8005502:	4833      	ldr	r0, [pc, #204]	@ (80055d0 <_printf_i+0x23c>)
 8005504:	2778      	movs	r7, #120	@ 0x78
 8005506:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800550a:	6823      	ldr	r3, [r4, #0]
 800550c:	6831      	ldr	r1, [r6, #0]
 800550e:	061f      	lsls	r7, r3, #24
 8005510:	f851 5b04 	ldr.w	r5, [r1], #4
 8005514:	d402      	bmi.n	800551c <_printf_i+0x188>
 8005516:	065f      	lsls	r7, r3, #25
 8005518:	bf48      	it	mi
 800551a:	b2ad      	uxthmi	r5, r5
 800551c:	6031      	str	r1, [r6, #0]
 800551e:	07d9      	lsls	r1, r3, #31
 8005520:	bf44      	itt	mi
 8005522:	f043 0320 	orrmi.w	r3, r3, #32
 8005526:	6023      	strmi	r3, [r4, #0]
 8005528:	b11d      	cbz	r5, 8005532 <_printf_i+0x19e>
 800552a:	2310      	movs	r3, #16
 800552c:	e7ac      	b.n	8005488 <_printf_i+0xf4>
 800552e:	4827      	ldr	r0, [pc, #156]	@ (80055cc <_printf_i+0x238>)
 8005530:	e7e9      	b.n	8005506 <_printf_i+0x172>
 8005532:	6823      	ldr	r3, [r4, #0]
 8005534:	f023 0320 	bic.w	r3, r3, #32
 8005538:	6023      	str	r3, [r4, #0]
 800553a:	e7f6      	b.n	800552a <_printf_i+0x196>
 800553c:	4616      	mov	r6, r2
 800553e:	e7bd      	b.n	80054bc <_printf_i+0x128>
 8005540:	6833      	ldr	r3, [r6, #0]
 8005542:	6825      	ldr	r5, [r4, #0]
 8005544:	6961      	ldr	r1, [r4, #20]
 8005546:	1d18      	adds	r0, r3, #4
 8005548:	6030      	str	r0, [r6, #0]
 800554a:	062e      	lsls	r6, r5, #24
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	d501      	bpl.n	8005554 <_printf_i+0x1c0>
 8005550:	6019      	str	r1, [r3, #0]
 8005552:	e002      	b.n	800555a <_printf_i+0x1c6>
 8005554:	0668      	lsls	r0, r5, #25
 8005556:	d5fb      	bpl.n	8005550 <_printf_i+0x1bc>
 8005558:	8019      	strh	r1, [r3, #0]
 800555a:	2300      	movs	r3, #0
 800555c:	6123      	str	r3, [r4, #16]
 800555e:	4616      	mov	r6, r2
 8005560:	e7bc      	b.n	80054dc <_printf_i+0x148>
 8005562:	6833      	ldr	r3, [r6, #0]
 8005564:	1d1a      	adds	r2, r3, #4
 8005566:	6032      	str	r2, [r6, #0]
 8005568:	681e      	ldr	r6, [r3, #0]
 800556a:	6862      	ldr	r2, [r4, #4]
 800556c:	2100      	movs	r1, #0
 800556e:	4630      	mov	r0, r6
 8005570:	f7fa fe3e 	bl	80001f0 <memchr>
 8005574:	b108      	cbz	r0, 800557a <_printf_i+0x1e6>
 8005576:	1b80      	subs	r0, r0, r6
 8005578:	6060      	str	r0, [r4, #4]
 800557a:	6863      	ldr	r3, [r4, #4]
 800557c:	6123      	str	r3, [r4, #16]
 800557e:	2300      	movs	r3, #0
 8005580:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005584:	e7aa      	b.n	80054dc <_printf_i+0x148>
 8005586:	6923      	ldr	r3, [r4, #16]
 8005588:	4632      	mov	r2, r6
 800558a:	4649      	mov	r1, r9
 800558c:	4640      	mov	r0, r8
 800558e:	47d0      	blx	sl
 8005590:	3001      	adds	r0, #1
 8005592:	d0ad      	beq.n	80054f0 <_printf_i+0x15c>
 8005594:	6823      	ldr	r3, [r4, #0]
 8005596:	079b      	lsls	r3, r3, #30
 8005598:	d413      	bmi.n	80055c2 <_printf_i+0x22e>
 800559a:	68e0      	ldr	r0, [r4, #12]
 800559c:	9b03      	ldr	r3, [sp, #12]
 800559e:	4298      	cmp	r0, r3
 80055a0:	bfb8      	it	lt
 80055a2:	4618      	movlt	r0, r3
 80055a4:	e7a6      	b.n	80054f4 <_printf_i+0x160>
 80055a6:	2301      	movs	r3, #1
 80055a8:	4632      	mov	r2, r6
 80055aa:	4649      	mov	r1, r9
 80055ac:	4640      	mov	r0, r8
 80055ae:	47d0      	blx	sl
 80055b0:	3001      	adds	r0, #1
 80055b2:	d09d      	beq.n	80054f0 <_printf_i+0x15c>
 80055b4:	3501      	adds	r5, #1
 80055b6:	68e3      	ldr	r3, [r4, #12]
 80055b8:	9903      	ldr	r1, [sp, #12]
 80055ba:	1a5b      	subs	r3, r3, r1
 80055bc:	42ab      	cmp	r3, r5
 80055be:	dcf2      	bgt.n	80055a6 <_printf_i+0x212>
 80055c0:	e7eb      	b.n	800559a <_printf_i+0x206>
 80055c2:	2500      	movs	r5, #0
 80055c4:	f104 0619 	add.w	r6, r4, #25
 80055c8:	e7f5      	b.n	80055b6 <_printf_i+0x222>
 80055ca:	bf00      	nop
 80055cc:	08005fa3 	.word	0x08005fa3
 80055d0:	08005fb4 	.word	0x08005fb4

080055d4 <__sflush_r>:
 80055d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80055d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055dc:	0716      	lsls	r6, r2, #28
 80055de:	4605      	mov	r5, r0
 80055e0:	460c      	mov	r4, r1
 80055e2:	d454      	bmi.n	800568e <__sflush_r+0xba>
 80055e4:	684b      	ldr	r3, [r1, #4]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	dc02      	bgt.n	80055f0 <__sflush_r+0x1c>
 80055ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	dd48      	ble.n	8005682 <__sflush_r+0xae>
 80055f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80055f2:	2e00      	cmp	r6, #0
 80055f4:	d045      	beq.n	8005682 <__sflush_r+0xae>
 80055f6:	2300      	movs	r3, #0
 80055f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80055fc:	682f      	ldr	r7, [r5, #0]
 80055fe:	6a21      	ldr	r1, [r4, #32]
 8005600:	602b      	str	r3, [r5, #0]
 8005602:	d030      	beq.n	8005666 <__sflush_r+0x92>
 8005604:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005606:	89a3      	ldrh	r3, [r4, #12]
 8005608:	0759      	lsls	r1, r3, #29
 800560a:	d505      	bpl.n	8005618 <__sflush_r+0x44>
 800560c:	6863      	ldr	r3, [r4, #4]
 800560e:	1ad2      	subs	r2, r2, r3
 8005610:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005612:	b10b      	cbz	r3, 8005618 <__sflush_r+0x44>
 8005614:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005616:	1ad2      	subs	r2, r2, r3
 8005618:	2300      	movs	r3, #0
 800561a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800561c:	6a21      	ldr	r1, [r4, #32]
 800561e:	4628      	mov	r0, r5
 8005620:	47b0      	blx	r6
 8005622:	1c43      	adds	r3, r0, #1
 8005624:	89a3      	ldrh	r3, [r4, #12]
 8005626:	d106      	bne.n	8005636 <__sflush_r+0x62>
 8005628:	6829      	ldr	r1, [r5, #0]
 800562a:	291d      	cmp	r1, #29
 800562c:	d82b      	bhi.n	8005686 <__sflush_r+0xb2>
 800562e:	4a2a      	ldr	r2, [pc, #168]	@ (80056d8 <__sflush_r+0x104>)
 8005630:	410a      	asrs	r2, r1
 8005632:	07d6      	lsls	r6, r2, #31
 8005634:	d427      	bmi.n	8005686 <__sflush_r+0xb2>
 8005636:	2200      	movs	r2, #0
 8005638:	6062      	str	r2, [r4, #4]
 800563a:	04d9      	lsls	r1, r3, #19
 800563c:	6922      	ldr	r2, [r4, #16]
 800563e:	6022      	str	r2, [r4, #0]
 8005640:	d504      	bpl.n	800564c <__sflush_r+0x78>
 8005642:	1c42      	adds	r2, r0, #1
 8005644:	d101      	bne.n	800564a <__sflush_r+0x76>
 8005646:	682b      	ldr	r3, [r5, #0]
 8005648:	b903      	cbnz	r3, 800564c <__sflush_r+0x78>
 800564a:	6560      	str	r0, [r4, #84]	@ 0x54
 800564c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800564e:	602f      	str	r7, [r5, #0]
 8005650:	b1b9      	cbz	r1, 8005682 <__sflush_r+0xae>
 8005652:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005656:	4299      	cmp	r1, r3
 8005658:	d002      	beq.n	8005660 <__sflush_r+0x8c>
 800565a:	4628      	mov	r0, r5
 800565c:	f7ff fbd4 	bl	8004e08 <_free_r>
 8005660:	2300      	movs	r3, #0
 8005662:	6363      	str	r3, [r4, #52]	@ 0x34
 8005664:	e00d      	b.n	8005682 <__sflush_r+0xae>
 8005666:	2301      	movs	r3, #1
 8005668:	4628      	mov	r0, r5
 800566a:	47b0      	blx	r6
 800566c:	4602      	mov	r2, r0
 800566e:	1c50      	adds	r0, r2, #1
 8005670:	d1c9      	bne.n	8005606 <__sflush_r+0x32>
 8005672:	682b      	ldr	r3, [r5, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d0c6      	beq.n	8005606 <__sflush_r+0x32>
 8005678:	2b1d      	cmp	r3, #29
 800567a:	d001      	beq.n	8005680 <__sflush_r+0xac>
 800567c:	2b16      	cmp	r3, #22
 800567e:	d11e      	bne.n	80056be <__sflush_r+0xea>
 8005680:	602f      	str	r7, [r5, #0]
 8005682:	2000      	movs	r0, #0
 8005684:	e022      	b.n	80056cc <__sflush_r+0xf8>
 8005686:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800568a:	b21b      	sxth	r3, r3
 800568c:	e01b      	b.n	80056c6 <__sflush_r+0xf2>
 800568e:	690f      	ldr	r7, [r1, #16]
 8005690:	2f00      	cmp	r7, #0
 8005692:	d0f6      	beq.n	8005682 <__sflush_r+0xae>
 8005694:	0793      	lsls	r3, r2, #30
 8005696:	680e      	ldr	r6, [r1, #0]
 8005698:	bf08      	it	eq
 800569a:	694b      	ldreq	r3, [r1, #20]
 800569c:	600f      	str	r7, [r1, #0]
 800569e:	bf18      	it	ne
 80056a0:	2300      	movne	r3, #0
 80056a2:	eba6 0807 	sub.w	r8, r6, r7
 80056a6:	608b      	str	r3, [r1, #8]
 80056a8:	f1b8 0f00 	cmp.w	r8, #0
 80056ac:	dde9      	ble.n	8005682 <__sflush_r+0xae>
 80056ae:	6a21      	ldr	r1, [r4, #32]
 80056b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80056b2:	4643      	mov	r3, r8
 80056b4:	463a      	mov	r2, r7
 80056b6:	4628      	mov	r0, r5
 80056b8:	47b0      	blx	r6
 80056ba:	2800      	cmp	r0, #0
 80056bc:	dc08      	bgt.n	80056d0 <__sflush_r+0xfc>
 80056be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80056c6:	81a3      	strh	r3, [r4, #12]
 80056c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80056cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056d0:	4407      	add	r7, r0
 80056d2:	eba8 0800 	sub.w	r8, r8, r0
 80056d6:	e7e7      	b.n	80056a8 <__sflush_r+0xd4>
 80056d8:	dfbffffe 	.word	0xdfbffffe

080056dc <_fflush_r>:
 80056dc:	b538      	push	{r3, r4, r5, lr}
 80056de:	690b      	ldr	r3, [r1, #16]
 80056e0:	4605      	mov	r5, r0
 80056e2:	460c      	mov	r4, r1
 80056e4:	b913      	cbnz	r3, 80056ec <_fflush_r+0x10>
 80056e6:	2500      	movs	r5, #0
 80056e8:	4628      	mov	r0, r5
 80056ea:	bd38      	pop	{r3, r4, r5, pc}
 80056ec:	b118      	cbz	r0, 80056f6 <_fflush_r+0x1a>
 80056ee:	6a03      	ldr	r3, [r0, #32]
 80056f0:	b90b      	cbnz	r3, 80056f6 <_fflush_r+0x1a>
 80056f2:	f7ff f9f9 	bl	8004ae8 <__sinit>
 80056f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d0f3      	beq.n	80056e6 <_fflush_r+0xa>
 80056fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005700:	07d0      	lsls	r0, r2, #31
 8005702:	d404      	bmi.n	800570e <_fflush_r+0x32>
 8005704:	0599      	lsls	r1, r3, #22
 8005706:	d402      	bmi.n	800570e <_fflush_r+0x32>
 8005708:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800570a:	f7ff fb5c 	bl	8004dc6 <__retarget_lock_acquire_recursive>
 800570e:	4628      	mov	r0, r5
 8005710:	4621      	mov	r1, r4
 8005712:	f7ff ff5f 	bl	80055d4 <__sflush_r>
 8005716:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005718:	07da      	lsls	r2, r3, #31
 800571a:	4605      	mov	r5, r0
 800571c:	d4e4      	bmi.n	80056e8 <_fflush_r+0xc>
 800571e:	89a3      	ldrh	r3, [r4, #12]
 8005720:	059b      	lsls	r3, r3, #22
 8005722:	d4e1      	bmi.n	80056e8 <_fflush_r+0xc>
 8005724:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005726:	f7ff fb4f 	bl	8004dc8 <__retarget_lock_release_recursive>
 800572a:	e7dd      	b.n	80056e8 <_fflush_r+0xc>

0800572c <fiprintf>:
 800572c:	b40e      	push	{r1, r2, r3}
 800572e:	b503      	push	{r0, r1, lr}
 8005730:	4601      	mov	r1, r0
 8005732:	ab03      	add	r3, sp, #12
 8005734:	4805      	ldr	r0, [pc, #20]	@ (800574c <fiprintf+0x20>)
 8005736:	f853 2b04 	ldr.w	r2, [r3], #4
 800573a:	6800      	ldr	r0, [r0, #0]
 800573c:	9301      	str	r3, [sp, #4]
 800573e:	f000 f89d 	bl	800587c <_vfiprintf_r>
 8005742:	b002      	add	sp, #8
 8005744:	f85d eb04 	ldr.w	lr, [sp], #4
 8005748:	b003      	add	sp, #12
 800574a:	4770      	bx	lr
 800574c:	2000001c 	.word	0x2000001c

08005750 <memmove>:
 8005750:	4288      	cmp	r0, r1
 8005752:	b510      	push	{r4, lr}
 8005754:	eb01 0402 	add.w	r4, r1, r2
 8005758:	d902      	bls.n	8005760 <memmove+0x10>
 800575a:	4284      	cmp	r4, r0
 800575c:	4623      	mov	r3, r4
 800575e:	d807      	bhi.n	8005770 <memmove+0x20>
 8005760:	1e43      	subs	r3, r0, #1
 8005762:	42a1      	cmp	r1, r4
 8005764:	d008      	beq.n	8005778 <memmove+0x28>
 8005766:	f811 2b01 	ldrb.w	r2, [r1], #1
 800576a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800576e:	e7f8      	b.n	8005762 <memmove+0x12>
 8005770:	4402      	add	r2, r0
 8005772:	4601      	mov	r1, r0
 8005774:	428a      	cmp	r2, r1
 8005776:	d100      	bne.n	800577a <memmove+0x2a>
 8005778:	bd10      	pop	{r4, pc}
 800577a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800577e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005782:	e7f7      	b.n	8005774 <memmove+0x24>

08005784 <_sbrk_r>:
 8005784:	b538      	push	{r3, r4, r5, lr}
 8005786:	4d06      	ldr	r5, [pc, #24]	@ (80057a0 <_sbrk_r+0x1c>)
 8005788:	2300      	movs	r3, #0
 800578a:	4604      	mov	r4, r0
 800578c:	4608      	mov	r0, r1
 800578e:	602b      	str	r3, [r5, #0]
 8005790:	f7fb feb0 	bl	80014f4 <_sbrk>
 8005794:	1c43      	adds	r3, r0, #1
 8005796:	d102      	bne.n	800579e <_sbrk_r+0x1a>
 8005798:	682b      	ldr	r3, [r5, #0]
 800579a:	b103      	cbz	r3, 800579e <_sbrk_r+0x1a>
 800579c:	6023      	str	r3, [r4, #0]
 800579e:	bd38      	pop	{r3, r4, r5, pc}
 80057a0:	20000490 	.word	0x20000490

080057a4 <memcpy>:
 80057a4:	440a      	add	r2, r1
 80057a6:	4291      	cmp	r1, r2
 80057a8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80057ac:	d100      	bne.n	80057b0 <memcpy+0xc>
 80057ae:	4770      	bx	lr
 80057b0:	b510      	push	{r4, lr}
 80057b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057ba:	4291      	cmp	r1, r2
 80057bc:	d1f9      	bne.n	80057b2 <memcpy+0xe>
 80057be:	bd10      	pop	{r4, pc}

080057c0 <abort>:
 80057c0:	b508      	push	{r3, lr}
 80057c2:	2006      	movs	r0, #6
 80057c4:	f000 fa2e 	bl	8005c24 <raise>
 80057c8:	2001      	movs	r0, #1
 80057ca:	f7fb fe1b 	bl	8001404 <_exit>

080057ce <_realloc_r>:
 80057ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057d2:	4680      	mov	r8, r0
 80057d4:	4615      	mov	r5, r2
 80057d6:	460c      	mov	r4, r1
 80057d8:	b921      	cbnz	r1, 80057e4 <_realloc_r+0x16>
 80057da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057de:	4611      	mov	r1, r2
 80057e0:	f7ff bb86 	b.w	8004ef0 <_malloc_r>
 80057e4:	b92a      	cbnz	r2, 80057f2 <_realloc_r+0x24>
 80057e6:	f7ff fb0f 	bl	8004e08 <_free_r>
 80057ea:	2400      	movs	r4, #0
 80057ec:	4620      	mov	r0, r4
 80057ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057f2:	f000 fa33 	bl	8005c5c <_malloc_usable_size_r>
 80057f6:	4285      	cmp	r5, r0
 80057f8:	4606      	mov	r6, r0
 80057fa:	d802      	bhi.n	8005802 <_realloc_r+0x34>
 80057fc:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005800:	d8f4      	bhi.n	80057ec <_realloc_r+0x1e>
 8005802:	4629      	mov	r1, r5
 8005804:	4640      	mov	r0, r8
 8005806:	f7ff fb73 	bl	8004ef0 <_malloc_r>
 800580a:	4607      	mov	r7, r0
 800580c:	2800      	cmp	r0, #0
 800580e:	d0ec      	beq.n	80057ea <_realloc_r+0x1c>
 8005810:	42b5      	cmp	r5, r6
 8005812:	462a      	mov	r2, r5
 8005814:	4621      	mov	r1, r4
 8005816:	bf28      	it	cs
 8005818:	4632      	movcs	r2, r6
 800581a:	f7ff ffc3 	bl	80057a4 <memcpy>
 800581e:	4621      	mov	r1, r4
 8005820:	4640      	mov	r0, r8
 8005822:	f7ff faf1 	bl	8004e08 <_free_r>
 8005826:	463c      	mov	r4, r7
 8005828:	e7e0      	b.n	80057ec <_realloc_r+0x1e>

0800582a <__sfputc_r>:
 800582a:	6893      	ldr	r3, [r2, #8]
 800582c:	3b01      	subs	r3, #1
 800582e:	2b00      	cmp	r3, #0
 8005830:	b410      	push	{r4}
 8005832:	6093      	str	r3, [r2, #8]
 8005834:	da08      	bge.n	8005848 <__sfputc_r+0x1e>
 8005836:	6994      	ldr	r4, [r2, #24]
 8005838:	42a3      	cmp	r3, r4
 800583a:	db01      	blt.n	8005840 <__sfputc_r+0x16>
 800583c:	290a      	cmp	r1, #10
 800583e:	d103      	bne.n	8005848 <__sfputc_r+0x1e>
 8005840:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005844:	f000 b932 	b.w	8005aac <__swbuf_r>
 8005848:	6813      	ldr	r3, [r2, #0]
 800584a:	1c58      	adds	r0, r3, #1
 800584c:	6010      	str	r0, [r2, #0]
 800584e:	7019      	strb	r1, [r3, #0]
 8005850:	4608      	mov	r0, r1
 8005852:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005856:	4770      	bx	lr

08005858 <__sfputs_r>:
 8005858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800585a:	4606      	mov	r6, r0
 800585c:	460f      	mov	r7, r1
 800585e:	4614      	mov	r4, r2
 8005860:	18d5      	adds	r5, r2, r3
 8005862:	42ac      	cmp	r4, r5
 8005864:	d101      	bne.n	800586a <__sfputs_r+0x12>
 8005866:	2000      	movs	r0, #0
 8005868:	e007      	b.n	800587a <__sfputs_r+0x22>
 800586a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800586e:	463a      	mov	r2, r7
 8005870:	4630      	mov	r0, r6
 8005872:	f7ff ffda 	bl	800582a <__sfputc_r>
 8005876:	1c43      	adds	r3, r0, #1
 8005878:	d1f3      	bne.n	8005862 <__sfputs_r+0xa>
 800587a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800587c <_vfiprintf_r>:
 800587c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005880:	460d      	mov	r5, r1
 8005882:	b09d      	sub	sp, #116	@ 0x74
 8005884:	4614      	mov	r4, r2
 8005886:	4698      	mov	r8, r3
 8005888:	4606      	mov	r6, r0
 800588a:	b118      	cbz	r0, 8005894 <_vfiprintf_r+0x18>
 800588c:	6a03      	ldr	r3, [r0, #32]
 800588e:	b90b      	cbnz	r3, 8005894 <_vfiprintf_r+0x18>
 8005890:	f7ff f92a 	bl	8004ae8 <__sinit>
 8005894:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005896:	07d9      	lsls	r1, r3, #31
 8005898:	d405      	bmi.n	80058a6 <_vfiprintf_r+0x2a>
 800589a:	89ab      	ldrh	r3, [r5, #12]
 800589c:	059a      	lsls	r2, r3, #22
 800589e:	d402      	bmi.n	80058a6 <_vfiprintf_r+0x2a>
 80058a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80058a2:	f7ff fa90 	bl	8004dc6 <__retarget_lock_acquire_recursive>
 80058a6:	89ab      	ldrh	r3, [r5, #12]
 80058a8:	071b      	lsls	r3, r3, #28
 80058aa:	d501      	bpl.n	80058b0 <_vfiprintf_r+0x34>
 80058ac:	692b      	ldr	r3, [r5, #16]
 80058ae:	b99b      	cbnz	r3, 80058d8 <_vfiprintf_r+0x5c>
 80058b0:	4629      	mov	r1, r5
 80058b2:	4630      	mov	r0, r6
 80058b4:	f000 f938 	bl	8005b28 <__swsetup_r>
 80058b8:	b170      	cbz	r0, 80058d8 <_vfiprintf_r+0x5c>
 80058ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80058bc:	07dc      	lsls	r4, r3, #31
 80058be:	d504      	bpl.n	80058ca <_vfiprintf_r+0x4e>
 80058c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80058c4:	b01d      	add	sp, #116	@ 0x74
 80058c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058ca:	89ab      	ldrh	r3, [r5, #12]
 80058cc:	0598      	lsls	r0, r3, #22
 80058ce:	d4f7      	bmi.n	80058c0 <_vfiprintf_r+0x44>
 80058d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80058d2:	f7ff fa79 	bl	8004dc8 <__retarget_lock_release_recursive>
 80058d6:	e7f3      	b.n	80058c0 <_vfiprintf_r+0x44>
 80058d8:	2300      	movs	r3, #0
 80058da:	9309      	str	r3, [sp, #36]	@ 0x24
 80058dc:	2320      	movs	r3, #32
 80058de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80058e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80058e6:	2330      	movs	r3, #48	@ 0x30
 80058e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005a98 <_vfiprintf_r+0x21c>
 80058ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80058f0:	f04f 0901 	mov.w	r9, #1
 80058f4:	4623      	mov	r3, r4
 80058f6:	469a      	mov	sl, r3
 80058f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058fc:	b10a      	cbz	r2, 8005902 <_vfiprintf_r+0x86>
 80058fe:	2a25      	cmp	r2, #37	@ 0x25
 8005900:	d1f9      	bne.n	80058f6 <_vfiprintf_r+0x7a>
 8005902:	ebba 0b04 	subs.w	fp, sl, r4
 8005906:	d00b      	beq.n	8005920 <_vfiprintf_r+0xa4>
 8005908:	465b      	mov	r3, fp
 800590a:	4622      	mov	r2, r4
 800590c:	4629      	mov	r1, r5
 800590e:	4630      	mov	r0, r6
 8005910:	f7ff ffa2 	bl	8005858 <__sfputs_r>
 8005914:	3001      	adds	r0, #1
 8005916:	f000 80a7 	beq.w	8005a68 <_vfiprintf_r+0x1ec>
 800591a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800591c:	445a      	add	r2, fp
 800591e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005920:	f89a 3000 	ldrb.w	r3, [sl]
 8005924:	2b00      	cmp	r3, #0
 8005926:	f000 809f 	beq.w	8005a68 <_vfiprintf_r+0x1ec>
 800592a:	2300      	movs	r3, #0
 800592c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005930:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005934:	f10a 0a01 	add.w	sl, sl, #1
 8005938:	9304      	str	r3, [sp, #16]
 800593a:	9307      	str	r3, [sp, #28]
 800593c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005940:	931a      	str	r3, [sp, #104]	@ 0x68
 8005942:	4654      	mov	r4, sl
 8005944:	2205      	movs	r2, #5
 8005946:	f814 1b01 	ldrb.w	r1, [r4], #1
 800594a:	4853      	ldr	r0, [pc, #332]	@ (8005a98 <_vfiprintf_r+0x21c>)
 800594c:	f7fa fc50 	bl	80001f0 <memchr>
 8005950:	9a04      	ldr	r2, [sp, #16]
 8005952:	b9d8      	cbnz	r0, 800598c <_vfiprintf_r+0x110>
 8005954:	06d1      	lsls	r1, r2, #27
 8005956:	bf44      	itt	mi
 8005958:	2320      	movmi	r3, #32
 800595a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800595e:	0713      	lsls	r3, r2, #28
 8005960:	bf44      	itt	mi
 8005962:	232b      	movmi	r3, #43	@ 0x2b
 8005964:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005968:	f89a 3000 	ldrb.w	r3, [sl]
 800596c:	2b2a      	cmp	r3, #42	@ 0x2a
 800596e:	d015      	beq.n	800599c <_vfiprintf_r+0x120>
 8005970:	9a07      	ldr	r2, [sp, #28]
 8005972:	4654      	mov	r4, sl
 8005974:	2000      	movs	r0, #0
 8005976:	f04f 0c0a 	mov.w	ip, #10
 800597a:	4621      	mov	r1, r4
 800597c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005980:	3b30      	subs	r3, #48	@ 0x30
 8005982:	2b09      	cmp	r3, #9
 8005984:	d94b      	bls.n	8005a1e <_vfiprintf_r+0x1a2>
 8005986:	b1b0      	cbz	r0, 80059b6 <_vfiprintf_r+0x13a>
 8005988:	9207      	str	r2, [sp, #28]
 800598a:	e014      	b.n	80059b6 <_vfiprintf_r+0x13a>
 800598c:	eba0 0308 	sub.w	r3, r0, r8
 8005990:	fa09 f303 	lsl.w	r3, r9, r3
 8005994:	4313      	orrs	r3, r2
 8005996:	9304      	str	r3, [sp, #16]
 8005998:	46a2      	mov	sl, r4
 800599a:	e7d2      	b.n	8005942 <_vfiprintf_r+0xc6>
 800599c:	9b03      	ldr	r3, [sp, #12]
 800599e:	1d19      	adds	r1, r3, #4
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	9103      	str	r1, [sp, #12]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	bfbb      	ittet	lt
 80059a8:	425b      	neglt	r3, r3
 80059aa:	f042 0202 	orrlt.w	r2, r2, #2
 80059ae:	9307      	strge	r3, [sp, #28]
 80059b0:	9307      	strlt	r3, [sp, #28]
 80059b2:	bfb8      	it	lt
 80059b4:	9204      	strlt	r2, [sp, #16]
 80059b6:	7823      	ldrb	r3, [r4, #0]
 80059b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80059ba:	d10a      	bne.n	80059d2 <_vfiprintf_r+0x156>
 80059bc:	7863      	ldrb	r3, [r4, #1]
 80059be:	2b2a      	cmp	r3, #42	@ 0x2a
 80059c0:	d132      	bne.n	8005a28 <_vfiprintf_r+0x1ac>
 80059c2:	9b03      	ldr	r3, [sp, #12]
 80059c4:	1d1a      	adds	r2, r3, #4
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	9203      	str	r2, [sp, #12]
 80059ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80059ce:	3402      	adds	r4, #2
 80059d0:	9305      	str	r3, [sp, #20]
 80059d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005aa8 <_vfiprintf_r+0x22c>
 80059d6:	7821      	ldrb	r1, [r4, #0]
 80059d8:	2203      	movs	r2, #3
 80059da:	4650      	mov	r0, sl
 80059dc:	f7fa fc08 	bl	80001f0 <memchr>
 80059e0:	b138      	cbz	r0, 80059f2 <_vfiprintf_r+0x176>
 80059e2:	9b04      	ldr	r3, [sp, #16]
 80059e4:	eba0 000a 	sub.w	r0, r0, sl
 80059e8:	2240      	movs	r2, #64	@ 0x40
 80059ea:	4082      	lsls	r2, r0
 80059ec:	4313      	orrs	r3, r2
 80059ee:	3401      	adds	r4, #1
 80059f0:	9304      	str	r3, [sp, #16]
 80059f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059f6:	4829      	ldr	r0, [pc, #164]	@ (8005a9c <_vfiprintf_r+0x220>)
 80059f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80059fc:	2206      	movs	r2, #6
 80059fe:	f7fa fbf7 	bl	80001f0 <memchr>
 8005a02:	2800      	cmp	r0, #0
 8005a04:	d03f      	beq.n	8005a86 <_vfiprintf_r+0x20a>
 8005a06:	4b26      	ldr	r3, [pc, #152]	@ (8005aa0 <_vfiprintf_r+0x224>)
 8005a08:	bb1b      	cbnz	r3, 8005a52 <_vfiprintf_r+0x1d6>
 8005a0a:	9b03      	ldr	r3, [sp, #12]
 8005a0c:	3307      	adds	r3, #7
 8005a0e:	f023 0307 	bic.w	r3, r3, #7
 8005a12:	3308      	adds	r3, #8
 8005a14:	9303      	str	r3, [sp, #12]
 8005a16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a18:	443b      	add	r3, r7
 8005a1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a1c:	e76a      	b.n	80058f4 <_vfiprintf_r+0x78>
 8005a1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a22:	460c      	mov	r4, r1
 8005a24:	2001      	movs	r0, #1
 8005a26:	e7a8      	b.n	800597a <_vfiprintf_r+0xfe>
 8005a28:	2300      	movs	r3, #0
 8005a2a:	3401      	adds	r4, #1
 8005a2c:	9305      	str	r3, [sp, #20]
 8005a2e:	4619      	mov	r1, r3
 8005a30:	f04f 0c0a 	mov.w	ip, #10
 8005a34:	4620      	mov	r0, r4
 8005a36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a3a:	3a30      	subs	r2, #48	@ 0x30
 8005a3c:	2a09      	cmp	r2, #9
 8005a3e:	d903      	bls.n	8005a48 <_vfiprintf_r+0x1cc>
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d0c6      	beq.n	80059d2 <_vfiprintf_r+0x156>
 8005a44:	9105      	str	r1, [sp, #20]
 8005a46:	e7c4      	b.n	80059d2 <_vfiprintf_r+0x156>
 8005a48:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a4c:	4604      	mov	r4, r0
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e7f0      	b.n	8005a34 <_vfiprintf_r+0x1b8>
 8005a52:	ab03      	add	r3, sp, #12
 8005a54:	9300      	str	r3, [sp, #0]
 8005a56:	462a      	mov	r2, r5
 8005a58:	4b12      	ldr	r3, [pc, #72]	@ (8005aa4 <_vfiprintf_r+0x228>)
 8005a5a:	a904      	add	r1, sp, #16
 8005a5c:	4630      	mov	r0, r6
 8005a5e:	f3af 8000 	nop.w
 8005a62:	4607      	mov	r7, r0
 8005a64:	1c78      	adds	r0, r7, #1
 8005a66:	d1d6      	bne.n	8005a16 <_vfiprintf_r+0x19a>
 8005a68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005a6a:	07d9      	lsls	r1, r3, #31
 8005a6c:	d405      	bmi.n	8005a7a <_vfiprintf_r+0x1fe>
 8005a6e:	89ab      	ldrh	r3, [r5, #12]
 8005a70:	059a      	lsls	r2, r3, #22
 8005a72:	d402      	bmi.n	8005a7a <_vfiprintf_r+0x1fe>
 8005a74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005a76:	f7ff f9a7 	bl	8004dc8 <__retarget_lock_release_recursive>
 8005a7a:	89ab      	ldrh	r3, [r5, #12]
 8005a7c:	065b      	lsls	r3, r3, #25
 8005a7e:	f53f af1f 	bmi.w	80058c0 <_vfiprintf_r+0x44>
 8005a82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005a84:	e71e      	b.n	80058c4 <_vfiprintf_r+0x48>
 8005a86:	ab03      	add	r3, sp, #12
 8005a88:	9300      	str	r3, [sp, #0]
 8005a8a:	462a      	mov	r2, r5
 8005a8c:	4b05      	ldr	r3, [pc, #20]	@ (8005aa4 <_vfiprintf_r+0x228>)
 8005a8e:	a904      	add	r1, sp, #16
 8005a90:	4630      	mov	r0, r6
 8005a92:	f7ff fc7f 	bl	8005394 <_printf_i>
 8005a96:	e7e4      	b.n	8005a62 <_vfiprintf_r+0x1e6>
 8005a98:	08005f92 	.word	0x08005f92
 8005a9c:	08005f9c 	.word	0x08005f9c
 8005aa0:	00000000 	.word	0x00000000
 8005aa4:	08005859 	.word	0x08005859
 8005aa8:	08005f98 	.word	0x08005f98

08005aac <__swbuf_r>:
 8005aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aae:	460e      	mov	r6, r1
 8005ab0:	4614      	mov	r4, r2
 8005ab2:	4605      	mov	r5, r0
 8005ab4:	b118      	cbz	r0, 8005abe <__swbuf_r+0x12>
 8005ab6:	6a03      	ldr	r3, [r0, #32]
 8005ab8:	b90b      	cbnz	r3, 8005abe <__swbuf_r+0x12>
 8005aba:	f7ff f815 	bl	8004ae8 <__sinit>
 8005abe:	69a3      	ldr	r3, [r4, #24]
 8005ac0:	60a3      	str	r3, [r4, #8]
 8005ac2:	89a3      	ldrh	r3, [r4, #12]
 8005ac4:	071a      	lsls	r2, r3, #28
 8005ac6:	d501      	bpl.n	8005acc <__swbuf_r+0x20>
 8005ac8:	6923      	ldr	r3, [r4, #16]
 8005aca:	b943      	cbnz	r3, 8005ade <__swbuf_r+0x32>
 8005acc:	4621      	mov	r1, r4
 8005ace:	4628      	mov	r0, r5
 8005ad0:	f000 f82a 	bl	8005b28 <__swsetup_r>
 8005ad4:	b118      	cbz	r0, 8005ade <__swbuf_r+0x32>
 8005ad6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005ada:	4638      	mov	r0, r7
 8005adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ade:	6823      	ldr	r3, [r4, #0]
 8005ae0:	6922      	ldr	r2, [r4, #16]
 8005ae2:	1a98      	subs	r0, r3, r2
 8005ae4:	6963      	ldr	r3, [r4, #20]
 8005ae6:	b2f6      	uxtb	r6, r6
 8005ae8:	4283      	cmp	r3, r0
 8005aea:	4637      	mov	r7, r6
 8005aec:	dc05      	bgt.n	8005afa <__swbuf_r+0x4e>
 8005aee:	4621      	mov	r1, r4
 8005af0:	4628      	mov	r0, r5
 8005af2:	f7ff fdf3 	bl	80056dc <_fflush_r>
 8005af6:	2800      	cmp	r0, #0
 8005af8:	d1ed      	bne.n	8005ad6 <__swbuf_r+0x2a>
 8005afa:	68a3      	ldr	r3, [r4, #8]
 8005afc:	3b01      	subs	r3, #1
 8005afe:	60a3      	str	r3, [r4, #8]
 8005b00:	6823      	ldr	r3, [r4, #0]
 8005b02:	1c5a      	adds	r2, r3, #1
 8005b04:	6022      	str	r2, [r4, #0]
 8005b06:	701e      	strb	r6, [r3, #0]
 8005b08:	6962      	ldr	r2, [r4, #20]
 8005b0a:	1c43      	adds	r3, r0, #1
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d004      	beq.n	8005b1a <__swbuf_r+0x6e>
 8005b10:	89a3      	ldrh	r3, [r4, #12]
 8005b12:	07db      	lsls	r3, r3, #31
 8005b14:	d5e1      	bpl.n	8005ada <__swbuf_r+0x2e>
 8005b16:	2e0a      	cmp	r6, #10
 8005b18:	d1df      	bne.n	8005ada <__swbuf_r+0x2e>
 8005b1a:	4621      	mov	r1, r4
 8005b1c:	4628      	mov	r0, r5
 8005b1e:	f7ff fddd 	bl	80056dc <_fflush_r>
 8005b22:	2800      	cmp	r0, #0
 8005b24:	d0d9      	beq.n	8005ada <__swbuf_r+0x2e>
 8005b26:	e7d6      	b.n	8005ad6 <__swbuf_r+0x2a>

08005b28 <__swsetup_r>:
 8005b28:	b538      	push	{r3, r4, r5, lr}
 8005b2a:	4b29      	ldr	r3, [pc, #164]	@ (8005bd0 <__swsetup_r+0xa8>)
 8005b2c:	4605      	mov	r5, r0
 8005b2e:	6818      	ldr	r0, [r3, #0]
 8005b30:	460c      	mov	r4, r1
 8005b32:	b118      	cbz	r0, 8005b3c <__swsetup_r+0x14>
 8005b34:	6a03      	ldr	r3, [r0, #32]
 8005b36:	b90b      	cbnz	r3, 8005b3c <__swsetup_r+0x14>
 8005b38:	f7fe ffd6 	bl	8004ae8 <__sinit>
 8005b3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b40:	0719      	lsls	r1, r3, #28
 8005b42:	d422      	bmi.n	8005b8a <__swsetup_r+0x62>
 8005b44:	06da      	lsls	r2, r3, #27
 8005b46:	d407      	bmi.n	8005b58 <__swsetup_r+0x30>
 8005b48:	2209      	movs	r2, #9
 8005b4a:	602a      	str	r2, [r5, #0]
 8005b4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b50:	81a3      	strh	r3, [r4, #12]
 8005b52:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005b56:	e033      	b.n	8005bc0 <__swsetup_r+0x98>
 8005b58:	0758      	lsls	r0, r3, #29
 8005b5a:	d512      	bpl.n	8005b82 <__swsetup_r+0x5a>
 8005b5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005b5e:	b141      	cbz	r1, 8005b72 <__swsetup_r+0x4a>
 8005b60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005b64:	4299      	cmp	r1, r3
 8005b66:	d002      	beq.n	8005b6e <__swsetup_r+0x46>
 8005b68:	4628      	mov	r0, r5
 8005b6a:	f7ff f94d 	bl	8004e08 <_free_r>
 8005b6e:	2300      	movs	r3, #0
 8005b70:	6363      	str	r3, [r4, #52]	@ 0x34
 8005b72:	89a3      	ldrh	r3, [r4, #12]
 8005b74:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005b78:	81a3      	strh	r3, [r4, #12]
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	6063      	str	r3, [r4, #4]
 8005b7e:	6923      	ldr	r3, [r4, #16]
 8005b80:	6023      	str	r3, [r4, #0]
 8005b82:	89a3      	ldrh	r3, [r4, #12]
 8005b84:	f043 0308 	orr.w	r3, r3, #8
 8005b88:	81a3      	strh	r3, [r4, #12]
 8005b8a:	6923      	ldr	r3, [r4, #16]
 8005b8c:	b94b      	cbnz	r3, 8005ba2 <__swsetup_r+0x7a>
 8005b8e:	89a3      	ldrh	r3, [r4, #12]
 8005b90:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005b94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b98:	d003      	beq.n	8005ba2 <__swsetup_r+0x7a>
 8005b9a:	4621      	mov	r1, r4
 8005b9c:	4628      	mov	r0, r5
 8005b9e:	f000 f88b 	bl	8005cb8 <__smakebuf_r>
 8005ba2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ba6:	f013 0201 	ands.w	r2, r3, #1
 8005baa:	d00a      	beq.n	8005bc2 <__swsetup_r+0x9a>
 8005bac:	2200      	movs	r2, #0
 8005bae:	60a2      	str	r2, [r4, #8]
 8005bb0:	6962      	ldr	r2, [r4, #20]
 8005bb2:	4252      	negs	r2, r2
 8005bb4:	61a2      	str	r2, [r4, #24]
 8005bb6:	6922      	ldr	r2, [r4, #16]
 8005bb8:	b942      	cbnz	r2, 8005bcc <__swsetup_r+0xa4>
 8005bba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005bbe:	d1c5      	bne.n	8005b4c <__swsetup_r+0x24>
 8005bc0:	bd38      	pop	{r3, r4, r5, pc}
 8005bc2:	0799      	lsls	r1, r3, #30
 8005bc4:	bf58      	it	pl
 8005bc6:	6962      	ldrpl	r2, [r4, #20]
 8005bc8:	60a2      	str	r2, [r4, #8]
 8005bca:	e7f4      	b.n	8005bb6 <__swsetup_r+0x8e>
 8005bcc:	2000      	movs	r0, #0
 8005bce:	e7f7      	b.n	8005bc0 <__swsetup_r+0x98>
 8005bd0:	2000001c 	.word	0x2000001c

08005bd4 <_raise_r>:
 8005bd4:	291f      	cmp	r1, #31
 8005bd6:	b538      	push	{r3, r4, r5, lr}
 8005bd8:	4605      	mov	r5, r0
 8005bda:	460c      	mov	r4, r1
 8005bdc:	d904      	bls.n	8005be8 <_raise_r+0x14>
 8005bde:	2316      	movs	r3, #22
 8005be0:	6003      	str	r3, [r0, #0]
 8005be2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005be6:	bd38      	pop	{r3, r4, r5, pc}
 8005be8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005bea:	b112      	cbz	r2, 8005bf2 <_raise_r+0x1e>
 8005bec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005bf0:	b94b      	cbnz	r3, 8005c06 <_raise_r+0x32>
 8005bf2:	4628      	mov	r0, r5
 8005bf4:	f000 f830 	bl	8005c58 <_getpid_r>
 8005bf8:	4622      	mov	r2, r4
 8005bfa:	4601      	mov	r1, r0
 8005bfc:	4628      	mov	r0, r5
 8005bfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c02:	f000 b817 	b.w	8005c34 <_kill_r>
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d00a      	beq.n	8005c20 <_raise_r+0x4c>
 8005c0a:	1c59      	adds	r1, r3, #1
 8005c0c:	d103      	bne.n	8005c16 <_raise_r+0x42>
 8005c0e:	2316      	movs	r3, #22
 8005c10:	6003      	str	r3, [r0, #0]
 8005c12:	2001      	movs	r0, #1
 8005c14:	e7e7      	b.n	8005be6 <_raise_r+0x12>
 8005c16:	2100      	movs	r1, #0
 8005c18:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005c1c:	4620      	mov	r0, r4
 8005c1e:	4798      	blx	r3
 8005c20:	2000      	movs	r0, #0
 8005c22:	e7e0      	b.n	8005be6 <_raise_r+0x12>

08005c24 <raise>:
 8005c24:	4b02      	ldr	r3, [pc, #8]	@ (8005c30 <raise+0xc>)
 8005c26:	4601      	mov	r1, r0
 8005c28:	6818      	ldr	r0, [r3, #0]
 8005c2a:	f7ff bfd3 	b.w	8005bd4 <_raise_r>
 8005c2e:	bf00      	nop
 8005c30:	2000001c 	.word	0x2000001c

08005c34 <_kill_r>:
 8005c34:	b538      	push	{r3, r4, r5, lr}
 8005c36:	4d07      	ldr	r5, [pc, #28]	@ (8005c54 <_kill_r+0x20>)
 8005c38:	2300      	movs	r3, #0
 8005c3a:	4604      	mov	r4, r0
 8005c3c:	4608      	mov	r0, r1
 8005c3e:	4611      	mov	r1, r2
 8005c40:	602b      	str	r3, [r5, #0]
 8005c42:	f7fb fbcf 	bl	80013e4 <_kill>
 8005c46:	1c43      	adds	r3, r0, #1
 8005c48:	d102      	bne.n	8005c50 <_kill_r+0x1c>
 8005c4a:	682b      	ldr	r3, [r5, #0]
 8005c4c:	b103      	cbz	r3, 8005c50 <_kill_r+0x1c>
 8005c4e:	6023      	str	r3, [r4, #0]
 8005c50:	bd38      	pop	{r3, r4, r5, pc}
 8005c52:	bf00      	nop
 8005c54:	20000490 	.word	0x20000490

08005c58 <_getpid_r>:
 8005c58:	f7fb bbbc 	b.w	80013d4 <_getpid>

08005c5c <_malloc_usable_size_r>:
 8005c5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c60:	1f18      	subs	r0, r3, #4
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	bfbc      	itt	lt
 8005c66:	580b      	ldrlt	r3, [r1, r0]
 8005c68:	18c0      	addlt	r0, r0, r3
 8005c6a:	4770      	bx	lr

08005c6c <__swhatbuf_r>:
 8005c6c:	b570      	push	{r4, r5, r6, lr}
 8005c6e:	460c      	mov	r4, r1
 8005c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c74:	2900      	cmp	r1, #0
 8005c76:	b096      	sub	sp, #88	@ 0x58
 8005c78:	4615      	mov	r5, r2
 8005c7a:	461e      	mov	r6, r3
 8005c7c:	da0d      	bge.n	8005c9a <__swhatbuf_r+0x2e>
 8005c7e:	89a3      	ldrh	r3, [r4, #12]
 8005c80:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005c84:	f04f 0100 	mov.w	r1, #0
 8005c88:	bf14      	ite	ne
 8005c8a:	2340      	movne	r3, #64	@ 0x40
 8005c8c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005c90:	2000      	movs	r0, #0
 8005c92:	6031      	str	r1, [r6, #0]
 8005c94:	602b      	str	r3, [r5, #0]
 8005c96:	b016      	add	sp, #88	@ 0x58
 8005c98:	bd70      	pop	{r4, r5, r6, pc}
 8005c9a:	466a      	mov	r2, sp
 8005c9c:	f000 f848 	bl	8005d30 <_fstat_r>
 8005ca0:	2800      	cmp	r0, #0
 8005ca2:	dbec      	blt.n	8005c7e <__swhatbuf_r+0x12>
 8005ca4:	9901      	ldr	r1, [sp, #4]
 8005ca6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005caa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005cae:	4259      	negs	r1, r3
 8005cb0:	4159      	adcs	r1, r3
 8005cb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005cb6:	e7eb      	b.n	8005c90 <__swhatbuf_r+0x24>

08005cb8 <__smakebuf_r>:
 8005cb8:	898b      	ldrh	r3, [r1, #12]
 8005cba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005cbc:	079d      	lsls	r5, r3, #30
 8005cbe:	4606      	mov	r6, r0
 8005cc0:	460c      	mov	r4, r1
 8005cc2:	d507      	bpl.n	8005cd4 <__smakebuf_r+0x1c>
 8005cc4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005cc8:	6023      	str	r3, [r4, #0]
 8005cca:	6123      	str	r3, [r4, #16]
 8005ccc:	2301      	movs	r3, #1
 8005cce:	6163      	str	r3, [r4, #20]
 8005cd0:	b003      	add	sp, #12
 8005cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cd4:	ab01      	add	r3, sp, #4
 8005cd6:	466a      	mov	r2, sp
 8005cd8:	f7ff ffc8 	bl	8005c6c <__swhatbuf_r>
 8005cdc:	9f00      	ldr	r7, [sp, #0]
 8005cde:	4605      	mov	r5, r0
 8005ce0:	4639      	mov	r1, r7
 8005ce2:	4630      	mov	r0, r6
 8005ce4:	f7ff f904 	bl	8004ef0 <_malloc_r>
 8005ce8:	b948      	cbnz	r0, 8005cfe <__smakebuf_r+0x46>
 8005cea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cee:	059a      	lsls	r2, r3, #22
 8005cf0:	d4ee      	bmi.n	8005cd0 <__smakebuf_r+0x18>
 8005cf2:	f023 0303 	bic.w	r3, r3, #3
 8005cf6:	f043 0302 	orr.w	r3, r3, #2
 8005cfa:	81a3      	strh	r3, [r4, #12]
 8005cfc:	e7e2      	b.n	8005cc4 <__smakebuf_r+0xc>
 8005cfe:	89a3      	ldrh	r3, [r4, #12]
 8005d00:	6020      	str	r0, [r4, #0]
 8005d02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d06:	81a3      	strh	r3, [r4, #12]
 8005d08:	9b01      	ldr	r3, [sp, #4]
 8005d0a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005d0e:	b15b      	cbz	r3, 8005d28 <__smakebuf_r+0x70>
 8005d10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d14:	4630      	mov	r0, r6
 8005d16:	f000 f81d 	bl	8005d54 <_isatty_r>
 8005d1a:	b128      	cbz	r0, 8005d28 <__smakebuf_r+0x70>
 8005d1c:	89a3      	ldrh	r3, [r4, #12]
 8005d1e:	f023 0303 	bic.w	r3, r3, #3
 8005d22:	f043 0301 	orr.w	r3, r3, #1
 8005d26:	81a3      	strh	r3, [r4, #12]
 8005d28:	89a3      	ldrh	r3, [r4, #12]
 8005d2a:	431d      	orrs	r5, r3
 8005d2c:	81a5      	strh	r5, [r4, #12]
 8005d2e:	e7cf      	b.n	8005cd0 <__smakebuf_r+0x18>

08005d30 <_fstat_r>:
 8005d30:	b538      	push	{r3, r4, r5, lr}
 8005d32:	4d07      	ldr	r5, [pc, #28]	@ (8005d50 <_fstat_r+0x20>)
 8005d34:	2300      	movs	r3, #0
 8005d36:	4604      	mov	r4, r0
 8005d38:	4608      	mov	r0, r1
 8005d3a:	4611      	mov	r1, r2
 8005d3c:	602b      	str	r3, [r5, #0]
 8005d3e:	f7fb fbb1 	bl	80014a4 <_fstat>
 8005d42:	1c43      	adds	r3, r0, #1
 8005d44:	d102      	bne.n	8005d4c <_fstat_r+0x1c>
 8005d46:	682b      	ldr	r3, [r5, #0]
 8005d48:	b103      	cbz	r3, 8005d4c <_fstat_r+0x1c>
 8005d4a:	6023      	str	r3, [r4, #0]
 8005d4c:	bd38      	pop	{r3, r4, r5, pc}
 8005d4e:	bf00      	nop
 8005d50:	20000490 	.word	0x20000490

08005d54 <_isatty_r>:
 8005d54:	b538      	push	{r3, r4, r5, lr}
 8005d56:	4d06      	ldr	r5, [pc, #24]	@ (8005d70 <_isatty_r+0x1c>)
 8005d58:	2300      	movs	r3, #0
 8005d5a:	4604      	mov	r4, r0
 8005d5c:	4608      	mov	r0, r1
 8005d5e:	602b      	str	r3, [r5, #0]
 8005d60:	f7fb fbb0 	bl	80014c4 <_isatty>
 8005d64:	1c43      	adds	r3, r0, #1
 8005d66:	d102      	bne.n	8005d6e <_isatty_r+0x1a>
 8005d68:	682b      	ldr	r3, [r5, #0]
 8005d6a:	b103      	cbz	r3, 8005d6e <_isatty_r+0x1a>
 8005d6c:	6023      	str	r3, [r4, #0]
 8005d6e:	bd38      	pop	{r3, r4, r5, pc}
 8005d70:	20000490 	.word	0x20000490

08005d74 <_init>:
 8005d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d76:	bf00      	nop
 8005d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d7a:	bc08      	pop	{r3}
 8005d7c:	469e      	mov	lr, r3
 8005d7e:	4770      	bx	lr

08005d80 <_fini>:
 8005d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d82:	bf00      	nop
 8005d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d86:	bc08      	pop	{r3}
 8005d88:	469e      	mov	lr, r3
 8005d8a:	4770      	bx	lr
